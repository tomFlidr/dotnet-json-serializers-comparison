{"tagname":"class","name":"Ext.Class","autodetected":{},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/class/Class.js","linenr":1}],"doc":"<p>This is a low level factory that is used by <a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a> and should not be used\ndirectly in application code.</p>\n\n<p>The configs of this class are intended to be used in <code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a></code> calls to describe the class you\nare declaring. For example:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('App.util.Thing', {\n    extend: 'App.util.Other',\n\n    alias: 'util.thing',\n\n    config: {\n        foo: 42\n    }\n});\n</code></pre>\n\n<p><a href=\"#!/api/Ext.Class\" rel=\"Ext.Class\" class=\"docClass\">Ext.Class</a> is the factory and <strong>not</strong> the superclass of everything. For the base class\nthat <strong>all</strong> classes inherit from, see <a href=\"#!/api/Ext.Base\" rel=\"Ext.Base\" class=\"docClass\">Ext.Base</a>.</p>\n","members":[{"tagname":"cfg","name":"alias","autodetected":{},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/class/ClassManager.js","linenr":1235}],"doc":"<p>List of short aliases for class names. An alias consists of a namespace and a name\nconcatenated by a period as &#60;namespace&#62;.&#60;name&#62;</p>\n\n<ul>\n<li><strong>namespace</strong> - The namespace describes what kind of alias this is and must be\nall lowercase.</li>\n<li><strong>name</strong> - The name of the alias which allows the lazy-instantiation via the\nalias. The name shouldn't contain any periods.</li>\n</ul>\n\n\n<p>A list of namespaces and the usages are:</p>\n\n<ul>\n<li><strong>feature</strong> - <a href=\"#!/api/Ext.grid.Panel\" rel=\"Ext.grid.Panel\" class=\"docClass\">Grid</a> features</li>\n<li><strong>plugin</strong> - Plugins</li>\n<li><strong>store</strong> - <a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Ext.data.Store</a></li>\n<li><strong>widget</strong> - Components</li>\n</ul>\n\n\n<p>Most useful for defining xtypes for widgets:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('MyApp.CoolPanel', {\n    extend: '<a href=\"#!/api/Ext.panel.Panel\" rel=\"Ext.panel.Panel\" class=\"docClass\">Ext.panel.Panel</a>',\n    alias: ['widget.coolpanel'],\n    title: 'Yeah!'\n});\n\n// Using <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>\n<a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('widget.coolpanel');\n\n// Using the shorthand for defining widgets by xtype\n<a href=\"#!/api/Ext-method-widget\" rel=\"Ext-method-widget\" class=\"docClass\">Ext.widget</a>('panel', {\n    items: [\n        {xtype: 'coolpanel', html: 'Foo'},\n        {xtype: 'coolpanel', html: 'Bar'}\n    ]\n});\n</code></pre>\n","type":"String/String[]","default":null,"properties":null,"owner":"Ext.Class","id":"cfg-alias","short_doc":"List of short aliases for class names. ...","html_type":"<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>/<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>[]"},{"tagname":"cfg","name":"alternateClassName","autodetected":{},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/class/ClassManager.js","linenr":1326}],"doc":"<p>Defines alternate names for this class.  For example:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Developer', {\n    alternateClassName: ['Coder', 'Hacker'],\n    code: function(msg) {\n        alert('Typing... ' + msg);\n    }\n});\n\nvar joe = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('Developer');\njoe.code('stackoverflow');\n\nvar rms = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('Hacker');\nrms.code('hack hack');\n</code></pre>\n","type":"String/String[]","default":null,"properties":null,"owner":"Ext.Class","id":"cfg-alternateClassName","short_doc":"Defines alternate names for this class. ...","html_type":"<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>/<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>[]"},{"tagname":"cfg","name":"cachedConfig","autodetected":{},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/class/Class.js","linenr":718}],"doc":"<p>This configuration works in a very similar manner to the <a href=\"#!/api/Ext.Class-cfg-config\" rel=\"Ext.Class-cfg-config\" class=\"docClass\">config</a> option.\nThe difference is that the configurations are only ever processed when the first instance\nof that class is created. The processed value is then stored on the class prototype and\nwill not be processed on subsequent instances of the class. Getters/setters will be generated\nin exactly the same way as <a href=\"#!/api/Ext.Class-cfg-config\" rel=\"Ext.Class-cfg-config\" class=\"docClass\">config</a>.</p>\n\n<p>This option is useful for expensive objects that can be shared across class instances.\nThe class itself ensures that the creation only occurs once.</p>\n","type":"Object","default":null,"properties":null,"id":"cfg-cachedConfig","owner":"Ext.Class","short_doc":"This configuration works in a very similar manner to the config option. ...","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"},{"tagname":"cfg","name":"config","autodetected":{},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/class/Class.js","linenr":588}],"doc":"<p>List of configuration options with their default values.</p>\n\n<p><strong>Note:</strong> You need to make sure <a href=\"#!/api/Ext.Base-method-initConfig\" rel=\"Ext.Base-method-initConfig\" class=\"docClass\">Ext.Base.initConfig</a> is called from your constructor\nif you are defining your own class or singleton, unless you are extending a Component.\nOtherwise the generated getter and setter methods will not be initialized.</p>\n\n<p>Each config item will have its own setter and getter method automatically generated inside\nthe class prototype during class creation time, if the class does not have those methods\nexplicitly defined.</p>\n\n<p>As an example, let's convert the name property of a Person class to be a config item, then\nadd extra age and gender items.</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('My.sample.Person', {\n    config: {\n        name: 'Mr. Unknown',\n        age: 0,\n        gender: 'Male'\n    },\n\n    constructor: function(config) {\n        this.initConfig(config);\n\n        return this;\n    }\n\n    // ...\n});\n</code></pre>\n\n<p>Within the class, this.name still has the default value of \"Mr. Unknown\". However, it's now\npublicly accessible without sacrificing encapsulation, via setter and getter methods.</p>\n\n<pre><code>var jacky = new My.sample.Person({\n    name: \"Jacky\",\n    age: 35\n});\n\nalert(jacky.getAge());      // alerts 35\nalert(jacky.getGender());   // alerts \"Male\"\n\njacky.setName(\"Mr. Nguyen\");\nalert(jacky.getName());     // alerts \"Mr. Nguyen\"\n</code></pre>\n\n<p>Notice that we changed the class constructor to invoke this.initConfig() and pass in the\nprovided config object. Two key things happened:</p>\n\n<ul>\n<li>The provided config object when the class is instantiated is recursively merged with\nthe default config object.</li>\n<li>All corresponding setter methods are called with the merged values.</li>\n</ul>\n\n\n<p>Beside storing the given values, throughout the frameworks, setters generally have two key\nresponsibilities:</p>\n\n<ul>\n<li>Filtering / validation / transformation of the given value before it's actually stored\nwithin the instance.</li>\n<li>Notification (such as firing events) / post-processing after the value has been set,\nor changed from a previous value.</li>\n</ul>\n\n\n<p>By standardize this common pattern, the default generated setters provide two extra template\nmethods that you can put your own custom logic into, i.e: an \"applyFoo\" and \"updateFoo\"\nmethod for a \"foo\" config item, which are executed before and after the value is actually\nset, respectively. Back to the example class, let's validate that age must be a valid\npositive number, and fire an 'agechange' if the value is modified.</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('My.sample.Person', {\n    config: {\n        // ...\n    },\n\n    constructor: {\n        // ...\n    },\n\n    applyAge: function(age) {\n        if (typeof age !== 'number' || age &lt; 0) {\n            console.warn(\"Invalid age, must be a positive number\");\n            return;\n        }\n\n        return age;\n    },\n\n    updateAge: function(newAge, oldAge) {\n        // age has changed from \"oldAge\" to \"newAge\"\n        this.fireEvent('agechange', this, newAge, oldAge);\n    }\n\n    // ...\n});\n\nvar jacky = new My.sample.Person({\n    name: \"Jacky\",\n    age: 'invalid'\n});\n\nalert(jacky.getAge());      // alerts 0\n\nalert(jacky.setAge(-100));  // alerts 0\nalert(jacky.getAge());      // alerts 0\n\nalert(jacky.setAge(35));    // alerts 0\nalert(jacky.getAge());      // alerts 35\n</code></pre>\n\n<p>In other words, when leveraging the config feature, you mostly never need to define setter\nand getter methods explicitly. Instead, \"apply<em>\" and \"update</em>\" methods should be implemented\nwhere necessary. Your code will be consistent throughout and only contain the minimal logic\nthat you actually care about.</p>\n\n<p>When it comes to inheritance, the default config of the parent class is automatically,\nrecursively merged with the child's default config. The same applies for mixins.</p>\n","type":"Object","default":null,"properties":null,"id":"cfg-config","owner":"Ext.Class","short_doc":"List of configuration options with their default values. ...","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"},{"tagname":"cfg","name":"eventedConfig","autodetected":{},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/class/Class.js","linenr":399}],"doc":"<p>Config options defined within <code>eventedConfig</code> will auto-generate the setter /\ngetter methods (see <a href=\"#!/api/Ext.Class-cfg-config\" rel=\"Ext.Class-cfg-config\" class=\"docClass\">config</a> for more information on\nauto-generated getter / setter methods).  Additionally, when an\n<code>eventedConfig</code> is set it will also fire a before{cfg}change and {cfg}change\nevent when the value of the eventedConfig is changed from its originally\ndefined value.</p>\n\n<p><strong>Note:</strong> When creating a custom class you'll need to extend <a href=\"#!/api/Ext.Evented\" rel=\"Ext.Evented\" class=\"docClass\">Ext.Evented</a></p>\n\n<p>Example custom class:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('MyApp.util.Test', {\n    extend: '<a href=\"#!/api/Ext.Evented\" rel=\"Ext.Evented\" class=\"docClass\">Ext.Evented</a>',\n\n    eventedConfig: {\n        foo: null\n    }\n});\n</code></pre>\n\n<p>In this example, the <code>foo</code> config will initially be null.  Changing it via\n<code>setFoo</code> will fire the <code>beforefoochange</code> event.  The call to the setter can be\nhalted by returning <code>false</code> from a listener on the <strong>before</strong> event.</p>\n\n<pre><code>var test = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('MyApp.util.Test', {\n    listeners: {\n        beforefoochange: function (instance, newValue, oldValue) {\n            return newValue !== 'bar';\n        },\n        foochange: function (instance, newValue, oldValue) {\n           console.log('foo changed to:', newValue);\n        }\n    }\n});\n\ntest.setFoo('bar');\n</code></pre>\n\n<p>The <code>before</code> event handler can be used to validate changes to <code>foo</code>.\nReturning <code>false</code> will prevent the setter from changing the value of the\nconfig.  In the previous example the <code>beforefoochange</code> handler returns false\nso <code>foo</code> will not be updated and <code>foochange</code> will not be fired.</p>\n\n<pre><code>test.setFoo('baz');\n</code></pre>\n\n<p>Setting <code>foo</code> to 'baz' will not be prevented by the <code>before</code> handler.  Foo\nwill be set to the value: 'baz' and the <code>foochange</code> event will be fired.</p>\n","type":"Object","default":null,"properties":null,"id":"cfg-eventedConfig","owner":"Ext.Class","short_doc":"Config options defined within eventedConfig will auto-generate the setter /\ngetter methods (see config for more infor...","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"},{"tagname":"cfg","name":"extend","autodetected":{},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/class/Class.js","linenr":351}],"doc":"<p>The parent class that this class extends. For example:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Person', {\n    say: function(text) { alert(text); }\n});\n\n<a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Developer', {\n    extend: 'Person',\n    say: function(text) { this.callParent([\"print \"+text]); }\n});\n</code></pre>\n","type":"String","default":null,"properties":null,"id":"cfg-extend","owner":"Ext.Class","short_doc":"The parent class that this class extends. ...","html_type":"<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>"},{"tagname":"cfg","name":"inheritableStatics","autodetected":{},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/class/Class.js","linenr":540}],"doc":"<p>List of inheritable static methods for this class.\nOtherwise just like <a href=\"#!/api/Ext.Class-cfg-statics\" rel=\"Ext.Class-cfg-statics\" class=\"docClass\">statics</a> but subclasses inherit these methods.</p>\n","type":"Object","default":null,"properties":null,"id":"cfg-inheritableStatics","owner":"Ext.Class","short_doc":"List of inheritable static methods for this class. ...","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"},{"tagname":"cfg","name":"mixins","autodetected":{},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/class/Class.js","linenr":744}],"doc":"<p>List of classes to mix into this class. For example:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('CanSing', {\n     sing: function() {\n         alert(\"For he's a jolly good fellow...\")\n     }\n});\n\n<a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Musician', {\n     mixins: ['CanSing']\n})\n</code></pre>\n\n<p>In this case the Musician class will get a <code>sing</code> method from CanSing mixin.</p>\n\n<p>But what if the Musician already has a <code>sing</code> method? Or you want to mix\nin two classes, both of which define <code>sing</code>?  In such a cases it's good\nto define mixins as an object, where you assign a name to each mixin:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Musician', {\n     mixins: {\n         canSing: 'CanSing'\n     },\n\n     sing: function() {\n         // delegate singing operation to mixin\n         this.mixins.canSing.sing.call(this);\n     }\n})\n</code></pre>\n\n<p>In this case the <code>sing</code> method of Musician will overwrite the\nmixed in <code>sing</code> method. But you can access the original mixed in method\nthrough special <code>mixins</code> property.</p>\n","type":"String[]/Object","default":null,"properties":null,"id":"cfg-mixins","owner":"Ext.Class","short_doc":"List of classes to mix into this class. ...","html_type":"<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>[]/<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"},{"tagname":"cfg","name":"override","autodetected":{},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/class/ClassManager.js","linenr":1143}],"doc":"<p>Overrides members of the specified <code>target</code> class.</p>\n\n<p><strong>NOTE:</strong> the overridden class must have been defined using\n<a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a> in order to use the <code>override</code> config.</p>\n\n<p>Methods defined on the overriding class will not automatically call the methods of\nthe same name in the ancestor class chain.  To call the parent's method of the\nsame name you must call callParent.  To skip the\nmethod of the overridden class and call its parent you will instead call\ncallSuper.</p>\n\n<p>See <a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a> for additional usage examples.</p>\n","type":"String","default":null,"properties":null,"owner":"Ext.Class","id":"cfg-override","short_doc":"Overrides members of the specified target class. ...","html_type":"<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>"},{"tagname":"cfg","name":"privates","autodetected":{},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/class/Class.js","linenr":455}],"doc":"<p>The <code>privates</code> config is a list of methods intended to be used internally by the\nframework.  Methods are placed in a <code>privates</code> block to prevent developers from\naccidentally overriding framework methods in custom classes.</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Computer', {\n    privates: {\n        runFactory: function(brand) {\n            // internal only processing of brand passed to factory\n            this.factory(brand);\n        }\n    },\n\n    factory: function (brand) {}\n});\n</code></pre>\n\n<p>In order to override a method from a <code>privates</code> block, the overridden method must\nalso be placed in a <code>privates</code> block within the override class.</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Override.Computer', {\n    override: 'Computer',\n    privates: {\n        runFactory: function() {\n            // overriding logic\n        }\n    }\n});\n</code></pre>\n","type":"Object","default":null,"properties":null,"id":"cfg-privates","owner":"Ext.Class","short_doc":"The privates config is a list of methods intended to be used internally by the\nframework. ...","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"},{"tagname":"cfg","name":"requires","autodetected":{},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/class/Loader.js","linenr":1018}],"doc":"<p>List of classes that have to be loaded before instantiating this class.\nFor example:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Mother', {\n    requires: ['Child'],\n    giveBirth: function() {\n        // we can be sure that child class is available.\n        return new Child();\n    }\n});\n</code></pre>\n","type":"String[]","default":null,"properties":null,"owner":"Ext.Class","id":"cfg-requires","short_doc":"List of classes that have to be loaded before instantiating this class. ...","html_type":"<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>[]"},{"tagname":"cfg","name":"singleton","autodetected":{},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/class/ClassManager.js","linenr":1293}],"doc":"<p>When set to true, the class will be instantiated as singleton.  For example:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Logger', {\n    singleton: true,\n    log: function(msg) {\n        console.log(msg);\n    }\n});\n\nLogger.log('Hello');\n</code></pre>\n","type":"Boolean","default":null,"properties":null,"owner":"Ext.Class","id":"cfg-singleton","short_doc":"When set to true, the class will be instantiated as singleton. ...","html_type":"<a href=\"#!/api/Boolean\" rel=\"Boolean\" class=\"docClass\">Boolean</a>"},{"tagname":"cfg","name":"statics","autodetected":{},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/class/Class.js","linenr":509}],"doc":"<p>List of static methods for this class. For example:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Computer', {\n     statics: {\n         factory: function(brand) {\n             // 'this' in static methods refer to the class itself\n             return new this(brand);\n         }\n     },\n\n     constructor: function() { ... }\n});\n\nvar dellComputer = Computer.factory('Dell');\n</code></pre>\n","type":"Object","default":null,"properties":null,"id":"cfg-statics","owner":"Ext.Class","short_doc":"List of static methods for this class. ...","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"},{"tagname":"cfg","name":"uses","autodetected":{},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/class/Loader.js","linenr":1204}],"doc":"<p>List of optional classes to load together with this class. These aren't neccessarily loaded\nbefore this class is created, but are guaranteed to be available before <a href=\"#!/api/Ext-method-onReady\" rel=\"Ext-method-onReady\" class=\"docClass\">Ext.onReady</a>\nlisteners are invoked. For example:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Mother', {\n    uses: ['Child'],\n    giveBirth: function() {\n        // This code might, or might not work:\n        // return new Child();\n\n        // Instead use <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>() to load the class at the spot if not loaded already:\n        return <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('Child');\n    }\n});\n</code></pre>\n","type":"String[]","default":null,"properties":null,"owner":"Ext.Class","id":"cfg-uses","short_doc":"List of optional classes to load together with this class. ...","html_type":"<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>[]"},{"tagname":"cfg","name":"xtype","autodetected":{},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/class/ClassManager.js","linenr":1137}],"doc":"<p><strong>Note:</strong> Only applies to <a href=\"#!/api/Ext.Component\" rel=\"Ext.Component\" class=\"docClass\">Ext.Component</a> derived classes when used as\na config in <a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>.</p>\n\n<p>This property provides a shorter alternative to creating objects than using a full\nclass name. Using <code>xtype</code> is the most common way to define component instances,\nespecially in a container. For example, the items in a form containing text fields\ncould be created explicitly like so:</p>\n\n<pre><code> items: [\n     <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.form.field.Text\" rel=\"Ext.form.field.Text\" class=\"docClass\">Ext.form.field.Text</a>', {\n         fieldLabel: 'Foo'\n     }),\n     <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.form.field.Text\" rel=\"Ext.form.field.Text\" class=\"docClass\">Ext.form.field.Text</a>', {\n         fieldLabel: 'Bar'\n     }),\n     <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.form.field.Number\" rel=\"Ext.form.field.Number\" class=\"docClass\">Ext.form.field.Number</a>', {\n         fieldLabel: 'Num'\n     })\n ]\n</code></pre>\n\n<p>But by using <code>xtype</code>, the above becomes:</p>\n\n<pre><code> items: [\n     {\n         xtype: 'textfield',\n         fieldLabel: 'Foo'\n     },\n     {\n         xtype: 'textfield',\n         fieldLabel: 'Bar'\n     },\n     {\n         xtype: 'numberfield',\n         fieldLabel: 'Num'\n     }\n ]\n</code></pre>\n\n<p>When the <code>xtype</code> is common to many items, <a href=\"#!/api/Ext.container.Container-cfg-defaultType\" rel=\"Ext.container.Container-cfg-defaultType\" class=\"docClass\">Ext.container.Container.defaultType</a>\nis another way to specify the <code>xtype</code> for all items that don't have an explicit <code>xtype</code>:</p>\n\n<pre><code> defaultType: 'textfield',\n items: [\n     { fieldLabel: 'Foo' },\n     { fieldLabel: 'Bar' },\n     { fieldLabel: 'Num', xtype: 'numberfield' }\n ]\n</code></pre>\n\n<p>Each member of the <code>items</code> array is now just a \"configuration object\". These objects\nare used to create and configure component instances. A configuration object can be\nmanually used to instantiate a component using <a href=\"#!/api/Ext-method-widget\" rel=\"Ext-method-widget\" class=\"docClass\">Ext.widget</a>:</p>\n\n<pre><code> var text1 = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.form.field.Text\" rel=\"Ext.form.field.Text\" class=\"docClass\">Ext.form.field.Text</a>', {\n     fieldLabel: 'Foo'\n });\n\n // or alternatively:\n\n var text1 = <a href=\"#!/api/Ext-method-widget\" rel=\"Ext-method-widget\" class=\"docClass\">Ext.widget</a>({\n     xtype: 'textfield',\n     fieldLabel: 'Foo'\n });\n</code></pre>\n\n<p>This conversion of configuration objects into instantiated components is done when\na container is created as part of its {Ext.container.AbstractContainer#initComponent}\nprocess. As part of the same process, the <code>items</code> array is converted from its raw\narray form into a <a href=\"#!/api/Ext.util.MixedCollection\" rel=\"Ext.util.MixedCollection\" class=\"docClass\">Ext.util.MixedCollection</a> instance.</p>\n\n<p>You can define your own <code>xtype</code> on a custom <a href=\"#!/api/Ext.Component\" rel=\"Ext.Component\" class=\"docClass\">component</a> by specifying\nthe <code>xtype</code> property in <a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>. For example:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('MyApp.PressMeButton', {\n    extend: '<a href=\"#!/api/Ext.button.Button\" rel=\"Ext.button.Button\" class=\"docClass\">Ext.button.Button</a>',\n    xtype: 'pressmebutton',\n    text: 'Press Me'\n});\n</code></pre>\n\n<p>Care should be taken when naming an <code>xtype</code> in a custom component because there is\na single, shared scope for all xtypes. Third part components should consider using\na prefix to avoid collisions.</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Foo.form.CoolButton', {\n    extend: '<a href=\"#!/api/Ext.button.Button\" rel=\"Ext.button.Button\" class=\"docClass\">Ext.button.Button</a>',\n    xtype: 'ux-coolbutton',\n    text: 'Cool!'\n});\n</code></pre>\n\n<p>See <a href=\"#!/api/Ext.enums.Widget\" rel=\"Ext.enums.Widget\" class=\"docClass\">Ext.enums.Widget</a> for list of all available xtypes.</p>\n","type":"Ext.enums.Widget","default":null,"properties":null,"owner":"Ext.Class","inheritdoc":null,"id":"cfg-xtype","params":null,"return":null,"throws":null,"short_doc":"Note: Only applies to Ext.Component derived classes when used as\na config in Ext.define. ...","html_type":"<a href=\"#!/api/Ext.enums.Widget\" rel=\"Ext.enums.Widget\" class=\"docClass\">Ext.enums.Widget</a>"},{"tagname":"property","name":"defaultPreprocessors","autodetected":{"inheritdoc":true,"static":true,"inheritable":true,"linenr":true,"type":true,"default":true,"readonly":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/class/Class.js","linenr":271}],"doc":"\n","private":true,"inheritdoc":null,"static":null,"inheritable":null,"linenr":null,"type":"Array","default":"[]","readonly":null,"id":"property-defaultPreprocessors","owner":"Ext.Class","short_doc":" ...","html_type":"<a href=\"#!/api/Array\" rel=\"Array\" class=\"docClass\">Array</a>"},{"tagname":"property","name":"preprocessors","autodetected":{"inheritdoc":true,"static":true,"inheritable":true,"linenr":true,"type":true,"default":true,"readonly":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/class/Class.js","linenr":199}],"doc":"\n","private":true,"inheritdoc":null,"static":null,"inheritable":null,"linenr":null,"type":"Object","default":"{}","readonly":null,"id":"property-preprocessors","owner":"Ext.Class","short_doc":" ...","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"},{"tagname":"method","name":"constructor","autodetected":{},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/class/Class.js","linenr":56}],"doc":"<p>Create a new anonymous class.</p>\n","params":[{"tagname":"params","name":"Class","doc":"\n","type":"Object","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"},{"tagname":"params","type":"Object","name":"data","doc":"<p>An object represent the properties of this class</p>\n","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"},{"tagname":"params","type":"Function","name":"onCreated","doc":"<p>Optional, the callback function to be executed when this class\nis fully created. Note that the creation process can be asynchronous depending\non the pre-processors used.</p>\n","html_type":"<a href=\"#!/api/Function\" rel=\"Function\" class=\"docClass\">Function</a>"}],"return":{"type":"Ext.Base","name":"return","doc":"<p>The newly created class</p>\n","properties":null,"html_type":"<a href=\"#!/api/Ext.Base\" rel=\"Ext.Base\" class=\"docClass\">Ext.Base</a>"},"id":"method-constructor","owner":"Ext.Class","short_doc":"Create a new anonymous class. ..."},{"tagname":"method","name":"create","autodetected":{"inheritdoc":true,"static":true,"inheritable":true,"linenr":true,"params":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/class/Class.js","linenr":111}],"doc":"\n","private":true,"inheritdoc":null,"static":null,"inheritable":null,"linenr":null,"params":[{"name":"Class","type":"Object","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"},{"name":"data","type":"Object","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"}],"chainable":false,"fires":null,"method_calls":null,"id":"method-create","owner":"Ext.Class","short_doc":" ..."},{"tagname":"method","name":"getPreprocessors","autodetected":{"inheritdoc":true,"static":true,"inheritable":true,"linenr":true,"params":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/class/Class.js","linenr":264}],"doc":"\n","private":true,"inheritdoc":null,"static":null,"inheritable":null,"linenr":null,"params":[],"chainable":false,"fires":null,"method_calls":null,"id":"method-getPreprocessors","owner":"Ext.Class","short_doc":" ..."},{"tagname":"method","name":"onBeforeCreated","autodetected":{"inheritdoc":true,"static":true,"inheritable":true,"linenr":true,"params":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/class/Class.js","linenr":90}],"doc":"\n","private":true,"inheritdoc":null,"static":null,"inheritable":null,"linenr":null,"params":[{"name":"Class","type":"Object","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"},{"name":"data","type":"Object","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"},{"name":"hooks","type":"Object","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"}],"chainable":false,"fires":null,"method_calls":null,"id":"method-onBeforeCreated","owner":"Ext.Class","short_doc":" ..."},{"tagname":"method","name":"process","autodetected":{"inheritdoc":true,"static":true,"inheritable":true,"linenr":true,"params":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/class/Class.js","linenr":134}],"doc":"\n","private":true,"inheritdoc":null,"static":null,"inheritable":null,"linenr":null,"params":[{"name":"Class","type":"Object","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"},{"name":"data","type":"Object","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"},{"name":"onCreated","type":"Object","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"}],"chainable":false,"fires":[],"method_calls":["doProcess"],"id":"method-process","owner":"Ext.Class","short_doc":" ..."},{"tagname":"method","name":"getDefaultPreprocessors","autodetected":{"inheritdoc":true,"inheritable":true,"linenr":true,"params":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/class/Class.js","linenr":276}],"doc":"<p>Retrieve the array stack of default pre-processors</p>\n","return":{"type":"Function[]","name":"return","doc":"<p>defaultPreprocessors</p>\n","properties":null,"html_type":"<a href=\"#!/api/Function\" rel=\"Function\" class=\"docClass\">Function</a>[]"},"private":true,"static":true,"inheritdoc":null,"inheritable":null,"linenr":null,"params":[],"chainable":false,"fires":null,"method_calls":null,"id":"static-method-getDefaultPreprocessors","owner":"Ext.Class","short_doc":"Retrieve the array stack of default pre-processors ..."},{"tagname":"method","name":"getPreprocessor","autodetected":{"inheritdoc":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/class/Class.js","linenr":252}],"doc":"<p>Retrieve a pre-processor callback function by its name, which has been registered before</p>\n","params":[{"tagname":"params","type":"String","name":"name","doc":"\n","html_type":"<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>"}],"return":{"type":"Function","name":"return","doc":"<p>preprocessor</p>\n","properties":null,"html_type":"<a href=\"#!/api/Function\" rel=\"Function\" class=\"docClass\">Function</a>"},"private":true,"static":true,"inheritdoc":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"static-method-getPreprocessor","owner":"Ext.Class","short_doc":"Retrieve a pre-processor callback function by its name, which has been registered before ..."},{"tagname":"method","name":"registerPreprocessor","autodetected":{"inheritdoc":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/class/Class.js","linenr":204}],"doc":"<p>Register a new pre-processor to be used during the class creation process</p>\n","params":[{"tagname":"params","type":"String","name":"name","doc":"<p>The pre-processor's name</p>\n","html_type":"<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>"},{"tagname":"params","type":"Function","name":"fn","doc":"<p>The callback function to be executed. Typical format:</p>\n\n<pre><code>function(cls, data, fn) {\n    // Your code here\n\n    // Execute this when the processing is finished.\n    // Asynchronous processing is perfectly ok\n    if (fn) {\n        fn.call(this, cls, data);\n    }\n});\n</code></pre>\n","properties":[{"tagname":"params","type":"Function","name":"cls","doc":"<p>The created class</p>\n","html_type":"<a href=\"#!/api/Function\" rel=\"Function\" class=\"docClass\">Function</a>"},{"tagname":"params","type":"Object","name":"data","doc":"<p>The set of properties passed in <a href=\"#!/api/Ext.Class\" rel=\"Ext.Class\" class=\"docClass\">Ext.Class</a> constructor</p>\n","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"},{"tagname":"params","type":"Function","name":"fn","doc":"<p>The callback function that <strong>must</strong> to be executed when this\npre-processor finishes, regardless of whether the processing is synchronous or\nasynchronous.</p>\n","html_type":"<a href=\"#!/api/Function\" rel=\"Function\" class=\"docClass\">Function</a>"}],"html_type":"<a href=\"#!/api/Function\" rel=\"Function\" class=\"docClass\">Function</a>"},{"tagname":"params","name":"properties","doc":"\n","type":"Object","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"},{"tagname":"params","name":"position","doc":"\n","type":"Object","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"},{"tagname":"params","name":"relativeTo","doc":"\n","type":"Object","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"}],"return":{"type":"Ext.Class","name":"return","doc":"<p>this</p>\n","properties":null,"html_type":"<a href=\"#!/api/Ext.Class\" rel=\"Ext.Class\" class=\"docClass\">Ext.Class</a>"},"private":true,"static":true,"inheritdoc":null,"inheritable":null,"linenr":null,"chainable":true,"fires":null,"method_calls":["setDefaultPreprocessorPosition"],"id":"static-method-registerPreprocessor","owner":"Ext.Class","short_doc":"Register a new pre-processor to be used during the class creation process ..."},{"tagname":"method","name":"setDefaultPreprocessorPosition","autodetected":{"inheritdoc":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/class/Class.js","linenr":300}],"doc":"<p>Insert this pre-processor at a specific position in the stack, optionally relative to\nany existing pre-processor. For example:</p>\n\n<pre><code><a href=\"#!/api/Ext.Class-static-method-registerPreprocessor\" rel=\"Ext.Class-static-method-registerPreprocessor\" class=\"docClass\">Ext.Class.registerPreprocessor</a>('debug', function(cls, data, fn) {\n    // Your code here\n\n    if (fn) {\n        fn.call(this, cls, data);\n    }\n}).setDefaultPreprocessorPosition('debug', 'last');\n</code></pre>\n","private":true,"params":[{"tagname":"params","type":"String","name":"name","doc":"<p>The pre-processor name. Note that it needs to be registered with\n<a href=\"#!/api/Ext.Class-static-method-registerPreprocessor\" rel=\"Ext.Class-static-method-registerPreprocessor\" class=\"docClass\">registerPreprocessor</a> before this</p>\n","html_type":"<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>"},{"tagname":"params","type":"String","name":"offset","doc":"<p>The insertion position. Four possible values are:\n'first', 'last', or: 'before', 'after' (relative to the name provided in the third\nargument)</p>\n","html_type":"<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>"},{"tagname":"params","type":"String","name":"relativeName","doc":"\n","html_type":"<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>"}],"return":{"type":"Ext.Class","name":"return","doc":"<p>this</p>\n","properties":null,"html_type":"<a href=\"#!/api/Ext.Class\" rel=\"Ext.Class\" class=\"docClass\">Ext.Class</a>"},"static":true,"inheritdoc":null,"inheritable":null,"linenr":null,"chainable":true,"fires":null,"method_calls":null,"id":"static-method-setDefaultPreprocessorPosition","owner":"Ext.Class","short_doc":"Insert this pre-processor at a specific position in the stack, optionally relative to\nany existing pre-processor. ..."},{"tagname":"method","name":"setDefaultPreprocessors","autodetected":{"inheritdoc":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/class/Class.js","linenr":286}],"doc":"<p>Set the default array stack of default pre-processors</p>\n","private":true,"params":[{"tagname":"params","type":"Array","name":"preprocessors","doc":"\n","html_type":"<a href=\"#!/api/Array\" rel=\"Array\" class=\"docClass\">Array</a>"}],"return":{"type":"Ext.Class","name":"return","doc":"<p>this</p>\n","properties":null,"html_type":"<a href=\"#!/api/Ext.Class\" rel=\"Ext.Class\" class=\"docClass\">Ext.Class</a>"},"static":true,"inheritdoc":null,"inheritable":null,"linenr":null,"chainable":true,"fires":null,"method_calls":null,"id":"static-method-setDefaultPreprocessors","owner":"Ext.Class","short_doc":"Set the default array stack of default pre-processors ..."}],"alternateClassNames":[],"aliases":{},"id":"class-Ext.Class","short_doc":"This is a low level factory that is used by Ext.define and should not be used\ndirectly in application code. ..."}