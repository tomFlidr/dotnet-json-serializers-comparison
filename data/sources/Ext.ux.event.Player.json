{"tagname":"class","name":"Ext.ux.event.Player","autodetected":{"aliases":true,"alternateClassNames":true,"mixins":true,"requires":true,"uses":true,"members":true,"code_type":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-ux/event/Player.js","linenr":1}],"doc":"<p>This class manages the playback of an array of \"event descriptors\". For details on the\ncontents of an \"event descriptor\", see <a href=\"#!/api/Ext.ux.event.Recorder\" rel=\"Ext.ux.event.Recorder\" class=\"docClass\">Ext.ux.event.Recorder</a>. The events recorded by the\n<a href=\"#!/api/Ext.ux.event.Recorder\" rel=\"Ext.ux.event.Recorder\" class=\"docClass\">Ext.ux.event.Recorder</a> class are designed to serve as input for this class.</p>\n\n<p>The simplest use of this class is to instantiate it with an <a href=\"#!/api/Ext.ux.event.Player-cfg-eventQueue\" rel=\"Ext.ux.event.Player-cfg-eventQueue\" class=\"docClass\">eventQueue</a> and call\n<a href=\"#!/api/Ext.ux.event.Player-method-start\" rel=\"Ext.ux.event.Player-method-start\" class=\"docClass\">start</a>. Like so:</p>\n\n<pre><code> var player = Ext.create('<a href=\"#!/api/Ext.ux.event.Player\" rel=\"Ext.ux.event.Player\" class=\"docClass\">Ext.ux.event.Player</a>', {\n     eventQueue: [ ... ],\n     speed: 2,  // play at 2x speed\n     listeners: {\n         stop: function() {\n             player = null; // all done\n         }\n     }\n });\n\n player.start();\n</code></pre>\n\n<p>A more complex use would be to incorporate keyframe generation after playing certain\nevents.</p>\n\n<pre><code> var player = Ext.create('<a href=\"#!/api/Ext.ux.event.Player\" rel=\"Ext.ux.event.Player\" class=\"docClass\">Ext.ux.event.Player</a>', {\n     eventQueue: [ ... ],\n     keyFrameEvents: {\n         click: true\n     },\n     listeners: {\n         stop: function() {\n             // play has completed... probably time for another keyframe...\n             player = null;\n         },\n         keyframe: onKeyFrame\n     }\n });\n\n player.start();\n</code></pre>\n\n<p>If a keyframe can be handled immediately (synchronously), the listener would be:</p>\n\n<pre><code> function onKeyFrame () {\n     handleKeyFrame();\n }\n</code></pre>\n\n<p> If the keyframe event is always handled asynchronously, then the event listener is only\n a bit more:</p>\n\n<pre><code> function onKeyFrame (p, eventDescriptor) {\n     eventDescriptor.defer(); // pause event playback...\n\n     handleKeyFrame(function() {\n         eventDescriptor.finish(); // ...resume event playback\n     });\n }\n</code></pre>\n\n<p>Finally, if the keyframe could be either handled synchronously or asynchronously (perhaps\ndifferently by browser), a slightly more complex listener is required.</p>\n\n<pre><code> function onKeyFrame (p, eventDescriptor) {\n     var async;\n\n     handleKeyFrame(function() {\n         // either this callback is being called immediately by handleKeyFrame (in\n         // which case async is undefined) or it is being called later (in which case\n         // async will be true).\n\n         if (async) {\n             eventDescriptor.finish();\n         }\n         else {\n             async = false;\n         }\n     });\n\n     // either the callback was called (and async is now false) or it was not\n     // called (and async remains undefined).\n\n     if (async !== false) {\n         eventDescriptor.defer();\n         async = true; // let the callback know that we have gone async\n     }\n }\n</code></pre>\n","extends":"Ext.ux.event.Driver","aliases":{},"alternateClassNames":[],"mixins":[],"requires":[],"uses":[],"members":[{"tagname":"cfg","name":"eventQueue","autodetected":{},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-ux/event/Player.js","linenr":179}],"doc":"<p>The event queue to playback. This must be provided before\nthe <a href=\"#!/api/Ext.ux.event.Player-method-start\" rel=\"Ext.ux.event.Player-method-start\" class=\"docClass\">start</a> method is called.</p>\n","type":"Array","default":null,"properties":null,"id":"cfg-eventQueue","owner":"Ext.ux.event.Player","short_doc":"The event queue to playback. ...","html_type":"Array"},{"tagname":"cfg","name":"keyFrameEvents","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"default":true,"accessor":true,"evented":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-ux/event/Player.js","linenr":184}],"doc":"<p>An object that describes the events that should generate\nkeyframe events. For example, <code>{ click: true }</code> would generate keyframe events after\neach <code>click</code> event.</p>\n","type":"Object","default":"{click: true}","properties":null,"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"accessor":null,"evented":null,"id":"cfg-keyFrameEvents","owner":"Ext.ux.event.Player","short_doc":"An object that describes the events that should generate\nkeyframe events. ...","html_type":"Object"},{"tagname":"cfg","name":"pauseForAnimations","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"default":true,"accessor":true,"evented":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-ux/event/Player.js","linenr":193}],"doc":"<p>True to pause event playback during animations, false\nto ignore animations. Default is true.</p>\n","type":"Boolean","default":"true","properties":null,"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"accessor":null,"evented":null,"id":"cfg-pauseForAnimations","owner":"Ext.ux.event.Player","short_doc":"True to pause event playback during animations, false\nto ignore animations. ...","html_type":"Boolean"},{"tagname":"cfg","name":"speed","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"default":true,"accessor":true,"evented":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-ux/event/Player.js","linenr":199}],"doc":"<p>The playback speed multiplier. Default is 1.0 (to playback at the\nrecorded speed). A value of 2 would playback at 2x speed.</p>\n","type":"Number","default":"1.0","properties":null,"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"accessor":null,"evented":null,"id":"cfg-speed","owner":"Ext.ux.event.Player","short_doc":"The playback speed multiplier. ...","html_type":"Number"},{"tagname":"property","name":"active","autodetected":{"tagname":"property","inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"type":true,"default":true,"readonly":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-ux/event/Driver.js","linenr":7}],"doc":"\n","inheritdoc":null,"static":null,"private":true,"inheritable":null,"linenr":7,"type":"Object","default":null,"readonly":null,"id":"property-active","owner":"Ext.ux.event.Driver","html_type":"Object"},{"tagname":"property","name":"specialKeysByCode","autodetected":{"tagname":"property","inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"type":true,"default":true,"readonly":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-ux/event/Driver.js","linenr":20}],"doc":"\n","inheritdoc":null,"static":null,"private":true,"inheritable":null,"linenr":20,"type":"Object","default":"{}","readonly":null,"id":"property-specialKeysByCode","owner":"Ext.ux.event.Driver","short_doc":" ...","html_type":"Object"},{"tagname":"property","name":"specialKeysByName","autodetected":{"tagname":"property","inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"type":true,"default":true,"readonly":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-ux/event/Driver.js","linenr":9}],"doc":"\n","inheritdoc":null,"static":null,"private":true,"inheritable":null,"linenr":9,"type":"Object","default":"{PGUP: 33, PGDN: 34, END: 35, HOME: 36, LEFT: 37, UP: 38, RIGHT: 39, DOWN: 40}","readonly":null,"id":"property-specialKeysByName","owner":"Ext.ux.event.Driver","short_doc":" ...","html_type":"Object"},{"tagname":"method","name":"getElementFromXPath","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-ux/event/Player.js","linenr":248}],"doc":"<p>Returns the element given is XPath-like description.</p>\n","params":[{"tagname":"params","type":"String","name":"xpath","doc":"<p>The XPath-like description of the element.</p>\n","html_type":"String"}],"return":{"type":"HTMLElement","name":"return","doc":"\n","properties":null,"html_type":"HTMLElement"},"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"method-getElementFromXPath","owner":"Ext.ux.event.Player","short_doc":"Returns the element given is XPath-like description. ..."},{"tagname":"method","name":"getTime","autodetected":{"tagname":"method","inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"params":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-ux/event/Driver.js","linenr":56}],"doc":"\n","inheritdoc":null,"static":null,"private":true,"inheritable":null,"linenr":56,"params":[],"chainable":false,"fires":null,"method_calls":null,"id":"method-getTime","owner":"Ext.ux.event.Driver","short_doc":" ..."},{"tagname":"method","name":"getTimestamp","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"params":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-ux/event/Driver.js","linenr":60}],"doc":"<p>Returns the number of milliseconds since start was called.</p>\n","inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"params":[],"chainable":false,"fires":[],"method_calls":["getTime"],"id":"method-getTimestamp","owner":"Ext.ux.event.Driver","short_doc":"Returns the number of milliseconds since start was called. ..."},{"tagname":"method","name":"injectEvent","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-ux/event/Player.js","linenr":480}],"doc":"<p>Called to inject the given event on the specified target.</p>\n","params":[{"tagname":"params","type":"HTMLElement","name":"target","doc":"<p>The target of the event.</p>\n","html_type":"HTMLElement"},{"tagname":"params","type":"Object","name":"event","doc":"<p>The event to inject. The properties of this object should be\nthose of standard DOM events but vary based on the <code>type</code> property. For details on\nevent types and their properties, see the class documentation.</p>\n","html_type":"Object"}],"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":[],"method_calls":["injectEvent","injectTypeEvent","injectTypeInputEvent"],"id":"method-injectEvent","owner":"Ext.ux.event.Player","short_doc":"Called to inject the given event on the specified target. ..."},{"tagname":"method","name":"injectKeyEvent","autodetected":{"inheritdoc":true,"static":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-ux/event/Player.js","linenr":783}],"doc":"<p>Injects a key event using the given event information to populate the event\nobject.</p>\n\n<p><strong>Note:</strong> <code>keydown</code> causes Safari 2.x to crash.</p>\n","params":[{"tagname":"params","type":"HTMLElement","name":"target","doc":"<p>The target of the given event.</p>\n","html_type":"HTMLElement"},{"tagname":"params","type":"Object","name":"options","doc":"<p>Object object containing all of the event injection\noptions.</p>\n","properties":[{"tagname":"params","type":"String","name":"type","doc":"<p>The type of event to fire. This can be any one of\nthe following: <code>keyup</code>, <code>keydown</code> and <code>keypress</code>.</p>\n","html_type":"String"},{"tagname":"params","type":"Boolean","name":"bubbles","default":"true","optional":true,"doc":"<p><code>tru</code> if the event can be bubbled up.\nDOM Level 3 specifies that all key events bubble by default.</p>\n","html_type":"Boolean"},{"tagname":"params","type":"Boolean","name":"cancelable","default":"true","optional":true,"doc":"<p><code>true</code> if the event can be canceled\nusing <code>preventDefault</code>. DOM Level 3 specifies that all key events can be\ncancelled.</p>\n","html_type":"Boolean"},{"tagname":"params","type":"Boolean","name":"ctrlKey","default":"false","optional":true,"doc":"<p><code>true</code> if one of the CTRL keys is\npressed while the event is firing.</p>\n","html_type":"Boolean"},{"tagname":"params","type":"Boolean","name":"altKey","default":"false","optional":true,"doc":"<p><code>true</code> if one of the ALT keys is\npressed while the event is firing.</p>\n","html_type":"Boolean"},{"tagname":"params","type":"Boolean","name":"shiftKey","default":"false","optional":true,"doc":"<p><code>true</code> if one of the SHIFT keys is\npressed while the event is firing.</p>\n","html_type":"Boolean"},{"tagname":"params","type":"Boolean","name":"metaKey","default":"false","optional":true,"doc":"<p><code>true</code> if one of the META keys is\npressed while the event is firing.</p>\n","html_type":"Boolean"},{"tagname":"params","type":"Number","name":"keyCode","default":"0","optional":true,"doc":"<p>The code for the key that is in use.</p>\n","html_type":"Number"},{"tagname":"params","type":"Number","name":"charCode","default":"0","optional":true,"doc":"<p>The Unicode code for the character\nassociated with the key being used.</p>\n","html_type":"Number"}],"html_type":"Object"},{"tagname":"params","type":"Window","name":"view","default":"window","optional":true,"doc":"<p>The view containing the target. This is typically\nthe window object.</p>\n","html_type":"Window"}],"private":true,"inheritdoc":null,"static":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"method-injectKeyEvent","owner":"Ext.ux.event.Player","short_doc":"Injects a key event using the given event information to populate the event\nobject. ..."},{"tagname":"method","name":"injectMouseEvent","autodetected":{"inheritdoc":true,"static":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-ux/event/Player.js","linenr":904}],"doc":"<p>Injects a mouse event using the given event information to populate the event\nobject.</p>\n","params":[{"tagname":"params","type":"HTMLElement","name":"target","doc":"<p>The target of the given event.</p>\n","html_type":"HTMLElement"},{"tagname":"params","type":"Object","name":"options","doc":"<p>Object object containing all of the event injection\noptions.</p>\n","properties":[{"tagname":"params","type":"String","name":"type","doc":"<p>The type of event to fire. This can be any one of\nthe following: <code>click</code>, <code>dblclick</code>, <code>mousedown</code>, <code>mouseup</code>, <code>mouseout</code>,\n<code>mouseover</code> and <code>mousemove</code>.</p>\n","html_type":"String"},{"tagname":"params","type":"Boolean","name":"bubbles","default":"true","optional":true,"doc":"<p><code>tru</code> if the event can be bubbled up.\nDOM Level 2 specifies that all mouse events bubble by default.</p>\n","html_type":"Boolean"},{"tagname":"params","type":"Boolean","name":"cancelable","default":"true","optional":true,"doc":"<p><code>true</code> if the event can be canceled\nusing <code>preventDefault</code>. DOM Level 2 specifies that all mouse events except\n<code>mousemove</code> can be cancelled. This defaults to <code>false</code> for <code>mousemove</code>.</p>\n","html_type":"Boolean"},{"tagname":"params","type":"Boolean","name":"ctrlKey","default":"false","optional":true,"doc":"<p><code>true</code> if one of the CTRL keys is\npressed while the event is firing.</p>\n","html_type":"Boolean"},{"tagname":"params","type":"Boolean","name":"altKey","default":"false","optional":true,"doc":"<p><code>true</code> if one of the ALT keys is\npressed while the event is firing.</p>\n","html_type":"Boolean"},{"tagname":"params","type":"Boolean","name":"shiftKey","default":"false","optional":true,"doc":"<p><code>true</code> if one of the SHIFT keys is\npressed while the event is firing.</p>\n","html_type":"Boolean"},{"tagname":"params","type":"Boolean","name":"metaKey","default":"false","optional":true,"doc":"<p><code>true</code> if one of the META keys is\npressed while the event is firing.</p>\n","html_type":"Boolean"},{"tagname":"params","type":"Number","name":"detail","default":"1","optional":true,"doc":"<p>The number of times the mouse button has\nbeen used.</p>\n","html_type":"Number"},{"tagname":"params","type":"Number","name":"screenX","default":"0","optional":true,"doc":"<p>The x-coordinate on the screen at which point\nthe event occurred.</p>\n","html_type":"Number"},{"tagname":"params","type":"Number","name":"screenY","default":"0","optional":true,"doc":"<p>The y-coordinate on the screen at which point\nthe event occurred.</p>\n","html_type":"Number"},{"tagname":"params","type":"Number","name":"clientX","default":"0","optional":true,"doc":"<p>The x-coordinate on the client at which point\nthe event occurred.</p>\n","html_type":"Number"},{"tagname":"params","type":"Number","name":"clientY","default":"0","optional":true,"doc":"<p>The y-coordinate on the client at which point\nthe event occurred.</p>\n","html_type":"Number"},{"tagname":"params","type":"Number","name":"button","default":"0","optional":true,"doc":"<p>The button being pressed while the event is\nexecuting. The value should be 0 for the primary mouse button (typically the\nleft button), 1 for the tertiary mouse button (typically the middle button),\nand 2 for the secondary mouse button (typically the right button).</p>\n","html_type":"Number"},{"tagname":"params","type":"HTMLElement","name":"relatedTarget","default":"null","optional":true,"doc":"<p>For <code>mouseout</code> events, this\nis the element that the mouse has moved to. For <code>mouseover</code> events, this is\nthe element that the mouse has moved from. This argument is ignored for all\nother events.</p>\n","html_type":"HTMLElement"}],"html_type":"Object"},{"tagname":"params","type":"Window","name":"view","default":"window","optional":true,"doc":"<p>The view containing the target. This is typically\nthe window object.</p>\n","html_type":"Window"}],"private":true,"inheritdoc":null,"static":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"method-injectMouseEvent","owner":"Ext.ux.event.Player","short_doc":"Injects a mouse event using the given event information to populate the event\nobject. ..."},{"tagname":"method","name":"injectUIEvent","autodetected":{"inheritdoc":true,"static":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-ux/event/Player.js","linenr":1041}],"doc":"<p>Injects a UI event using the given event information to populate the event\nobject.</p>\n","params":[{"tagname":"params","type":"HTMLElement","name":"target","doc":"<p>The target of the given event.</p>\n","html_type":"HTMLElement"},{"tagname":"params","type":"Object","name":"options","doc":"\n","properties":[{"tagname":"params","type":"String","name":"type","doc":"<p>The type of event to fire. This can be any one of\nthe following: <code>click</code>, <code>dblclick</code>, <code>mousedown</code>, <code>mouseup</code>, <code>mouseout</code>,\n<code>mouseover</code> and <code>mousemove</code>.</p>\n","html_type":"String"},{"tagname":"params","type":"Boolean","name":"bubbles","default":"true","optional":true,"doc":"<p><code>tru</code> if the event can be bubbled up.\nDOM Level 2 specifies that all mouse events bubble by default.</p>\n","html_type":"Boolean"},{"tagname":"params","type":"Boolean","name":"cancelable","default":"true","optional":true,"doc":"<p><code>true</code> if the event can be canceled\nusing <code>preventDefault</code>. DOM Level 2 specifies that all mouse events except\n<code>mousemove</code> can be canceled. This defaults to <code>false</code> for <code>mousemove</code>.</p>\n","html_type":"Boolean"},{"tagname":"params","type":"Number","name":"detail","default":"1","optional":true,"doc":"<p>The number of times the mouse button has been\nused.</p>\n","html_type":"Number"}],"html_type":"Object"},{"tagname":"params","type":"Window","name":"view","default":"window","optional":true,"doc":"<p>The view containing the target. This is typically\nthe window object.</p>\n","html_type":"Window"}],"private":true,"inheritdoc":null,"static":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"method-injectUIEvent","owner":"Ext.ux.event.Player","short_doc":"Injects a UI event using the given event information to populate the event\nobject. ..."},{"tagname":"method","name":"nextEvent","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-ux/event/Player.js","linenr":354}],"doc":"<p>This method is called after an event has been played to prepare for the next event.</p>\n","params":[{"tagname":"params","type":"Object","name":"eventDescriptor","doc":"<p>The descriptor of the event just played.</p>\n","html_type":"Object"}],"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"method-nextEvent","owner":"Ext.ux.event.Player","short_doc":"This method is called after an event has been played to prepare for the next event. ..."},{"tagname":"method","name":"onStart","autodetected":{"tagname":"method","inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"params":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-ux/event/Driver.js","linenr":69}],"doc":"\n","inheritdoc":null,"static":null,"private":true,"inheritable":null,"linenr":69,"params":[],"chainable":false,"fires":null,"method_calls":null,"id":"method-onStart","owner":"Ext.ux.event.Driver","short_doc":" ..."},{"tagname":"method","name":"onStop","autodetected":{"tagname":"method","inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"params":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-ux/event/Driver.js","linenr":71}],"doc":"\n","inheritdoc":null,"static":null,"private":true,"inheritable":null,"linenr":71,"params":[],"chainable":false,"fires":null,"method_calls":null,"id":"method-onStop","owner":"Ext.ux.event.Driver","short_doc":" ..."},{"tagname":"method","name":"peekEvent","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"params":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-ux/event/Player.js","linenr":370}],"doc":"<p>This method returns the event descriptor at the front of the queue. This does not\ndequeue the event. Repeated calls return the same object (until <a href=\"#!/api/Ext.ux.event.Player-method-nextEvent\" rel=\"Ext.ux.event.Player-method-nextEvent\" class=\"docClass\">nextEvent</a>\nis called).</p>\n","inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"params":[],"chainable":false,"fires":null,"method_calls":null,"id":"method-peekEvent","owner":"Ext.ux.event.Player","short_doc":"This method returns the event descriptor at the front of the queue. ..."},{"tagname":"method","name":"processEvents","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"params":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-ux/event/Player.js","linenr":425}],"doc":"<p>This method dequeues and injects events until it has arrived at the time index. If\nno events are ready (based on the time index), this method does nothing.</p>\n","return":{"type":"Boolean","name":"return","doc":"<p>True if there is more to do; false if not (at least for now).</p>\n","properties":null,"html_type":"Boolean"},"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"params":[],"chainable":false,"fires":["<a href=\"#!/api/Ext.ux.event.Player-event-beforeplay\" rel=\"Ext.ux.event.Player-event-beforeplay\" class=\"docClass\">beforeplay</a>","<a href=\"#!/api/Ext.ux.event.Player-event-keyframe\" rel=\"Ext.ux.event.Player-event-keyframe\" class=\"docClass\">keyframe</a>","<a href=\"#!/api/Ext.ux.event.Player-event-stop\" rel=\"Ext.ux.event.Player-event-stop\" class=\"docClass\">stop</a>"],"method_calls":["fireEvent","getTimeIndex","nextEvent","peekEvent","playEvent","processKeyFrame","stop"],"id":"method-processEvents","owner":"Ext.ux.event.Player","short_doc":"This method dequeues and injects events until it has arrived at the time index. ..."},{"tagname":"method","name":"processKeyFrame","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-ux/event/Player.js","linenr":462}],"doc":"<p>This method is called when a keyframe is reached. This will fire the keyframe event.\nIf the keyframe has been handled, true is returned. Otherwise, false is returned.</p>\n","params":[{"tagname":"params","type":"Object","name":"eventDescriptor","doc":"<p>The event descriptor of the keyframe.</p>\n","html_type":"Object"}],"return":{"type":"Boolean","name":"return","doc":"<p>True if the keyframe was handled, false if not.</p>\n","properties":null,"html_type":"Boolean"},"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":["<a href=\"#!/api/Ext.ux.event.Player-event-keyframe\" rel=\"Ext.ux.event.Player-event-keyframe\" class=\"docClass\">keyframe</a>"],"method_calls":["fireEvent","makeToken"],"id":"method-processKeyFrame","owner":"Ext.ux.event.Player","short_doc":"This method is called when a keyframe is reached. ..."},{"tagname":"method","name":"replaceEvent","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-ux/event/Player.js","linenr":379}],"doc":"<p>Replaces an event in the queue with an array of events. This is often used to roll\nup a multi-step pseudo-event and expand it just-in-time to be played. The process\nfor doing this in a derived class would be this:</p>\n\n<pre><code> Ext.define('My.Player', {\n     extend: '<a href=\"#!/api/Ext.ux.event.Player\" rel=\"Ext.ux.event.Player\" class=\"docClass\">Ext.ux.event.Player</a>',\n\n     peekEvent: function() {\n         var event = this.callParent();\n\n         if (event.multiStepSpecial) {\n             this.replaceEvent(null, [\n                 ... expand to actual events\n             ]);\n\n             event = this.callParent(); // get the new next event\n         }\n\n         return event;\n     }\n });\n</code></pre>\n\n<p>This method ensures that the <code>beforeplay</code> hook (if any) from the replaced event is\nplaced on the first new event and the <code>afterplay</code> hook (if any) is placed on the\nlast new event.</p>\n","params":[{"tagname":"params","type":"Number","name":"index","doc":"<p>The queue index to replace. Pass <code>null</code> to replace the event\nat the current <code>queueIndex</code>.</p>\n","html_type":"Number"},{"tagname":"params","type":"Event[]","name":"events","doc":"<p>The array of events with which to replace the specified\nevent.</p>\n","html_type":"Event[]"}],"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"method-replaceEvent","owner":"Ext.ux.event.Player","short_doc":"Replaces an event in the queue with an array of events. ..."},{"tagname":"method","name":"start","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"params":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-ux/event/Driver.js","linenr":73}],"doc":"<p>Starts this object. If this object is already started, nothing happens.</p>\n","inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"params":[],"chainable":false,"fires":["<a href=\"#!/api/Ext.ux.event.Driver-event-start\" rel=\"Ext.ux.event.Driver-event-start\" class=\"docClass\">start</a>"],"method_calls":["fireEvent","getTime","onStart"],"id":"method-start","owner":"Ext.ux.event.Driver","short_doc":"Starts this object. ..."},{"tagname":"method","name":"stop","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"params":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-ux/event/Driver.js","linenr":87}],"doc":"<p>Stops this object. If this object is not started, nothing happens.</p>\n","inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"params":[],"chainable":false,"fires":["<a href=\"#!/api/Ext.ux.event.Driver-event-stop\" rel=\"Ext.ux.event.Driver-event-stop\" class=\"docClass\">stop</a>"],"method_calls":["fireEvent","onStop"],"id":"method-stop","owner":"Ext.ux.event.Driver","short_doc":"Stops this object. ..."},{"tagname":"event","name":"beforeplay","autodetected":{},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-ux/event/Player.js","linenr":219}],"doc":"<p>Fires before an event is played.</p>\n","params":[{"tagname":"params","type":"Ext.ux.event.Player","name":"this","doc":"\n","html_type":"<a href=\"#!/api/Ext.ux.event.Player\" rel=\"Ext.ux.event.Player\" class=\"docClass\">Ext.ux.event.Player</a>"},{"tagname":"params","type":"Object","name":"eventDescriptor","doc":"<p>The event descriptor about to be played.</p>\n","html_type":"Object"},{"tagname":"params","name":"eOpts","type":"Object","doc":"<p>The options object passed to Ext.util.Observable.addListener.</p>\n\n\n\n","ext4_auto_param":true,"html_type":"Object"}],"id":"event-beforeplay","owner":"Ext.ux.event.Player","short_doc":"Fires before an event is played. ..."},{"tagname":"event","name":"keyframe","autodetected":{},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-ux/event/Player.js","linenr":226}],"doc":"<p>Fires when this player reaches a keyframe. Typically, this is after events\nlike <code>click</code> are injected and any resulting animations have been completed.</p>\n","params":[{"tagname":"params","type":"Ext.ux.event.Player","name":"this","doc":"\n","html_type":"<a href=\"#!/api/Ext.ux.event.Player\" rel=\"Ext.ux.event.Player\" class=\"docClass\">Ext.ux.event.Player</a>"},{"tagname":"params","type":"Object","name":"eventDescriptor","doc":"<p>The keyframe event descriptor.</p>\n","html_type":"Object"},{"tagname":"params","name":"eOpts","type":"Object","doc":"<p>The options object passed to Ext.util.Observable.addListener.</p>\n\n\n\n","ext4_auto_param":true,"html_type":"Object"}],"id":"event-keyframe","owner":"Ext.ux.event.Player","short_doc":"Fires when this player reaches a keyframe. ..."},{"tagname":"event","name":"start","autodetected":{},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-ux/event/Driver.js","linenr":23}],"doc":"<p>Fires when this object is started.</p>\n","params":[{"tagname":"params","type":"Ext.ux.event.Driver","name":"this","doc":"\n","html_type":"<a href=\"#!/api/Ext.ux.event.Driver\" rel=\"Ext.ux.event.Driver\" class=\"docClass\">Ext.ux.event.Driver</a>"},{"tagname":"params","name":"eOpts","type":"Object","doc":"<p>The options object passed to Ext.util.Observable.addListener.</p>\n\n\n\n","ext4_auto_param":true,"html_type":"Object"}],"id":"event-start","owner":"Ext.ux.event.Driver","short_doc":"Fires when this object is started. ..."},{"tagname":"event","name":"stop","autodetected":{},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-ux/event/Driver.js","linenr":29}],"doc":"<p>Fires when this object is stopped.</p>\n","params":[{"tagname":"params","type":"Ext.ux.event.Driver","name":"this","doc":"\n","html_type":"<a href=\"#!/api/Ext.ux.event.Driver\" rel=\"Ext.ux.event.Driver\" class=\"docClass\">Ext.ux.event.Driver</a>"},{"tagname":"params","name":"eOpts","type":"Object","doc":"<p>The options object passed to Ext.util.Observable.addListener.</p>\n\n\n\n","ext4_auto_param":true,"html_type":"Object"}],"id":"event-stop","owner":"Ext.ux.event.Driver","short_doc":"Fires when this object is stopped. ..."}],"code_type":"ext_define","id":"class-Ext.ux.event.Player","short_doc":"This class manages the playback of an array of \"event descriptors\". ..."}