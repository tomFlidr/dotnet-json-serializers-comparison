{"tagname":"class","name":"Ext.util.DelayedTask","autodetected":{},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/util/DelayedTask.js","linenr":2}],"doc":"<p>The DelayedTask class provides a convenient way to \"buffer\" the execution of a method,\nperforming setTimeout where a new timeout cancels the old timeout. When called, the\ntask will wait the specified time period before executing. If durng that time period,\nthe task is called again, the original call will be cancelled. This continues so that\nthe function is only called a single time for each iteration.</p>\n\n<p>This method is especially useful for things like detecting whether a user has finished\ntyping in a text field. An example would be performing validation on a keypress. You can\nuse this class to buffer the keypress events for a certain number of milliseconds, and\nperform only if they stop for that amount of time.</p>\n\n<h2>Usage</h2>\n\n<pre><code>var task = new <a href=\"#!/api/Ext.util.DelayedTask\" rel=\"Ext.util.DelayedTask\" class=\"docClass\">Ext.util.DelayedTask</a>(function(){\n    alert(<a href=\"#!/api/Ext-method-getDom\" rel=\"Ext-method-getDom\" class=\"docClass\">Ext.getDom</a>('myInputField').value.length);\n});\n\n// Wait 500ms before calling our function. If the user presses another key\n// during that 500ms, it will be cancelled and we'll wait another 500ms.\n<a href=\"#!/api/Ext-method-get\" rel=\"Ext-method-get\" class=\"docClass\">Ext.get</a>('myInputField').on('keypress', function() {\n    task.delay(500);\n});\n</code></pre>\n\n<p>Note that we are using a DelayedTask here to illustrate a point. The configuration\noption <code>buffer</code> for <a href=\"#!/api/Ext.util.Observable-method-addListener\" rel=\"Ext.util.Observable-method-addListener\" class=\"docClass\">addListener/on</a> will\nalso setup a delayed task for you to buffer events.</p>\n","members":[{"tagname":"property","name":"id","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"default":true,"readonly":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/util/DelayedTask.js","linenr":77}],"doc":"<p>The id of the currently pending invocation.  Will be set to <code>null</code> if there is no\ninvocation pending.</p>\n","type":"Number","default":null,"properties":null,"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"readonly":null,"id":"property-id","owner":"Ext.util.DelayedTask","short_doc":"The id of the currently pending invocation. ...","html_type":"<a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a>"},{"tagname":"method","name":"constructor","autodetected":{},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/util/DelayedTask.js","linenr":2}],"doc":"<p>The parameters to this constructor serve as defaults and are not required.</p>\n","params":[{"tagname":"params","type":"Function","name":"fn","optional":true,"doc":"<p>The default function to call. If not specified here, it must be\nspecified during the <a href=\"#!/api/Ext.util.DelayedTask-method-delay\" rel=\"Ext.util.DelayedTask-method-delay\" class=\"docClass\">delay</a> call.</p>\n","html_type":"<a href=\"#!/api/Function\" rel=\"Function\" class=\"docClass\">Function</a>"},{"tagname":"params","type":"Object","name":"scope","optional":true,"doc":"<p>The default scope (The <strong><code>this</code></strong> reference) in which the\nfunction is called. If not specified, <code>this</code> will refer to the browser window.</p>\n","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"},{"tagname":"params","type":"Array","name":"args","optional":true,"doc":"<p>The default Array of arguments.</p>\n","html_type":"<a href=\"#!/api/Array\" rel=\"Array\" class=\"docClass\">Array</a>"},{"tagname":"params","type":"Boolean","name":"cancelOnDelay","default":"true","optional":true,"doc":"<p>By default, each call to <a href=\"#!/api/Ext.util.DelayedTask-method-delay\" rel=\"Ext.util.DelayedTask-method-delay\" class=\"docClass\">delay</a> cancels\nany pending invocation and reschedules a new invocation. Specifying this as <code>false</code> means\nthat calls to <a href=\"#!/api/Ext.util.DelayedTask-method-delay\" rel=\"Ext.util.DelayedTask-method-delay\" class=\"docClass\">delay</a> when an invocation is pending just update the call settings,\n<code>newDelay</code>, <code>newFn</code>, <code>newScope</code> or <code>newArgs</code>, whichever are passed.</p>\n","html_type":"<a href=\"#!/api/Boolean\" rel=\"Boolean\" class=\"docClass\">Boolean</a>"}],"id":"method-constructor","owner":"Ext.util.DelayedTask","return":{"type":"Ext.util.DelayedTask","doc":"\n","html_type":"<a href=\"#!/api/Ext.util.DelayedTask\" rel=\"Ext.util.DelayedTask\" class=\"docClass\">Ext.util.DelayedTask</a>"},"short_doc":"The parameters to this constructor serve as defaults and are not required. ..."},{"tagname":"method","name":"cancel","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"params":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/util/DelayedTask.js","linenr":133}],"doc":"<p>Cancel the last queued timeout</p>\n","inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"params":[],"chainable":false,"fires":null,"method_calls":null,"id":"method-cancel","owner":"Ext.util.DelayedTask","short_doc":"Cancel the last queued timeout ..."},{"tagname":"method","name":"delay","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/util/DelayedTask.js","linenr":84}],"doc":"<p>By default, cancels any pending timeout and queues a new one.</p>\n\n<p>If the <code>cancelOnDelay</code> parameter was specified as <code>false</code> in the constructor, this does not\ncancel and reschedule, but just updates the call settings, <code>newDelay</code>, <code>newFn</code>, <code>newScope</code>\nor <code>newArgs</code>, whichever are passed.</p>\n","params":[{"tagname":"params","type":"Number","name":"newDelay","doc":"<p>The milliseconds to delay. <code>-1</code> means schedule for the next\nanimation frame if supported.</p>\n","html_type":"<a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a>"},{"tagname":"params","type":"Function","name":"newFn","optional":true,"doc":"<p>Overrides function passed to constructor</p>\n","html_type":"<a href=\"#!/api/Function\" rel=\"Function\" class=\"docClass\">Function</a>"},{"tagname":"params","type":"Object","name":"newScope","optional":true,"doc":"<p>Overrides scope passed to constructor. Remember that if no scope\nis specified, <code>this</code> will refer to the browser window.</p>\n","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"},{"tagname":"params","type":"Array","name":"newArgs","optional":true,"doc":"<p>Overrides args passed to constructor</p>\n","html_type":"<a href=\"#!/api/Array\" rel=\"Array\" class=\"docClass\">Array</a>"}],"return":{"type":"Number","name":"return","doc":"<p>The timer id being used.</p>\n","properties":null,"html_type":"<a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a>"},"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"method-delay","owner":"Ext.util.DelayedTask","short_doc":"By default, cancels any pending timeout and queues a new one. ..."},{"tagname":"method","name":"stop","autodetected":{"inheritdoc":true,"static":true,"inheritable":true,"linenr":true,"params":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/util/DelayedTask.js","linenr":166}],"doc":"<p>Cancel the timeout if it was set for the specified fn and scope.</p>\n","private":true,"inheritdoc":null,"static":null,"inheritable":null,"linenr":null,"params":[{"name":"stopFn","type":"Object","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"},{"name":"stopScope","type":"Object","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"}],"chainable":false,"fires":null,"method_calls":null,"id":"method-stop","owner":"Ext.util.DelayedTask","short_doc":"Cancel the timeout if it was set for the specified fn and scope. ..."}],"alternateClassNames":[],"aliases":{},"id":"class-Ext.util.DelayedTask","short_doc":"The DelayedTask class provides a convenient way to \"buffer\" the execution of a method,\nperforming setTimeout where a ..."}