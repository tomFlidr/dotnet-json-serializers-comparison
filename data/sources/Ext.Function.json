{"tagname":"class","name":"Ext.Function","autodetected":{},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/lang/Function.js","linenr":1}],"doc":"<p>A collection of useful static methods to deal with function callbacks.</p>\n","singleton":true,"members":[{"tagname":"method","name":"alias","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/lang/Function.js","linenr":278}],"doc":"<p>Create an alias to the provided method property with name <code>methodName</code> of <code>object</code>.\nNote that the execution scope will still be bound to the provided <code>object</code> itself.</p>\n","params":[{"tagname":"params","type":"Object/Function","name":"object","doc":"\n","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>/<a href=\"#!/api/Function\" rel=\"Function\" class=\"docClass\">Function</a>"},{"tagname":"params","type":"String","name":"methodName","doc":"\n","html_type":"<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>"}],"return":{"type":"Function","name":"return","doc":"<p>aliasFn</p>\n","properties":null,"html_type":"<a href=\"#!/api/Function\" rel=\"Function\" class=\"docClass\">Function</a>"},"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"method-alias","owner":"Ext.Function","short_doc":"Create an alias to the provided method property with name methodName of object. ..."},{"tagname":"method","name":"bind","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/lang/Function.js","linenr":153}],"doc":"<p>Create a new function from the provided <code>fn</code>, change <code>this</code> to the provided scope,\noptionally overrides arguments for the call. Defaults to the arguments passed by\nthe caller.</p>\n\n<p><a href=\"#!/api/Ext-method-bind\" rel=\"Ext-method-bind\" class=\"docClass\">Ext.bind</a> is alias for <a href=\"#!/api/Ext.Function-method-bind\" rel=\"Ext.Function-method-bind\" class=\"docClass\">Ext.Function.bind</a></p>\n\n<p><strong>NOTE:</strong> This method is similar to the native <code>bind()</code> method. The major difference\nis in the way the parameters are passed. This method expects an array of parameters,\nand if supplied, it does not automatically pass forward parameters from the bound\nfunction:</p>\n\n<pre><code> function foo (a, b, c) {\n     console.log(a, b, c);\n }\n\n var nativeFn = foo.bind(this, 1, 2);\n var extFn = <a href=\"#!/api/Ext.Function-method-bind\" rel=\"Ext.Function-method-bind\" class=\"docClass\">Ext.Function.bind</a>(foo, this, [1, 2]);\n\n nativeFn(3); // 1, 2, 3\n extFn(3); // 1, 2, undefined\n</code></pre>\n\n<p>This method is unavailable natively on IE8 and IE/Quirks but Ext JS provides a\n\"polyfill\" to emulate the important features of the standard <code>bind</code> method. In\nparticular, the polyfill only provides binding of \"this\" and optional arguments.</p>\n","params":[{"tagname":"params","type":"Function","name":"fn","doc":"<p>The function to delegate.</p>\n\n","html_type":"<a href=\"#!/api/Function\" rel=\"Function\" class=\"docClass\">Function</a>"},{"tagname":"params","type":"Object","name":"scope","optional":true,"doc":"<p>The scope (<code>this</code> reference) in which the function\nis executed.\n<strong>If omitted, defaults to the global environment object (usually the browser <code>window</code>).</strong></p>\n\n","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"},{"tagname":"params","type":"Array","name":"args","optional":true,"doc":"<p>Overrides arguments for the call. (Defaults to\nthe arguments passed by the caller).</p>\n\n","html_type":"<a href=\"#!/api/Array\" rel=\"Array\" class=\"docClass\">Array</a>"},{"tagname":"params","type":"Boolean/Number","name":"appendArgs","optional":true,"doc":"<p>if <code>true</code> the <code>args</code> are appended to the\narguments passed to the returned wrapper (by default these arguments are ignored).\nIf a number then the <code>args</code> are inserted at the specified position.</p>\n\n","html_type":"<a href=\"#!/api/Boolean\" rel=\"Boolean\" class=\"docClass\">Boolean</a>/<a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a>"}],"return":{"type":"Function","name":"return","doc":"<p>The bound wrapper function.</p>\n\n","properties":null,"html_type":"<a href=\"#!/api/Function\" rel=\"Function\" class=\"docClass\">Function</a>"},"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"method-bind","owner":"Ext.Function","short_doc":"Create a new function from the provided fn, change this to the provided scope,\noptionally overrides arguments for the..."},{"tagname":"method","name":"bindCallback","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"params":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/lang/Function.js","linenr":214}],"doc":"<p>Captures the given parameters for a later call to <code><a href=\"#!/api/Ext-method-callback\" rel=\"Ext-method-callback\" class=\"docClass\">Ext.callback</a></code>. This binding is\nmost useful for resolving scopes for example to an <code><a href=\"#!/api/Ext.app.ViewController\" rel=\"Ext.app.ViewController\" class=\"docClass\">Ext.app.ViewController</a></code>.</p>\n\n<p>The arguments match that of <code><a href=\"#!/api/Ext-method-callback\" rel=\"Ext-method-callback\" class=\"docClass\">Ext.callback</a></code> except for the <code>args</code> which, if provided\nto this method, are prepended to any arguments supplied by the eventual caller of\nthe returned function.</p>\n","return":{"type":"Function","name":"return","doc":"<p>A function that, when called, uses <code><a href=\"#!/api/Ext-method-callback\" rel=\"Ext-method-callback\" class=\"docClass\">Ext.callback</a></code> to call the\ncaptured <code>callback</code>.</p>\n","properties":null,"html_type":"<a href=\"#!/api/Function\" rel=\"Function\" class=\"docClass\">Function</a>"},"since":"5.0.0","inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"params":[{"name":"callback","type":"Object","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"},{"name":"scope","type":"Object","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"},{"name":"args","type":"Object","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"},{"name":"delay","type":"Object","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"},{"name":"caller","type":"Object","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"}],"chainable":false,"fires":null,"method_calls":null,"id":"method-bindCallback","owner":"Ext.Function","short_doc":"Captures the given parameters for a later call to Ext.callback. ..."},{"tagname":"method","name":"clone","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/lang/Function.js","linenr":292}],"doc":"<p>Create a \"clone\" of the provided method. The returned method will call the given\nmethod passing along all arguments and the \"this\" pointer and return its result.</p>\n","params":[{"tagname":"params","type":"Function","name":"method","doc":"\n","html_type":"<a href=\"#!/api/Function\" rel=\"Function\" class=\"docClass\">Function</a>"}],"return":{"type":"Function","name":"return","doc":"<p>cloneFn</p>\n","properties":null,"html_type":"<a href=\"#!/api/Function\" rel=\"Function\" class=\"docClass\">Function</a>"},"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"method-clone","owner":"Ext.Function","short_doc":"Create a \"clone\" of the provided method. ..."},{"tagname":"method","name":"createAnimationFrame","autodetected":{"inheritdoc":true,"static":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/lang/Function.js","linenr":656}],"doc":"<p>Creates a wrapped function that, when invoked, defers execution until the next\nanimation frame</p>\n","private":true,"params":[{"tagname":"params","type":"Function","name":"fn","doc":"<p>The function to call.</p>\n","html_type":"<a href=\"#!/api/Function\" rel=\"Function\" class=\"docClass\">Function</a>"},{"tagname":"params","type":"Object","name":"scope","optional":true,"doc":"<p>The scope (<code>this</code> reference) in which the function is executed.\nDefaults to the window object.</p>\n","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"},{"tagname":"params","type":"Array","name":"args","optional":true,"doc":"<p>The argument list to pass to the function.</p>\n","html_type":"<a href=\"#!/api/Array\" rel=\"Array\" class=\"docClass\">Array</a>"},{"tagname":"params","type":"Number","name":"queueStrategy","default":"3","optional":true,"doc":"<p>A bit flag that indicates how multiple calls to\nthe returned function within the same animation frame should be handled.</p>\n\n<ul>\n<li>1: All calls will be queued - FIFO order</li>\n<li>2: Only the first call will be queued</li>\n<li>3: The last call will replace all previous calls</li>\n</ul>\n\n","html_type":"<a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a>"}],"return":{"type":"Function","name":"return","doc":"\n","properties":null,"html_type":"<a href=\"#!/api/Function\" rel=\"Function\" class=\"docClass\">Function</a>"},"inheritdoc":null,"static":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"method-createAnimationFrame","owner":"Ext.Function","short_doc":"Creates a wrapped function that, when invoked, defers execution until the next\nanimation frame ..."},{"tagname":"method","name":"createBarrier","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/lang/Function.js","linenr":809}],"doc":"<p>Wraps the passed function in a barrier function which will call the passed function\nafter the passed number of invocations.</p>\n","params":[{"tagname":"params","type":"Number","name":"count","doc":"<p>The number of invocations which will result in the calling\nof the passed function.</p>\n","html_type":"<a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a>"},{"tagname":"params","type":"Function","name":"fn","doc":"<p>The function to call after the required number of invocations.</p>\n","html_type":"<a href=\"#!/api/Function\" rel=\"Function\" class=\"docClass\">Function</a>"},{"tagname":"params","type":"Object","name":"scope","doc":"<p>The scope (<code>this</code> reference) in which the function will be called.</p>\n","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"}],"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"method-createBarrier","owner":"Ext.Function","short_doc":"Wraps the passed function in a barrier function which will call the passed function\nafter the passed number of invoca..."},{"tagname":"method","name":"createBuffered","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/lang/Function.js","linenr":599}],"doc":"<p>Creates a delegate function, optionally with a bound scope which, when called, buffers\nthe execution of the passed function for the configured number of milliseconds.\nIf called again within that period, the impending invocation will be canceled, and the\ntimeout period will begin again.</p>\n","params":[{"tagname":"params","type":"Function","name":"fn","doc":"<p>The function to invoke on a buffered timer.</p>\n","html_type":"<a href=\"#!/api/Function\" rel=\"Function\" class=\"docClass\">Function</a>"},{"tagname":"params","type":"Number","name":"buffer","doc":"<p>The number of milliseconds by which to buffer the invocation\nof the function.</p>\n","html_type":"<a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a>"},{"tagname":"params","type":"Object","name":"scope","optional":true,"doc":"<p>The scope (<code>this</code> reference) in which.\nthe passed function is executed. If omitted, defaults to the scope specified\nby the caller.</p>\n","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"},{"tagname":"params","type":"Array","name":"args","optional":true,"doc":"<p>Override arguments for the call. Defaults to the arguments\npassed by the caller.</p>\n","html_type":"<a href=\"#!/api/Array\" rel=\"Array\" class=\"docClass\">Array</a>"}],"return":{"type":"Function","name":"return","doc":"<p>A function which invokes the passed function after buffering\nfor the specified time.</p>\n","properties":null,"html_type":"<a href=\"#!/api/Function\" rel=\"Function\" class=\"docClass\">Function</a>"},"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"method-createBuffered","owner":"Ext.Function","short_doc":"Creates a delegate function, optionally with a bound scope which, when called, buffers\nthe execution of the passed fu..."},{"tagname":"method","name":"createDelayed","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/lang/Function.js","linenr":363}],"doc":"<p>Creates a delegate (callback) which, when called, executes after a specific delay.</p>\n","params":[{"tagname":"params","type":"Function","name":"fn","doc":"<p>The function which will be called on a delay when the returned\nfunction is called. Optionally, a replacement (or additional) argument list\nmay be specified.</p>\n","html_type":"<a href=\"#!/api/Function\" rel=\"Function\" class=\"docClass\">Function</a>"},{"tagname":"params","type":"Number","name":"delay","doc":"<p>The number of milliseconds to defer execution by whenever called.</p>\n","html_type":"<a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a>"},{"tagname":"params","type":"Object","name":"scope","optional":true,"doc":"<p>The scope (<code>this</code> reference) used by the function\nat execution time.</p>\n","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"},{"tagname":"params","type":"Array","name":"args","optional":true,"doc":"<p>Override arguments for the call.\n(Defaults to the arguments passed by the caller)</p>\n","html_type":"<a href=\"#!/api/Array\" rel=\"Array\" class=\"docClass\">Array</a>"},{"tagname":"params","type":"Boolean/Number","name":"appendArgs","optional":true,"doc":"<p>if True args are appended to call args\ninstead of overriding, if a number the args are inserted at the specified position.</p>\n","html_type":"<a href=\"#!/api/Boolean\" rel=\"Boolean\" class=\"docClass\">Boolean</a>/<a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a>"}],"return":{"type":"Function","name":"return","doc":"<p>A function which, when called, executes the original function\nafter the specified delay.</p>\n","properties":null,"html_type":"<a href=\"#!/api/Function\" rel=\"Function\" class=\"docClass\">Function</a>"},"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"method-createDelayed","owner":"Ext.Function","short_doc":"Creates a delegate (callback) which, when called, executes after a specific delay. ..."},{"tagname":"method","name":"createInterceptor","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/lang/Function.js","linenr":315}],"doc":"<p>Creates an interceptor function. The passed function is called before the original one.\nIf it returns false, the original one is not called. The resulting function returns\nthe results of the original function. The passed function is called with the parameters\nof the original function. Example usage:</p>\n\n<pre><code>var sayHi = function(name){\n    alert('Hi, ' + name);\n};\n\nsayHi('Fred'); // alerts \"Hi, Fred\"\n\n// create a new function that validates input without\n// directly modifying the original function:\nvar sayHiToFriend = <a href=\"#!/api/Ext.Function-method-createInterceptor\" rel=\"Ext.Function-method-createInterceptor\" class=\"docClass\">Ext.Function.createInterceptor</a>(sayHi, function(name){\n    return name === 'Brian';\n});\n\nsayHiToFriend('Fred');  // no alert\nsayHiToFriend('Brian'); // alerts \"Hi, Brian\"\n</code></pre>\n","params":[{"tagname":"params","type":"Function","name":"origFn","doc":"<p>The original function.</p>\n","html_type":"<a href=\"#!/api/Function\" rel=\"Function\" class=\"docClass\">Function</a>"},{"tagname":"params","type":"Function","name":"newFn","doc":"<p>The function to call before the original.</p>\n","html_type":"<a href=\"#!/api/Function\" rel=\"Function\" class=\"docClass\">Function</a>"},{"tagname":"params","type":"Object","name":"scope","optional":true,"doc":"<p>The scope (<code>this</code> reference) in which the passed function\nis executed. <strong>If omitted, defaults to the scope in which the original function\nis called or the browser window.</strong></p>\n","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"},{"tagname":"params","type":"Object","name":"returnValue","default":"null","optional":true,"doc":"<p>The value to return if the passed function return\n<code>false</code>.</p>\n","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"}],"return":{"type":"Function","name":"return","doc":"<p>The new function.</p>\n","properties":null,"html_type":"<a href=\"#!/api/Function\" rel=\"Function\" class=\"docClass\">Function</a>"},"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"method-createInterceptor","owner":"Ext.Function","short_doc":"Creates an interceptor function. ..."},{"tagname":"method","name":"createSequence","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/lang/Function.js","linenr":559}],"doc":"<p>Create a combined function call sequence of the original function + the passed function.\nThe resulting function returns the results of the original function.\nThe passed function is called with the parameters of the original function.\nExample usage:</p>\n\n<pre><code>var sayHi = function(name){\n    alert('Hi, ' + name);\n};\n\nsayHi('Fred'); // alerts \"Hi, Fred\"\n\nvar sayGoodbye = <a href=\"#!/api/Ext.Function-method-createSequence\" rel=\"Ext.Function-method-createSequence\" class=\"docClass\">Ext.Function.createSequence</a>(sayHi, function(name){\n    alert('Bye, ' + name);\n});\n\nsayGoodbye('Fred'); // both alerts show\n</code></pre>\n","params":[{"tagname":"params","type":"Function","name":"originalFn","doc":"<p>The original function.</p>\n","html_type":"<a href=\"#!/api/Function\" rel=\"Function\" class=\"docClass\">Function</a>"},{"tagname":"params","type":"Function","name":"newFn","doc":"<p>The function to sequence.</p>\n","html_type":"<a href=\"#!/api/Function\" rel=\"Function\" class=\"docClass\">Function</a>"},{"tagname":"params","type":"Object","name":"scope","optional":true,"doc":"<p>The scope (<code>this</code> reference) in which the passed function\nis executed. If omitted, defaults to the scope in which the original function is called\nor the default global environment object (usually the browser window).</p>\n","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"}],"return":{"type":"Function","name":"return","doc":"<p>The new function.</p>\n","properties":null,"html_type":"<a href=\"#!/api/Function\" rel=\"Function\" class=\"docClass\">Function</a>"},"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"method-createSequence","owner":"Ext.Function","short_doc":"Create a combined function call sequence of the original function + the passed function. ..."},{"tagname":"method","name":"createThrottled","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/lang/Function.js","linenr":752}],"doc":"<p>Creates a throttled version of the passed function which, when called repeatedly and\nrapidly, invokes the passed function only after a certain interval has elapsed since the\nprevious invocation.</p>\n\n<p>This is useful for wrapping functions which may be called repeatedly, such as\na handler of a mouse move event when the processing is expensive.</p>\n","params":[{"tagname":"params","type":"Function","name":"fn","doc":"<p>The function to execute at a regular time interval.</p>\n","html_type":"<a href=\"#!/api/Function\" rel=\"Function\" class=\"docClass\">Function</a>"},{"tagname":"params","type":"Number","name":"interval","doc":"<p>The interval in milliseconds on which the passed function\nis executed.</p>\n","html_type":"<a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a>"},{"tagname":"params","type":"Object","name":"scope","optional":true,"doc":"<p>The scope (<code>this</code> reference) in which\nthe passed function is executed. If omitted, defaults to the scope specified\nby the caller.</p>\n","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"}],"return":{"type":"Function","name":"return","doc":"<p>A function which invokes the passed function at the specified\ninterval.</p>\n","properties":null,"html_type":"<a href=\"#!/api/Function\" rel=\"Function\" class=\"docClass\">Function</a>"},"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"method-createThrottled","owner":"Ext.Function","short_doc":"Creates a throttled version of the passed function which, when called repeatedly and\nrapidly, invokes the passed func..."},{"tagname":"method","name":"defer","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/lang/Function.js","linenr":418}],"doc":"<p>Calls function <code>fn</code> after the number of milliseconds specified, optionally with\na specific <code>scope</code> (<code>this</code> pointer).</p>\n\n<p>Example usage:</p>\n\n<pre><code>var sayHi = function(name) {\n    alert('Hi, ' + name);\n}\n\n// executes immediately:\nsayHi('Fred');\n\n// executes after 2 seconds:\n<a href=\"#!/api/Ext-method-defer\" rel=\"Ext-method-defer\" class=\"docClass\">Ext.defer</a>(sayHi, 2000, this, ['Fred']);\n</code></pre>\n\n<p>The following syntax is useful for scheduling anonymous functions:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-defer\" rel=\"Ext-method-defer\" class=\"docClass\">Ext.defer</a>(function() {\n    alert('Anonymous');\n}, 100);\n</code></pre>\n\n<p>NOTE: The <code><a href=\"#!/api/Ext.Function-method-defer\" rel=\"Ext.Function-method-defer\" class=\"docClass\">Ext.Function.defer</a>()</code> method is an alias for <code><a href=\"#!/api/Ext-method-defer\" rel=\"Ext-method-defer\" class=\"docClass\">Ext.defer</a>()</code>.</p>\n","params":[{"tagname":"params","type":"Function","name":"fn","doc":"<p>The function to defer.</p>\n\n","html_type":"<a href=\"#!/api/Function\" rel=\"Function\" class=\"docClass\">Function</a>"},{"tagname":"params","type":"Number","name":"millis","doc":"<p>The number of milliseconds for the <code>setTimeout</code> call\n(if less than or equal to 0 the function is executed immediately).</p>\n\n","html_type":"<a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a>"},{"tagname":"params","type":"Object","name":"scope","optional":true,"doc":"<p>The scope (<code>this</code> reference) in which the function\nis executed. <strong>If omitted, defaults to the browser window.</strong></p>\n\n","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"},{"tagname":"params","type":"Array","name":"args","optional":true,"doc":"<p>Overrides arguments for the call. Defaults to the arguments passed\nby the caller.</p>\n\n","html_type":"<a href=\"#!/api/Array\" rel=\"Array\" class=\"docClass\">Array</a>"},{"tagname":"params","type":"Boolean/Number","name":"appendArgs","default":"false","optional":true,"doc":"<p>If <code>true</code> args are appended to call args\ninstead of overriding, or, if a number, then the args are inserted at the specified\nposition.</p>\n\n","html_type":"<a href=\"#!/api/Boolean\" rel=\"Boolean\" class=\"docClass\">Boolean</a>/<a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a>"}],"return":{"type":"Number","name":"return","doc":"<p>The timeout id that can be used with <code><a href=\"#!/api/Ext-method-undefer\" rel=\"Ext-method-undefer\" class=\"docClass\">Ext.undefer</a></code>.</p>\n\n","properties":null,"html_type":"<a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a>"},"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"method-defer","owner":"Ext.Function","short_doc":"Calls function fn after the number of milliseconds specified, optionally with\na specific scope (this pointer). ..."},{"tagname":"method","name":"flexSetter","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/lang/Function.js","linenr":92}],"doc":"<p>A very commonly used method throughout the framework. It acts as a wrapper around\nanother method which originally accepts 2 arguments for <code>name</code> and <code>value</code>.\nThe wrapped function then allows \"flexible\" value setting of either:</p>\n\n<ul>\n<li><code>name</code> and <code>value</code> as 2 arguments</li>\n<li>one single object argument with multiple key - value pairs</li>\n</ul>\n\n\n<p>For example:</p>\n\n<pre><code>var setValue = <a href=\"#!/api/Ext.Function-method-flexSetter\" rel=\"Ext.Function-method-flexSetter\" class=\"docClass\">Ext.Function.flexSetter</a>(function(name, value) {\n    this[name] = value;\n});\n\n// Afterwards\n// Setting a single name - value\nsetValue('name1', 'value1');\n\n// Settings multiple name - value pairs\nsetValue({\n    name1: 'value1',\n    name2: 'value2',\n    name3: 'value3'\n});\n</code></pre>\n","params":[{"tagname":"params","type":"Function","name":"setter","doc":"<p>The single value setter method.</p>\n","properties":[{"tagname":"params","type":"String","name":"name","doc":"<p>The name of the value being set.</p>\n","html_type":"<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>"},{"tagname":"params","type":"Object","name":"value","doc":"<p>The value being set.</p>\n","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"}],"html_type":"<a href=\"#!/api/Function\" rel=\"Function\" class=\"docClass\">Function</a>"}],"return":{"type":"Function","name":"return","doc":"\n","properties":null,"html_type":"<a href=\"#!/api/Function\" rel=\"Function\" class=\"docClass\">Function</a>"},"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"method-flexSetter","owner":"Ext.Function","short_doc":"A very commonly used method throughout the framework. ..."},{"tagname":"method","name":"interceptAfter","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/lang/Function.js","linenr":874}],"doc":"<p>Adds behavior to an existing method that is executed after the\noriginal behavior of the function.  For example:</p>\n\n<pre><code>var soup = {\n    contents: [],\n    add: function(ingredient) {\n        this.contents.push(ingredient);\n    }\n};\n<a href=\"#!/api/Ext.Function-method-interceptAfter\" rel=\"Ext.Function-method-interceptAfter\" class=\"docClass\">Ext.Function.interceptAfter</a>(soup, \"add\", function(ingredient){\n    // Always add a bit of extra salt\n    this.contents.push(\"salt\");\n});\nsoup.add(\"water\");\nsoup.add(\"onions\");\nsoup.contents; // will contain: water, salt, onions, salt\n</code></pre>\n","params":[{"tagname":"params","type":"Object","name":"object","doc":"<p>The target object</p>\n","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"},{"tagname":"params","type":"String","name":"methodName","doc":"<p>Name of the method to override</p>\n","html_type":"<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>"},{"tagname":"params","type":"Function","name":"fn","doc":"<p>Function with the new behavior.  It will\nbe called with the same arguments as the original method.  The\nreturn value of this function will be the return value of the\nnew method.</p>\n","html_type":"<a href=\"#!/api/Function\" rel=\"Function\" class=\"docClass\">Function</a>"},{"tagname":"params","type":"Object","name":"scope","optional":true,"doc":"<p>The scope to execute the interceptor function.\nDefaults to the object.</p>\n","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"}],"return":{"type":"Function","name":"return","doc":"<p>The new function just created.</p>\n","properties":null,"html_type":"<a href=\"#!/api/Function\" rel=\"Function\" class=\"docClass\">Function</a>"},"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"method-interceptAfter","owner":"Ext.Function","short_doc":"Adds behavior to an existing method that is executed after the\noriginal behavior of the function. ..."},{"tagname":"method","name":"interceptBefore","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/lang/Function.js","linenr":832}],"doc":"<p>Adds behavior to an existing method that is executed before the\noriginal behavior of the function.  For example:</p>\n\n<pre><code>var soup = {\n    contents: [],\n    add: function(ingredient) {\n        this.contents.push(ingredient);\n    }\n};\n<a href=\"#!/api/Ext.Function-method-interceptBefore\" rel=\"Ext.Function-method-interceptBefore\" class=\"docClass\">Ext.Function.interceptBefore</a>(soup, \"add\", function(ingredient){\n    if (!this.contents.length &amp;&amp; ingredient !== \"water\") {\n        // Always add water to start with\n        this.contents.push(\"water\");\n    }\n});\nsoup.add(\"onions\");\nsoup.add(\"salt\");\nsoup.contents; // will contain: water, onions, salt\n</code></pre>\n","params":[{"tagname":"params","type":"Object","name":"object","doc":"<p>The target object</p>\n","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"},{"tagname":"params","type":"String","name":"methodName","doc":"<p>Name of the method to override</p>\n","html_type":"<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>"},{"tagname":"params","type":"Function","name":"fn","doc":"<p>Function with the new behavior.  It will\nbe called with the same arguments as the original method.  The\nreturn value of this function will be the return value of the\nnew method.</p>\n","html_type":"<a href=\"#!/api/Function\" rel=\"Function\" class=\"docClass\">Function</a>"},{"tagname":"params","type":"Object","name":"scope","optional":true,"doc":"<p>The scope to execute the interceptor function.\nDefaults to the object.</p>\n","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"}],"return":{"type":"Function","name":"return","doc":"<p>The new function just created.</p>\n","properties":null,"html_type":"<a href=\"#!/api/Function\" rel=\"Function\" class=\"docClass\">Function</a>"},"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"method-interceptBefore","owner":"Ext.Function","short_doc":"Adds behavior to an existing method that is executed before the\noriginal behavior of the function. ..."},{"tagname":"method","name":"interval","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/lang/Function.js","linenr":498}],"doc":"<p>Calls the function <code>fn</code> repeatedly at a given interval, optionally with a\nspecific <code>scope</code> (<code>this</code> pointer).</p>\n\n<pre><code>var sayHi = function(name) {\n    console.log('Hi, ' + name);\n}\n\n// executes every 2 seconds:\nvar timerId = <a href=\"#!/api/Ext-method-interval\" rel=\"Ext-method-interval\" class=\"docClass\">Ext.interval</a>(sayHi, 2000, this, ['Fred']);\n</code></pre>\n\n<p>The timer is stopped by:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-uninterval\" rel=\"Ext-method-uninterval\" class=\"docClass\">Ext.uninterval</a>(timerId);\n</code></pre>\n\n<p>NOTE: The <code><a href=\"#!/api/Ext.Function-method-interval\" rel=\"Ext.Function-method-interval\" class=\"docClass\">Ext.Function.interval</a>()</code> method is an alias for <code><a href=\"#!/api/Ext-method-interval\" rel=\"Ext-method-interval\" class=\"docClass\">Ext.interval</a>()</code>.</p>\n","params":[{"tagname":"params","type":"Function","name":"fn","doc":"<p>The function to defer.</p>\n\n","html_type":"<a href=\"#!/api/Function\" rel=\"Function\" class=\"docClass\">Function</a>"},{"tagname":"params","type":"Number","name":"millis","doc":"<p>The number of milliseconds for the <code>setInterval</code> call</p>\n\n","html_type":"<a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a>"},{"tagname":"params","type":"Object","name":"scope","optional":true,"doc":"<p>The scope (<code>this</code> reference) in which the function\nis executed. <strong>If omitted, defaults to the browser window.</strong></p>\n\n","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"},{"tagname":"params","type":"Array","name":"args","optional":true,"doc":"<p>Overrides arguments for the call. Defaults to the arguments\npassed by the caller.</p>\n\n","html_type":"<a href=\"#!/api/Array\" rel=\"Array\" class=\"docClass\">Array</a>"},{"tagname":"params","type":"Boolean/Number","name":"appendArgs","default":"false","optional":true,"doc":"<p>If <code>true</code> args are appended to call args\ninstead of overriding, or, if a number, then the args are inserted at the specified\nposition.</p>\n\n","html_type":"<a href=\"#!/api/Boolean\" rel=\"Boolean\" class=\"docClass\">Boolean</a>/<a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a>"}],"return":{"type":"Number","name":"return","doc":"<p>The interval id that can be used with <code><a href=\"#!/api/Ext-method-uninterval\" rel=\"Ext-method-uninterval\" class=\"docClass\">Ext.uninterval</a></code>.</p>\n\n","properties":null,"html_type":"<a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a>"},"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"method-interval","owner":"Ext.Function","short_doc":"Calls the function fn repeatedly at a given interval, optionally with a\nspecific scope (this pointer). ..."},{"tagname":"method","name":"memoize","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/lang/Function.js","linenr":952}],"doc":"<p>Returns a wrapper function that caches the return value for previously\nprocessed function argument(s).</p>\n\n<p>For example:</p>\n\n<pre><code> function factorial (value) {\n     var ret = value;\n\n     while (--value &gt; 1) {\n         ret *= value;\n     }\n\n     return ret;\n }\n</code></pre>\n\n<p>Each call to <code>factorial</code> will loop and multiply to produce the answer. Using\nthis function we can wrap the above and cache its answers:</p>\n\n<pre><code> factorial = <a href=\"#!/api/Ext.Function-method-memoize\" rel=\"Ext.Function-method-memoize\" class=\"docClass\">Ext.Function.memoize</a>(factorial);\n</code></pre>\n\n<p>The returned function operates in the same manner as before, but results are\nstored in a cache to avoid calling the wrapped function when given the same\narguments.</p>\n\n<pre><code> var x = factorial(20);  // first time; call real factorial()\n var y = factorial(20);  // second time; return value from first call\n</code></pre>\n\n<p>To support multi-argument methods, you will need to provide a <code>hashFn</code>.</p>\n\n<pre><code> function permutation (n, k) {\n     return factorial(n) / factorial(n - k);\n }\n\n permutation = <a href=\"#!/api/Ext.Function-method-memoize\" rel=\"Ext.Function-method-memoize\" class=\"docClass\">Ext.Function.memoize</a>(permutation, null, function(n, k) {\n     n + '-' + k;\n });\n</code></pre>\n\n<p>In this case, the <code>memoize</code> of <code>factorial</code> is sufficient optimization, but the\nexample is simply to illustrate how to generate a unique key for an expensive,\nmulti-argument method.</p>\n\n<p><strong>IMPORTANT</strong>: This cache is unbounded so be cautious of memory leaks if the\n<code>memoize</code>d function is kept indefinitely or is given an unbounded set of\npossible arguments.</p>\n","params":[{"tagname":"params","type":"Function","name":"fn","doc":"<p>Function to wrap.</p>\n","html_type":"<a href=\"#!/api/Function\" rel=\"Function\" class=\"docClass\">Function</a>"},{"tagname":"params","type":"Object","name":"scope","doc":"<p>Optional scope in which to execute the wrapped function.</p>\n","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"},{"tagname":"params","type":"Function","name":"hashFn","doc":"<p>Optional function used to compute a hash key for\nstoring the result, based on the arguments to the original function.</p>\n","html_type":"<a href=\"#!/api/Function\" rel=\"Function\" class=\"docClass\">Function</a>"}],"return":{"type":"Function","name":"return","doc":"<p>The caching wrapper function.</p>\n","properties":null,"html_type":"<a href=\"#!/api/Function\" rel=\"Function\" class=\"docClass\">Function</a>"},"since":"6.0.0","inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"method-memoize","owner":"Ext.Function","short_doc":"Returns a wrapper function that caches the return value for previously\nprocessed function argument(s). ..."},{"tagname":"method","name":"pass","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/lang/Function.js","linenr":234}],"doc":"<p>Create a new function from the provided <code>fn</code>, the arguments of which are pre-set\nto <code>args</code>. New arguments passed to the newly created callback when it's invoked\nare appended after the pre-set ones.\nThis is especially useful when creating callbacks.</p>\n\n<p>For example:</p>\n\n<pre><code>var originalFunction = function(){\n    alert(<a href=\"#!/api/Ext.Array-method-from\" rel=\"Ext.Array-method-from\" class=\"docClass\">Ext.Array.from</a>(arguments).join(' '));\n};\n\nvar callback = <a href=\"#!/api/Ext.Function-method-pass\" rel=\"Ext.Function-method-pass\" class=\"docClass\">Ext.Function.pass</a>(originalFunction, ['Hello', 'World']);\n\ncallback(); // alerts 'Hello World'\ncallback('by Me'); // alerts 'Hello World by Me'\n</code></pre>\n\n<p><a href=\"#!/api/Ext-method-pass\" rel=\"Ext-method-pass\" class=\"docClass\">Ext.pass</a> is alias for <a href=\"#!/api/Ext.Function-method-pass\" rel=\"Ext.Function-method-pass\" class=\"docClass\">Ext.Function.pass</a></p>\n","params":[{"tagname":"params","type":"Function","name":"fn","doc":"<p>The original function.</p>\n\n","html_type":"<a href=\"#!/api/Function\" rel=\"Function\" class=\"docClass\">Function</a>"},{"tagname":"params","type":"Array","name":"args","doc":"<p>The arguments to pass to new callback.</p>\n\n","html_type":"<a href=\"#!/api/Array\" rel=\"Array\" class=\"docClass\">Array</a>"},{"tagname":"params","type":"Object","name":"scope","optional":true,"doc":"<p>The scope (<code>this</code> reference) in which the function\nis executed.</p>\n\n","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"}],"return":{"type":"Function","name":"return","doc":"<p>The new callback function.</p>\n\n","properties":null,"html_type":"<a href=\"#!/api/Function\" rel=\"Function\" class=\"docClass\">Function</a>"},"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"method-pass","owner":"Ext.Function","short_doc":"Create a new function from the provided fn, the arguments of which are pre-set\nto args. ..."},{"tagname":"method","name":"requestAnimationFrame","autodetected":{"inheritdoc":true,"static":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/lang/Function.js","linenr":706}],"doc":"<p>Schedules the passed function to be called on the next animation frame.</p>\n","private":true,"params":[{"tagname":"params","type":"Function","name":"fn","doc":"<p>The function to call.</p>\n","html_type":"<a href=\"#!/api/Function\" rel=\"Function\" class=\"docClass\">Function</a>"},{"tagname":"params","type":"Object","name":"scope","optional":true,"doc":"<p>The scope (<code>this</code> reference) in which the function is executed.\nDefaults to the window object.</p>\n","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"},{"tagname":"params","type":"Mixed[]","name":"args","optional":true,"doc":"<p>The argument list to pass to the function.</p>\n","html_type":"Mixed[]"}],"return":{"type":"Number","name":"return","doc":"<p>Timer id for the new animation frame to use when canceling it.</p>\n","properties":null,"html_type":"<a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a>"},"inheritdoc":null,"static":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"method-requestAnimationFrame","owner":"Ext.Function","short_doc":"Schedules the passed function to be called on the next animation frame. ..."}],"alternateClassNames":[],"aliases":{},"id":"class-Ext.Function"}