{"tagname":"class","name":"Ext.Number","autodetected":{},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/lang/Number.js","linenr":1}],"doc":"<p>A collection of useful static methods to deal with numbers</p>\n","singleton":true,"members":[{"tagname":"method","name":"clipIndices","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/lang/Number.js","linenr":158}],"doc":"<p>Coerces a given index into a valid index given a <code>length</code>.</p>\n\n<p>Negative indexes are interpreted starting at the end of the collection. That is,\na value of -1 indicates the last item, or equivalent to <code>length - 1</code>.</p>\n\n<p>When handling methods that take \"begin\" and \"end\" arguments like most array or\nstring methods, this method can be used like so:</p>\n\n<pre><code> function foo (array, begin, end) {\n     var range = <a href=\"#!/api/Ext.Number-method-clipIndices\" rel=\"Ext.Number-method-clipIndices\" class=\"docClass\">Ext.Number.clipIndices</a>(array.length, [begin, end]);\n\n     begin = range[0];\n     end   = range[1];\n\n     // 0 &lt;= begin &lt;= end &lt;= array.length\n\n     var length = end - begin;\n }\n</code></pre>\n\n<p>For example:</p>\n\n<pre><code> +---+---+---+---+---+---+---+---+\n |   |   |   |   |   |   |   |   |  length = 8\n +---+---+---+---+---+---+---+---+\n   0   1   2   3   4   5   6   7\n  -8  -7  -6  -5  -4  -3  -2  -1\n\n console.log(<a href=\"#!/api/Ext.Number-method-clipIndices\" rel=\"Ext.Number-method-clipIndices\" class=\"docClass\">Ext.Number.clipIndices</a>(8, [3, 10]); // logs \"[3, 8]\"\n console.log(<a href=\"#!/api/Ext.Number-method-clipIndices\" rel=\"Ext.Number-method-clipIndices\" class=\"docClass\">Ext.Number.clipIndices</a>(8, [-5]);    // logs \"[3, 8]\"\n console.log(<a href=\"#!/api/Ext.Number-method-clipIndices\" rel=\"Ext.Number-method-clipIndices\" class=\"docClass\">Ext.Number.clipIndices</a>(8, []);\n console.log(<a href=\"#!/api/Ext.Number-method-clipIndices\" rel=\"Ext.Number-method-clipIndices\" class=\"docClass\">Ext.Number.clipIndices</a>(8, []);\n</code></pre>\n","params":[{"tagname":"params","type":"Number","name":"length","doc":"\n","html_type":"<a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a>"},{"tagname":"params","type":"Number[]","name":"indices","doc":"\n","html_type":"<a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a>[]"},{"tagname":"params","type":"Object","name":"options","optional":true,"doc":"<p>An object with different option flags.</p>\n","properties":[{"tagname":"params","type":"Boolean","name":"count","default":"false","optional":true,"doc":"<p>The second number in <code>indices</code> is the\ncount not and an index.</p>\n","html_type":"<a href=\"#!/api/Boolean\" rel=\"Boolean\" class=\"docClass\">Boolean</a>"},{"tagname":"params","type":"Boolean","name":"inclusive","default":"false","optional":true,"doc":"<p>The second number in <code>indices</code> is\n\"inclusive\" meaning that the item should be considered in the range. Normally,\nthe second number is considered the first item outside the range or as an\n\"exclusive\" bound.</p>\n","html_type":"<a href=\"#!/api/Boolean\" rel=\"Boolean\" class=\"docClass\">Boolean</a>"},{"tagname":"params","type":"Boolean","name":"wrap","default":"true","optional":true,"doc":"<p>Wraps negative numbers backwards from the\nend of the array. Passing <code>false</code> simply clips negative index values at 0.</p>\n","html_type":"<a href=\"#!/api/Boolean\" rel=\"Boolean\" class=\"docClass\">Boolean</a>"}],"html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"}],"return":{"type":"Number[]","name":"return","doc":"<p>The normalized <code>[begin, end]</code> array where <code>end</code> is now\nexclusive such that <code>length = end - begin</code>. Both values are between 0 and the\ngiven <code>length</code> and <code>end</code> will not be less-than <code>begin</code>.</p>\n","properties":null,"html_type":"<a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a>[]"},"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"method-clipIndices","owner":"Ext.Number","short_doc":"Coerces a given index into a valid index given a length. ..."},{"tagname":"method","name":"constrain","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/lang/Number.js","linenr":253}],"doc":"<p>Checks whether or not the passed number is within a desired range. If the number is\nalready within the range it is returned, otherwise the min or max value is returned\ndepending on which side of the range is exceeded. Note that this method returns the\nconstrained value but does not change the current number.</p>\n","params":[{"tagname":"params","type":"Number","name":"number","doc":"<p>The number to check</p>\n","html_type":"<a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a>"},{"tagname":"params","type":"Number","name":"min","doc":"<p>The minimum number in the range</p>\n","html_type":"<a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a>"},{"tagname":"params","type":"Number","name":"max","doc":"<p>The maximum number in the range</p>\n","html_type":"<a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a>"}],"return":{"type":"Number","name":"return","doc":"<p>The constrained value if outside the range, otherwise the current value</p>\n","properties":null,"html_type":"<a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a>"},"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"method-constrain","owner":"Ext.Number","short_doc":"Checks whether or not the passed number is within a desired range. ..."},{"tagname":"method","name":"correctFloat","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/lang/Number.js","linenr":537}],"doc":"<p>Corrects floating point numbers that overflow to a non-precise\nvalue because of their floating nature, for example <code>0.1 + 0.2</code></p>\n","params":[{"tagname":"params","type":"Number","name":"n","doc":"<p>The number</p>\n","html_type":"<a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a>"}],"return":{"type":"Number","name":"return","doc":"<p>The correctly rounded number</p>\n","properties":null,"html_type":"<a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a>"},"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"method-correctFloat","owner":"Ext.Number","short_doc":"Corrects floating point numbers that overflow to a non-precise\nvalue because of their floating nature, for example 0...."},{"tagname":"method","name":"from","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/lang/Number.js","linenr":508}],"doc":"<p>Validate that a value is numeric and convert it to a number if necessary.\nReturns the specified default value if it is not.</p>\n\n<pre><code> <a href=\"#!/api/Ext.Number-method-from\" rel=\"Ext.Number-method-from\" class=\"docClass\">Ext.Number.from</a>('1.23', 1); // returns 1.23\n <a href=\"#!/api/Ext.Number-method-from\" rel=\"Ext.Number-method-from\" class=\"docClass\">Ext.Number.from</a>('abc', 1); // returns 1\n</code></pre>\n","params":[{"tagname":"params","type":"Object","name":"value","doc":"\n","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"},{"tagname":"params","type":"Number","name":"defaultValue","doc":"<p>The value to return if the original value is non-numeric</p>\n\n","html_type":"<a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a>"}],"return":{"type":"Number","name":"return","doc":"<p>value, if numeric, defaultValue otherwise</p>\n\n","properties":null,"html_type":"<a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a>"},"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"method-from","owner":"Ext.Number","short_doc":"Validate that a value is numeric and convert it to a number if necessary. ..."},{"tagname":"method","name":"isEqual","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/lang/Number.js","linenr":452}],"doc":"<p>Determines if two numbers <code>n1</code> and <code>n2</code> are equal within a given\nmargin of precision <code>epsilon</code>.</p>\n","params":[{"tagname":"params","type":"Number","name":"n1","doc":"<p>First number.</p>\n","html_type":"<a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a>"},{"tagname":"params","type":"Number","name":"n2","doc":"<p>Second number.</p>\n","html_type":"<a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a>"},{"tagname":"params","type":"Number","name":"epsilon","doc":"<p>Margin of precision.</p>\n","html_type":"<a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a>"}],"return":{"type":"Boolean","name":"return","doc":"<p><code>true</code>, if numbers are equal. <code>false</code> otherwise.</p>\n","properties":null,"html_type":"<a href=\"#!/api/Boolean\" rel=\"Boolean\" class=\"docClass\">Boolean</a>"},"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"method-isEqual","owner":"Ext.Number","short_doc":"Determines if two numbers n1 and n2 are equal within a given\nmargin of precision epsilon. ..."},{"tagname":"method","name":"isFinite","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/lang/Number.js","linenr":471}],"doc":"<p>Determines if the value passed is a number and also finite.\nThis a Polyfill version of Number.isFinite(),differently than\nthe isFinite() function, this method doesn't convert the parameter to a number.</p>\n","params":[{"tagname":"params","type":"Number","name":"value","doc":"<p>Number to be tested.</p>\n","html_type":"<a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a>"}],"return":{"type":"Boolean","name":"return","doc":"<p><code>true</code>, if the parameter is a number and finite, <code>false</code> otherwise.</p>\n","properties":null,"html_type":"<a href=\"#!/api/Boolean\" rel=\"Boolean\" class=\"docClass\">Boolean</a>"},"since":"6.2","inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":null,"fires":null,"method_calls":null,"id":"method-isFinite","owner":"Ext.Number","short_doc":"Determines if the value passed is a number and also finite. ..."},{"tagname":"method","name":"log10","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/lang/Number.js","linenr":441}],"doc":"<p>Returns the base 10 logarithm of a number.\nThis will use Math.log10, if available (ES6).</p>\n","params":[{"tagname":"params","type":"Number","name":"x","doc":"<p>The number.</p>\n","html_type":"<a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a>"}],"return":{"type":"Number","name":"return","doc":"<p>Base 10 logarithm of the number 'x'.</p>\n","properties":null,"html_type":"<a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a>"},"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":null,"fires":null,"method_calls":null,"id":"method-log10","owner":"Ext.Number","short_doc":"Returns the base 10 logarithm of a number. ..."},{"tagname":"method","name":"parseFloat","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/lang/Number.js","linenr":47}],"doc":"<p>Strictly parses the given value and returns the value as a number or <code>null</code> if\nthe value is not a number or contains non-numeric pieces.</p>\n","params":[{"tagname":"params","type":"String","name":"value","doc":"\n","html_type":"<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>"}],"return":{"type":"Number","name":"return","doc":"\n","properties":null,"html_type":"<a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a>"},"since":"6.5.1","inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"method-parseFloat","owner":"Ext.Number","short_doc":"Strictly parses the given value and returns the value as a number or null if\nthe value is not a number or contains no..."},{"tagname":"method","name":"parseInt","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/lang/Number.js","linenr":71}],"doc":"<p>Strictly parses the given value and returns the value as a number or <code>null</code> if\nthe value is not an integer number or contains non-integer pieces.</p>\n","params":[{"tagname":"params","type":"String","name":"value","doc":"\n","html_type":"<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>"}],"return":{"type":"Number","name":"return","doc":"\n","properties":null,"html_type":"<a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a>"},"since":"6.5.1","inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"method-parseInt","owner":"Ext.Number","short_doc":"Strictly parses the given value and returns the value as a number or null if\nthe value is not an integer number or co..."},{"tagname":"method","name":"randomInt","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/lang/Number.js","linenr":527}],"doc":"<p>Returns a random integer between the specified range (inclusive)</p>\n","params":[{"tagname":"params","type":"Number","name":"from","doc":"<p>Lowest value to return.</p>\n","html_type":"<a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a>"},{"tagname":"params","type":"Number","name":"to","doc":"<p>Highest value to return.</p>\n","html_type":"<a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a>"}],"return":{"type":"Number","name":"return","doc":"<p>A random integer within the specified range.</p>\n","properties":null,"html_type":"<a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a>"},"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"method-randomInt","owner":"Ext.Number","short_doc":"Returns a random integer between the specified range (inclusive) ..."},{"tagname":"method","name":"roundToNearest","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/lang/Number.js","linenr":383}],"doc":"<p>Round a number to the nearest interval.</p>\n","params":[{"tagname":"params","type":"Number","name":"value","doc":"<p>The value to round.</p>\n","html_type":"<a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a>"},{"tagname":"params","type":"Number","name":"interval","doc":"<p>The interval to round to.</p>\n","html_type":"<a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a>"}],"return":{"type":"Number","name":"return","doc":"<p>The rounded value.</p>\n","properties":null,"html_type":"<a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a>"},"since":"6.2.0","inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"method-roundToNearest","owner":"Ext.Number","short_doc":"Round a number to the nearest interval. ..."},{"tagname":"method","name":"roundToPrecision","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/lang/Number.js","linenr":397}],"doc":"<p>Rounds a number to the specified precision.</p>\n","params":[{"tagname":"params","name":"value","doc":"\n","type":"Object","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"},{"tagname":"params","name":"precision","doc":"\n","type":"Object","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"}],"return":{"type":"number","name":"return","doc":"\n","properties":null,"html_type":"<a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">number</a>"},"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"method-roundToPrecision","owner":"Ext.Number","short_doc":"Rounds a number to the specified precision. ..."},{"tagname":"method","name":"sign","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/lang/Number.js","linenr":423}],"doc":"<p>Returns the sign of the given number. See also MDN for Math.sign documentation\nfor the standard method this method emulates.</p>\n","params":[{"tagname":"params","type":"Number","name":"x","doc":"<p>The number.</p>\n","html_type":"<a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a>"}],"return":{"type":"Number","name":"return","doc":"<p>The sign of the number <code>x</code>, indicating whether the number is\npositive (1), negative (-1) or zero (0).</p>\n","properties":null,"html_type":"<a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a>"},"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":null,"fires":null,"method_calls":null,"id":"method-sign","owner":"Ext.Number","short_doc":"Returns the sign of the given number. ..."},{"tagname":"method","name":"snap","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/lang/Number.js","linenr":284}],"doc":"<p>Snaps the passed number between stopping points based upon a passed increment value.</p>\n\n<p>The difference between this and <a href=\"#!/api/Ext.Number-method-snapInRange\" rel=\"Ext.Number-method-snapInRange\" class=\"docClass\">snapInRange</a> is that <a href=\"#!/api/Ext.Number-method-snapInRange\" rel=\"Ext.Number-method-snapInRange\" class=\"docClass\">snapInRange</a> uses\nthe minValue when calculating snap points:</p>\n\n<pre><code>// Returns 56 - snap points are zero based\nr = <a href=\"#!/api/Ext.Number-method-snap\" rel=\"Ext.Number-method-snap\" class=\"docClass\">Ext.Number.snap</a>(56, 2, 55, 65);\n\n// Returns 57 - snap points are based from minValue\nr = <a href=\"#!/api/Ext.Number-method-snapInRange\" rel=\"Ext.Number-method-snapInRange\" class=\"docClass\">Ext.Number.snapInRange</a>(56, 2, 55, 65);\n</code></pre>\n","params":[{"tagname":"params","type":"Number","name":"value","doc":"<p>The unsnapped value.</p>\n","html_type":"<a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a>"},{"tagname":"params","type":"Number","name":"increment","doc":"<p>The increment by which the value must move.</p>\n","html_type":"<a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a>"},{"tagname":"params","type":"Number","name":"minValue","doc":"<p>The minimum value to which the returned value must be\nconstrained. Overrides the increment.</p>\n","html_type":"<a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a>"},{"tagname":"params","type":"Number","name":"maxValue","doc":"<p>The maximum value to which the returned value must be\nconstrained. Overrides the increment.</p>\n","html_type":"<a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a>"}],"return":{"type":"Number","name":"return","doc":"<p>The value of the nearest snap target.</p>\n","properties":null,"html_type":"<a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a>"},"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"method-snap","owner":"Ext.Number","short_doc":"Snaps the passed number between stopping points based upon a passed increment value. ..."},{"tagname":"method","name":"snapInRange","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/lang/Number.js","linenr":332}],"doc":"<p>Snaps the passed number between stopping points based upon a passed increment value.</p>\n\n<p>The difference between this and <a href=\"#!/api/Ext.Number-method-snap\" rel=\"Ext.Number-method-snap\" class=\"docClass\">snap</a> is that <a href=\"#!/api/Ext.Number-method-snap\" rel=\"Ext.Number-method-snap\" class=\"docClass\">snap</a> does not use\nthe minValue when calculating snap points:</p>\n\n<pre><code>// Returns 56 - snap points are zero based\nr = <a href=\"#!/api/Ext.Number-method-snap\" rel=\"Ext.Number-method-snap\" class=\"docClass\">Ext.Number.snap</a>(56, 2, 55, 65);\n\n// Returns 57 - snap points are based from minValue\nr = <a href=\"#!/api/Ext.Number-method-snapInRange\" rel=\"Ext.Number-method-snapInRange\" class=\"docClass\">Ext.Number.snapInRange</a>(56, 2, 55, 65);\n</code></pre>\n","params":[{"tagname":"params","type":"Number","name":"value","doc":"<p>The unsnapped value.</p>\n","html_type":"<a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a>"},{"tagname":"params","type":"Number","name":"increment","doc":"<p>The increment by which the value must move.</p>\n","html_type":"<a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a>"},{"tagname":"params","type":"Number","name":"minValue","default":"0","optional":true,"doc":"<p>The minimum value to which the returned value must be\nconstrained.</p>\n","html_type":"<a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a>"},{"tagname":"params","type":"Number","name":"maxValue","default":"Infinity","optional":true,"doc":"<p>The maximum value to which the returned value\nmust be constrained.</p>\n","html_type":"<a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a>"}],"return":{"type":"Number","name":"return","doc":"<p>The value of the nearest snap target.</p>\n","properties":null,"html_type":"<a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a>"},"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"method-snapInRange","owner":"Ext.Number","short_doc":"Snaps the passed number between stopping points based upon a passed increment value. ..."},{"tagname":"method","name":"toFixed","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/lang/Number.js","linenr":489}],"doc":"<p>Formats a number using fixed-point notation</p>\n","params":[{"tagname":"params","type":"Number","name":"value","doc":"<p>The number to format</p>\n","html_type":"<a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a>"},{"tagname":"params","type":"Number","name":"precision","doc":"<p>The number of digits to show after the decimal point</p>\n","html_type":"<a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a>"}],"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":null,"fires":null,"method_calls":null,"id":"method-toFixed","owner":"Ext.Number","short_doc":"Formats a number using fixed-point notation ..."},{"tagname":"method","name":"truncateToPrecision","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/lang/Number.js","linenr":409}],"doc":"<p>Truncates a number to the specified precision,\nwithout rounding.</p>\n","params":[{"tagname":"params","name":"value","doc":"\n","type":"Object","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"},{"tagname":"params","name":"precision","doc":"\n","type":"Object","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"}],"return":{"type":"number","name":"return","doc":"\n","properties":null,"html_type":"<a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">number</a>"},"since":"6.5.1","inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"method-truncateToPrecision","owner":"Ext.Number","short_doc":"Truncates a number to the specified precision,\nwithout rounding. ..."}],"alternateClassNames":[],"aliases":{},"id":"class-Ext.Number"}