{"tagname":"class","name":"Ext.dd.DragDropManager","autodetected":{"aliases":true,"alternateClassNames":true,"extends":true,"mixins":true,"requires":true,"uses":true,"members":true,"code_type":true,"singleton":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/dd/DragDropManager.js","linenr":9}],"doc":"<p>DragDropManager is a singleton that tracks the element interaction for\nall DragDrop items in the window.  Generally, you will not call\nthis class directly, but it does have helper methods that could\nbe useful in your DragDrop implementations.</p>\n","aliases":{},"alternateClassNames":["Ext.dd.DragDropMgr","Ext.dd.DDM"],"extends":"Ext.Base","mixins":[],"requires":["Ext.util.Region"],"uses":["Ext.tip.QuickTipManager"],"members":[{"tagname":"property","name":"$className","autodetected":{"inheritdoc":true,"static":true,"inheritable":true,"linenr":true,"type":true,"default":true,"readonly":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/class/Base.js","linenr":1199}],"doc":"\n","private":true,"inheritdoc":null,"static":null,"inheritable":null,"linenr":null,"type":"String","default":"'Ext.Base'","readonly":null,"id":"property-S-className","owner":"Ext.Base","short_doc":" ...","html_type":"<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>"},{"tagname":"property","name":"$configPrefixed","autodetected":{"inheritdoc":true,"static":true,"inheritable":true,"linenr":true,"default":true,"readonly":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/class/Base.js","linenr":1220}],"doc":"<p>The value <code>true</code> causes <code>config</code> values to be stored on instances using a\nproperty name prefixed with an underscore (\"_\") character. A value of <code>false</code>\nstores <code>config</code> values as properties using their exact name (no prefix).</p>\n","type":"Boolean","default":"true","properties":null,"private":true,"since":"5.0.0","inheritdoc":null,"static":null,"inheritable":null,"linenr":null,"readonly":null,"id":"property-S-configPrefixed","owner":"Ext.Base","overrides":[{"name":"$configPrefixed","owner":"Ext.Component","link":"<a href=\"#!/api/Ext.Component-property-S-configPrefixed\" rel=\"Ext.Component-property-S-configPrefixed\" class=\"docClass\">Ext.Component.$configPrefixed</a>"},{"name":"$configPrefixed","owner":"Ext.layout.Layout","link":"<a href=\"#!/api/Ext.layout.Layout-property-S-configPrefixed\" rel=\"Ext.layout.Layout-property-S-configPrefixed\" class=\"docClass\">Ext.layout.Layout.$configPrefixed</a>"},{"name":"$configPrefixed","owner":"Ext.data.AbstractStore","link":"<a href=\"#!/api/Ext.data.AbstractStore-property-S-configPrefixed\" rel=\"Ext.data.AbstractStore-property-S-configPrefixed\" class=\"docClass\">Ext.data.AbstractStore.$configPrefixed</a>"},{"name":"$configPrefixed","owner":"Ext.plugin.Abstract","link":"<a href=\"#!/api/Ext.plugin.Abstract-property-S-configPrefixed\" rel=\"Ext.plugin.Abstract-property-S-configPrefixed\" class=\"docClass\">Ext.plugin.Abstract.$configPrefixed</a>"},{"name":"$configPrefixed","owner":"Ext.layout.container.boxOverflow.None","link":"<a href=\"#!/api/Ext.layout.container.boxOverflow.None-property-S-configPrefixed\" rel=\"Ext.layout.container.boxOverflow.None-property-S-configPrefixed\" class=\"docClass\">Ext.layout.container.boxOverflow.None.$configPrefixed</a>"}],"short_doc":"The value true causes config values to be stored on instances using a\nproperty name prefixed with an underscore (\"_\")...","html_type":"<a href=\"#!/api/Boolean\" rel=\"Boolean\" class=\"docClass\">Boolean</a>"},{"tagname":"property","name":"$configStrict","autodetected":{"inheritdoc":true,"static":true,"inheritable":true,"linenr":true,"default":true,"readonly":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/class/Base.js","linenr":1230}],"doc":"<p>The value <code>true</code> instructs the <code>initConfig</code> method to only honor values for\nproperties declared in the <code>config</code> block of a class. When <code>false</code>, properties\nthat are not declared in a <code>config</code> block will be placed on the instance.</p>\n","type":"Boolean","default":"true","properties":null,"private":true,"since":"5.0.0","inheritdoc":null,"static":null,"inheritable":null,"linenr":null,"readonly":null,"id":"property-S-configStrict","owner":"Ext.Base","overrides":[{"name":"$configStrict","owner":"Ext.Component","link":"<a href=\"#!/api/Ext.Component-property-S-configStrict\" rel=\"Ext.Component-property-S-configStrict\" class=\"docClass\">Ext.Component.$configStrict</a>"},{"name":"$configStrict","owner":"Ext.layout.Layout","link":"<a href=\"#!/api/Ext.layout.Layout-property-S-configStrict\" rel=\"Ext.layout.Layout-property-S-configStrict\" class=\"docClass\">Ext.layout.Layout.$configStrict</a>"},{"name":"$configStrict","owner":"Ext.data.AbstractStore","link":"<a href=\"#!/api/Ext.data.AbstractStore-property-S-configStrict\" rel=\"Ext.data.AbstractStore-property-S-configStrict\" class=\"docClass\">Ext.data.AbstractStore.$configStrict</a>"},{"name":"$configStrict","owner":"Ext.plugin.Abstract","link":"<a href=\"#!/api/Ext.plugin.Abstract-property-S-configStrict\" rel=\"Ext.plugin.Abstract-property-S-configStrict\" class=\"docClass\">Ext.plugin.Abstract.$configStrict</a>"},{"name":"$configStrict","owner":"Ext.layout.container.boxOverflow.None","link":"<a href=\"#!/api/Ext.layout.container.boxOverflow.None-property-S-configStrict\" rel=\"Ext.layout.container.boxOverflow.None-property-S-configStrict\" class=\"docClass\">Ext.layout.container.boxOverflow.None.$configStrict</a>"},{"name":"$configStrict","owner":"Ext.Widget","link":"<a href=\"#!/api/Ext.Widget-property-S-configStrict\" rel=\"Ext.Widget-property-S-configStrict\" class=\"docClass\">Ext.Widget.$configStrict</a>"}],"short_doc":"The value true instructs the initConfig method to only honor values for\nproperties declared in the config block of a ...","html_type":"<a href=\"#!/api/Boolean\" rel=\"Boolean\" class=\"docClass\">Boolean</a>"},{"tagname":"property","name":"$configTransforms","autodetected":{"inheritdoc":true,"static":true,"inheritable":true,"linenr":true,"default":true,"readonly":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/class/Base.js","linenr":1202}],"doc":"<p>A prototype-chained object storing transform method names and priorities stored\non the class prototype. On first instantiation, this object is converted into\nan array that is sorted by priority and stored on the constructor.</p>\n","type":"Object/Array","default":"{}","properties":null,"private":true,"inheritdoc":null,"static":null,"inheritable":null,"linenr":null,"readonly":null,"id":"property-S-configTransforms","owner":"Ext.Base","short_doc":"A prototype-chained object storing transform method names and priorities stored\non the class prototype. ...","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>/<a href=\"#!/api/Array\" rel=\"Array\" class=\"docClass\">Array</a>"},{"tagname":"property","name":"INTERSECT","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"default":true,"readonly":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/dd/DragDropManager.js","linenr":121}],"doc":"<p>In intersect mode, drag and drop interaction is defined by the\noverlap of two or more drag and drop objects.</p>\n","type":"Number","default":"1","properties":null,"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"readonly":null,"id":"property-INTERSECT","owner":"Ext.dd.DragDropManager","short_doc":"In intersect mode, drag and drop interaction is defined by the\noverlap of two or more drag and drop objects. ...","html_type":"<a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a>"},{"tagname":"property","name":"POINT","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"default":true,"readonly":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/dd/DragDropManager.js","linenr":114}],"doc":"<p>In point mode, drag and drop interaction is defined by the\nlocation of the cursor during the drag/drop</p>\n","type":"Number","default":"0","properties":null,"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"readonly":null,"id":"property-POINT","owner":"Ext.dd.DragDropManager","short_doc":"In point mode, drag and drop interaction is defined by the\nlocation of the cursor during the drag/drop ...","html_type":"<a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a>"},{"tagname":"property","name":"clearPropertiesOnDestroy","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"readonly":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/class/Base.js","linenr":1264}],"doc":"<p>Setting this property to <code>false</code> will prevent nulling object references\non a Class instance after destruction. Setting this to <code>\"async\"</code> will delay\nthe clearing for approx 50ms.</p>\n","type":"Boolean/\"async\"","default":"true","properties":null,"protected":true,"since":"6.2.0","inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"readonly":null,"id":"property-clearPropertiesOnDestroy","owner":"Ext.Base","overrides":[{"name":"clearPropertiesOnDestroy","owner":"Ext.Component","link":"<a href=\"#!/api/Ext.Component-property-clearPropertiesOnDestroy\" rel=\"Ext.Component-property-clearPropertiesOnDestroy\" class=\"docClass\">Ext.Component.clearPropertiesOnDestroy</a>"},{"name":"clearPropertiesOnDestroy","owner":"Ext.Widget","link":"<a href=\"#!/api/Ext.Widget-property-clearPropertiesOnDestroy\" rel=\"Ext.Widget-property-clearPropertiesOnDestroy\" class=\"docClass\">Ext.Widget.clearPropertiesOnDestroy</a>"}],"short_doc":"Setting this property to false will prevent nulling object references\non a Class instance after destruction. ...","html_type":"<a href=\"#!/api/Boolean\" rel=\"Boolean\" class=\"docClass\">Boolean</a>/\"async\""},{"tagname":"property","name":"clearPrototypeOnDestroy","autodetected":{"inheritdoc":true,"static":true,"inheritable":true,"linenr":true,"readonly":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/class/Base.js","linenr":1274}],"doc":"<p>Setting this property to <code>true</code> will result in setting the object's\nprototype to <code>null</code> after the destruction sequence is fully completed.\nAfter that, most attempts at calling methods on the object instance\nwill result in \"method not defined\" exception. This can be very helpful\nwith tracking down otherwise hard to find bugs like runaway Ajax requests,\ntimed functions not cleared on destruction, etc.</p>\n\n<p>Note that this option can only work in browsers that support <code>Object.setPrototypeOf</code>\nmethod, and is only available in debugging mode.</p>\n","type":"Boolean","default":"false","properties":null,"private":true,"since":"6.2.0","inheritdoc":null,"static":null,"inheritable":null,"linenr":null,"readonly":null,"id":"property-clearPrototypeOnDestroy","owner":"Ext.Base","short_doc":"Setting this property to true will result in setting the object's\nprototype to null after the destruction sequence is...","html_type":"<a href=\"#!/api/Boolean\" rel=\"Boolean\" class=\"docClass\">Boolean</a>"},{"tagname":"property","name":"clickPixelThresh","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"default":true,"readonly":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/dd/DragDropManager.js","linenr":244}],"doc":"<p>The number of pixels that the mouse needs to move after the\nmousedown before the drag is initiated.  Default=8;\ndefaults to the same value used in the LongPress gesture so that drag cannot be\ninitiated if there is a possible pending longpress</p>\n","type":"Number","default":"8","properties":null,"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"readonly":null,"id":"property-clickPixelThresh","owner":"Ext.dd.DragDropManager","short_doc":"The number of pixels that the mouse needs to move after the\nmousedown before the drag is initiated. ...","html_type":"<a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a>"},{"tagname":"property","name":"clickTimeout","autodetected":{"inheritdoc":true,"static":true,"inheritable":true,"linenr":true,"default":true,"readonly":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/dd/DragDropManager.js","linenr":261}],"doc":"<p>Timeout used for the click time threshold</p>\n","type":"Object","default":null,"properties":null,"private":true,"inheritdoc":null,"static":null,"inheritable":null,"linenr":null,"readonly":null,"id":"property-clickTimeout","owner":"Ext.dd.DragDropManager","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"},{"tagname":"property","name":"currentPoint","autodetected":{"tagname":"property","inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"type":true,"default":true,"readonly":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/dd/DragDropManager.js","linenr":154}],"doc":"\n","inheritdoc":null,"static":null,"private":true,"inheritable":null,"linenr":154,"type":"Object","default":null,"readonly":null,"id":"property-currentPoint","owner":"Ext.dd.DragDropManager","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"},{"tagname":"property","name":"deltaX","autodetected":{"inheritdoc":true,"static":true,"inheritable":true,"linenr":true,"default":true,"readonly":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/dd/DragDropManager.js","linenr":57}],"doc":"<p>the X distance between the cursor and the object being dragged</p>\n","type":"Number","default":"0","properties":null,"private":true,"inheritdoc":null,"static":null,"inheritable":null,"linenr":null,"readonly":null,"id":"property-deltaX","owner":"Ext.dd.DragDropManager","short_doc":"the X distance between the cursor and the object being dragged ...","html_type":"<a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a>"},{"tagname":"property","name":"deltaY","autodetected":{"inheritdoc":true,"static":true,"inheritable":true,"linenr":true,"default":true,"readonly":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/dd/DragDropManager.js","linenr":64}],"doc":"<p>the Y distance between the cursor and the object being dragged</p>\n","type":"Number","default":"0","properties":null,"private":true,"inheritdoc":null,"static":null,"inheritable":null,"linenr":null,"readonly":null,"id":"property-deltaY","owner":"Ext.dd.DragDropManager","short_doc":"the Y distance between the cursor and the object being dragged ...","html_type":"<a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a>"},{"tagname":"property","name":"destroyed","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"default":true,"readonly":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/class/Base.js","linenr":1258}],"doc":"<p>This property is set to <code>true</code> after the <code>destroy</code> method is called.</p>\n","type":"Boolean","default":"false","properties":null,"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"readonly":null,"id":"property-destroyed","owner":"Ext.Base","short_doc":"This property is set to true after the destroy method is called. ...","html_type":"<a href=\"#!/api/Boolean\" rel=\"Boolean\" class=\"docClass\">Boolean</a>"},{"tagname":"property","name":"dragCls","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"default":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/dd/DragDropManager.js","linenr":147}],"doc":"<p>Class to add to the <a href=\"#!/api/Ext.dd.DragDrop-method-getDragEl\" rel=\"Ext.dd.DragDrop-method-getDragEl\" class=\"docClass\">dragged element</a> of a DragDrop instance.</p>\n","type":"String","default":"Ext.baseCSSPrefix + 'dd-drag-current'","properties":null,"readonly":true,"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"id":"property-dragCls","owner":"Ext.dd.DragDropManager","short_doc":"Class to add to the dragged element of a DragDrop instance. ...","html_type":"<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>"},{"tagname":"property","name":"dragCurrent","autodetected":{"inheritdoc":true,"static":true,"inheritable":true,"linenr":true,"default":true,"readonly":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/dd/DragDropManager.js","linenr":43}],"doc":"<p>the DragDrop object that is currently being dragged</p>\n","type":"Ext.dd.DragDrop","default":null,"properties":null,"private":true,"inheritdoc":null,"static":null,"inheritable":null,"linenr":null,"readonly":null,"id":"property-dragCurrent","owner":"Ext.dd.DragDropManager","html_type":"<a href=\"#!/api/Ext.dd.DragDrop\" rel=\"Ext.dd.DragDrop\" class=\"docClass\">Ext.dd.DragDrop</a>"},{"tagname":"property","name":"dragOvers","autodetected":{"inheritdoc":true,"static":true,"inheritable":true,"linenr":true,"default":true,"readonly":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/dd/DragDropManager.js","linenr":50}],"doc":"<p>the DragDrop object(s) that are being hovered over</p>\n","type":"Ext.dd.DragDrop[]","default":"{}","properties":null,"private":true,"inheritdoc":null,"static":null,"inheritable":null,"linenr":null,"readonly":null,"id":"property-dragOvers","owner":"Ext.dd.DragDropManager","short_doc":"the DragDrop object(s) that are being hovered over ...","html_type":"<a href=\"#!/api/Ext.dd.DragDrop\" rel=\"Ext.dd.DragDrop\" class=\"docClass\">Ext.dd.DragDrop</a>[]"},{"tagname":"property","name":"dragThreshMet","autodetected":{"inheritdoc":true,"static":true,"inheritable":true,"linenr":true,"default":true,"readonly":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/dd/DragDropManager.js","linenr":253}],"doc":"<p>Flag that indicates that either the drag pixel threshold or the\nmousdown time threshold has been met</p>\n","type":"Boolean","default":"false","properties":null,"private":true,"inheritdoc":null,"static":null,"inheritable":null,"linenr":null,"readonly":null,"id":"property-dragThreshMet","owner":"Ext.dd.DragDropManager","short_doc":"Flag that indicates that either the drag pixel threshold or the\nmousdown time threshold has been met ...","html_type":"<a href=\"#!/api/Boolean\" rel=\"Boolean\" class=\"docClass\">Boolean</a>"},{"tagname":"property","name":"elementCache","autodetected":{"inheritdoc":true,"static":true,"inheritable":true,"linenr":true,"default":true,"readonly":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/dd/DragDropManager.js","linenr":1311}],"doc":"<p>A cache of DOM elements</p>\n","type":"Object","default":"{}","properties":null,"private":true,"inheritdoc":null,"static":null,"inheritable":null,"linenr":null,"readonly":null,"id":"property-elementCache","owner":"Ext.dd.DragDropManager","short_doc":"A cache of DOM elements ...","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"},{"tagname":"property","name":"handleIds","autodetected":{"inheritdoc":true,"static":true,"inheritable":true,"linenr":true,"default":true,"readonly":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/dd/DragDropManager.js","linenr":34}],"doc":"<p>Array of element ids defined as drag handles.  Used to determine\nif the element that generated the mousedown event is actually the\nhandle and not the html element itself.</p>\n","type":"String[]","default":"{}","properties":null,"private":true,"inheritdoc":null,"static":null,"inheritable":null,"linenr":null,"readonly":null,"id":"property-handleIds","owner":"Ext.dd.DragDropManager","short_doc":"Array of element ids defined as drag handles. ...","html_type":"<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>[]"},{"tagname":"property","name":"ids","autodetected":{"inheritdoc":true,"static":true,"inheritable":true,"linenr":true,"default":true,"readonly":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/dd/DragDropManager.js","linenr":25}],"doc":"<p>Two dimensional Array of registered DragDrop objects.  The first\ndimension is the DragDrop item group, the second the DragDrop\nobject.</p>\n","type":"String[]","default":"{}","properties":null,"private":true,"inheritdoc":null,"static":null,"inheritable":null,"linenr":null,"readonly":null,"id":"property-ids","owner":"Ext.dd.DragDropManager","short_doc":"Two dimensional Array of registered DragDrop objects. ...","html_type":"<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>[]"},{"tagname":"property","name":"initialized","autodetected":{"inheritdoc":true,"static":true,"inheritable":true,"linenr":true,"type":true,"default":true,"readonly":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/dd/DragDropManager.js","linenr":91}],"doc":"<p>Internal flag that is set to true when drag and drop has been\ninitialized</p>\n","default":"false","properties":null,"private":true,"inheritdoc":null,"static":null,"inheritable":null,"linenr":null,"type":"Boolean","readonly":null,"id":"property-initialized","owner":"Ext.dd.DragDropManager","short_doc":"Internal flag that is set to true when drag and drop has been\ninitialized ...","html_type":"<a href=\"#!/api/Boolean\" rel=\"Boolean\" class=\"docClass\">Boolean</a>"},{"tagname":"property","name":"isConfiguring","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"default":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/class/Base.js","linenr":1240}],"doc":"<p>This property is set to <code>true</code> during the call to <code>initConfig</code>.</p>\n","type":"Boolean","default":"false","properties":null,"protected":true,"readonly":true,"since":"5.0.0","inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"id":"property-isConfiguring","owner":"Ext.Base","short_doc":"This property is set to true during the call to initConfig. ...","html_type":"<a href=\"#!/api/Boolean\" rel=\"Boolean\" class=\"docClass\">Boolean</a>"},{"tagname":"property","name":"isFirstInstance","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"default":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/class/Base.js","linenr":1249}],"doc":"<p>This property is set to <code>true</code> if this instance is the first of its class.</p>\n","type":"Boolean","default":"false","properties":null,"protected":true,"readonly":true,"since":"5.0.0","inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"id":"property-isFirstInstance","owner":"Ext.Base","short_doc":"This property is set to true if this instance is the first of its class. ...","html_type":"<a href=\"#!/api/Boolean\" rel=\"Boolean\" class=\"docClass\">Boolean</a>"},{"tagname":"property","name":"isInstance","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"default":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/class/Base.js","linenr":1211}],"doc":"<p>This value is <code>true</code> and is used to identify plain objects from instances of\na defined class.</p>\n","type":"Boolean","default":"true","properties":null,"protected":true,"readonly":true,"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"id":"property-isInstance","owner":"Ext.Base","short_doc":"This value is true and is used to identify plain objects from instances of\na defined class. ...","html_type":"<a href=\"#!/api/Boolean\" rel=\"Boolean\" class=\"docClass\">Boolean</a>"},{"tagname":"property","name":"locationCache","autodetected":{"inheritdoc":true,"static":true,"inheritable":true,"linenr":true,"default":true,"readonly":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/dd/DragDropManager.js","linenr":229}],"doc":"<p>Location cache that is set for all drag drop objects when a drag is\ninitiated, cleared when the drag is finished.</p>\n","type":"Object","default":"{}","properties":null,"private":true,"inheritdoc":null,"static":null,"inheritable":null,"linenr":null,"readonly":null,"id":"property-locationCache","owner":"Ext.dd.DragDropManager","short_doc":"Location cache that is set for all drag drop objects when a drag is\ninitiated, cleared when the drag is finished. ...","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"},{"tagname":"property","name":"locked","autodetected":{"inheritdoc":true,"static":true,"inheritable":true,"linenr":true,"type":true,"default":true,"readonly":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/dd/DragDropManager.js","linenr":99}],"doc":"<p>All drag and drop can be disabled.</p>\n","default":"false","properties":null,"private":true,"inheritdoc":null,"static":null,"inheritable":null,"linenr":null,"type":"Boolean","readonly":null,"id":"property-locked","owner":"Ext.dd.DragDropManager","short_doc":"All drag and drop can be disabled. ...","html_type":"<a href=\"#!/api/Boolean\" rel=\"Boolean\" class=\"docClass\">Boolean</a>"},{"tagname":"property","name":"mode","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"default":true,"readonly":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/dd/DragDropManager.js","linenr":128}],"doc":"<p>The current drag and drop mode.  Default: POINT</p>\n","type":"Number","default":"0","properties":null,"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"readonly":null,"id":"property-mode","owner":"Ext.dd.DragDropManager","short_doc":"The current drag and drop mode. ...","html_type":"<a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a>"},{"tagname":"property","name":"notifyOccluded","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"readonly":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/dd/DragDropManager.js","linenr":134}],"doc":"<p>This config is only provided to provide old, usually unwanted drag/drop behaviour.</p>\n\n<p>From ExtJS 4.1.0 onwards, when drop targets are contained in floating, absolutely positioned\nelements such as in <a href=\"#!/api/Ext.window.Window\" rel=\"Ext.window.Window\" class=\"docClass\">Windows</a>, which may overlap each other,\n<code>over</code> and <code>drop</code> events are only delivered to the topmost drop target at the mouse position.</p>\n\n<p>If all targets below that in zIndex order should also receive notifications, set\n<code>notifyOccluded</code> to <code>true</code>.</p>\n","type":"Boolean","default":"false","properties":null,"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"readonly":null,"id":"property-notifyOccluded","owner":"Ext.dd.DragDropManager","short_doc":"This config is only provided to provide old, usually unwanted drag/drop behaviour. ...","html_type":"<a href=\"#!/api/Boolean\" rel=\"Boolean\" class=\"docClass\">Boolean</a>"},{"tagname":"property","name":"preventDefault","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"default":true,"readonly":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/dd/DragDropManager.js","linenr":71}],"doc":"<p><code>true</code> to invoke <code>preventDefault()</code> on all events during a drag (may be\nmouse, touch, or pointer events depending on the platform).</p>\n","type":"Boolean","default":"true","properties":null,"deprecated":{"text":"<p>Use <a href=\"#!/api/Ext.Component-cfg-touchAction\" rel=\"Ext.Component-cfg-touchAction\" class=\"docClass\">touchAction</a> or\n<a href=\"#!/api/Ext.dom.Element-method-setTouchAction\" rel=\"Ext.dom.Element-method-setTouchAction\" class=\"docClass\">setTouchAction</a> to prevent specific\ndefault actions during drag</p>\n","version":"6.2.0"},"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"readonly":null,"id":"property-preventDefault","owner":"Ext.dd.DragDropManager","short_doc":"true to invoke preventDefault() on all events during a drag (may be\nmouse, touch, or pointer events depending on the ...","html_type":"<a href=\"#!/api/Boolean\" rel=\"Boolean\" class=\"docClass\">Boolean</a>"},{"tagname":"property","name":"self","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"default":true,"readonly":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/class/Base.js","linenr":1573}],"doc":"<p>Get the reference to the current class from which this object was instantiated. Unlike\n<a href=\"#!/api/Ext.Base-method-statics\" rel=\"Ext.Base-method-statics\" class=\"docClass\">statics</a>, <code>this.self</code> is scope-dependent and it's meant to be used\nfor dynamic inheritance. See <a href=\"#!/api/Ext.Base-method-statics\" rel=\"Ext.Base-method-statics\" class=\"docClass\">statics</a> for a detailed comparison</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('My.Cat', {\n    statics: {\n        speciesName: 'Cat' // My.Cat.speciesName = 'Cat'\n    },\n\n    constructor: function() {\n        alert(this.self.speciesName); // dependent on 'this'\n    },\n\n    clone: function() {\n        return new this.self();\n    }\n});\n\n\n<a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('My.SnowLeopard', {\n    extend: 'My.Cat',\n    statics: {\n        speciesName: 'Snow Leopard' // My.SnowLeopard.speciesName = 'Snow Leopard'\n    }\n});\n\nvar cat = new My.Cat();                     // alerts 'Cat'\nvar snowLeopard = new My.SnowLeopard();     // alerts 'Snow Leopard'\n\nvar clone = snowLeopard.clone();\nalert(<a href=\"#!/api/Ext-method-getClassName\" rel=\"Ext-method-getClassName\" class=\"docClass\">Ext.getClassName</a>(clone));             // alerts 'My.SnowLeopard'\n</code></pre>\n","type":"Ext.Class","default":null,"properties":null,"protected":true,"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"readonly":null,"id":"property-self","owner":"Ext.Base","short_doc":"Get the reference to the current class from which this object was instantiated. ...","html_type":"<a href=\"#!/api/Ext.Class\" rel=\"Ext.Class\" class=\"docClass\">Ext.Class</a>"},{"tagname":"property","name":"startX","autodetected":{"inheritdoc":true,"static":true,"inheritable":true,"linenr":true,"default":true,"readonly":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/dd/DragDropManager.js","linenr":268}],"doc":"<p>The X position of the mousedown event stored for later use when a\ndrag threshold is met.</p>\n","type":"Number","default":"0","properties":null,"private":true,"inheritdoc":null,"static":null,"inheritable":null,"linenr":null,"readonly":null,"id":"property-startX","owner":"Ext.dd.DragDropManager","short_doc":"The X position of the mousedown event stored for later use when a\ndrag threshold is met. ...","html_type":"<a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a>"},{"tagname":"property","name":"startY","autodetected":{"inheritdoc":true,"static":true,"inheritable":true,"linenr":true,"default":true,"readonly":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/dd/DragDropManager.js","linenr":276}],"doc":"<p>The Y position of the mousedown event stored for later use when a\ndrag threshold is met.</p>\n","type":"Number","default":"0","properties":null,"private":true,"inheritdoc":null,"static":null,"inheritable":null,"linenr":null,"readonly":null,"id":"property-startY","owner":"Ext.dd.DragDropManager","short_doc":"The Y position of the mousedown event stored for later use when a\ndrag threshold is met. ...","html_type":"<a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a>"},{"tagname":"property","name":"stopPropagation","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"default":true,"readonly":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/dd/DragDropManager.js","linenr":82}],"doc":"<p><code>true</code> to invoke <code>stopPropagation()</code> on all events during a drag (may be\nmouse, touch, or pointer events depending on the platform).</p>\n","type":"Boolean","default":"false","properties":null,"deprecated":{"text":"<p>This property is deprecated</p>\n","version":"6.2.0"},"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"readonly":null,"id":"property-stopPropagation","owner":"Ext.dd.DragDropManager","short_doc":"true to invoke stopPropagation() on all events during a drag (may be\nmouse, touch, or pointer events depending on the...","html_type":"<a href=\"#!/api/Boolean\" rel=\"Boolean\" class=\"docClass\">Boolean</a>"},{"tagname":"property","name":"useCache","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"default":true,"readonly":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/dd/DragDropManager.js","linenr":237}],"doc":"<p>Set useCache to false if you want to force object the lookup of each\ndrag and drop linked element constantly during a drag.</p>\n","type":"Boolean","default":"true","properties":null,"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"readonly":null,"id":"property-useCache","owner":"Ext.dd.DragDropManager","short_doc":"Set useCache to false if you want to force object the lookup of each\ndrag and drop linked element constantly during a...","html_type":"<a href=\"#!/api/Boolean\" rel=\"Boolean\" class=\"docClass\">Boolean</a>"},{"tagname":"property","name":"$onExtended","autodetected":{"inheritdoc":true,"linenr":true,"type":true,"default":true,"readonly":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/class/Base.js","linenr":445}],"doc":"\n","private":true,"static":true,"inheritable":true,"inheritdoc":null,"linenr":null,"type":"Array","default":"[]","readonly":null,"id":"static-property-S-onExtended","owner":"Ext.Base","short_doc":" ...","html_type":"<a href=\"#!/api/Array\" rel=\"Array\" class=\"docClass\">Array</a>"},{"tagname":"method","name":"_execOnAll","autodetected":{"inheritdoc":true,"static":true,"inheritable":true,"linenr":true,"params":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/dd/DragDropManager.js","linenr":156}],"doc":"<p>Runs method on all drag and drop objects</p>\n","private":true,"inheritdoc":null,"static":null,"inheritable":null,"linenr":null,"params":[{"name":"sMethod","type":"Object","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"},{"name":"args","type":"Object","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"}],"chainable":false,"fires":[],"method_calls":["isTypeOfDD"],"id":"method-_execOnAll","owner":"Ext.dd.DragDropManager","short_doc":"Runs method on all drag and drop objects ..."},{"tagname":"method","name":"_onResize","autodetected":{"inheritdoc":true,"static":true,"inheritable":true,"linenr":true,"params":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/dd/DragDropManager.js","linenr":199}],"doc":"<p>Reset constraints on all drag and drop objs</p>\n","private":true,"inheritdoc":null,"static":null,"inheritable":null,"linenr":null,"params":[{"name":"e","type":"Object","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"}],"chainable":false,"fires":[],"method_calls":["_execOnAll"],"id":"method-_onResize","owner":"Ext.dd.DragDropManager","short_doc":"Reset constraints on all drag and drop objs ..."},{"tagname":"method","name":"_onUnload","autodetected":{"inheritdoc":true,"static":true,"inheritable":true,"linenr":true,"params":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/dd/DragDropManager.js","linenr":1276}],"doc":"<p>unload event handler</p>\n","private":true,"inheritdoc":null,"static":null,"inheritable":null,"linenr":null,"params":[{"name":"e","type":"Object","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"},{"name":"me","type":"Object","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"}],"chainable":false,"fires":null,"method_calls":null,"id":"method-_onUnload","owner":"Ext.dd.DragDropManager","short_doc":"unload event handler ..."},{"tagname":"method","name":"_remove","autodetected":{"inheritdoc":true,"static":true,"inheritable":true,"linenr":true,"params":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/dd/DragDropManager.js","linenr":321}],"doc":"<p>Unregisters a drag and drop item.  This is executed in\nDragDrop.unreg, use that method instead of calling this directly.</p>\n","private":true,"inheritdoc":null,"static":null,"inheritable":null,"linenr":null,"params":[{"name":"oDD","type":"Object","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"},{"name":"clearGroup","type":"Object","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"}],"chainable":false,"fires":null,"method_calls":null,"id":"method-_remove","owner":"Ext.dd.DragDropManager","short_doc":"Unregisters a drag and drop item. ..."},{"tagname":"method","name":"addDeprecations","autodetected":{"inheritdoc":true,"static":true,"inheritable":true,"linenr":true,"params":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/class/Base.js","linenr":159}],"doc":"<p>This method applies a versioned, deprecation declaration to this class. This\nis typically called by the <code>deprecated</code> config.</p>\n","private":true,"inheritdoc":null,"static":null,"inheritable":null,"linenr":null,"params":[{"name":"deprecations","type":"Object","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"}],"chainable":false,"fires":[],"method_calls":["getConfigurator"],"id":"method-addDeprecations","owner":"Ext.Base","short_doc":"This method applies a versioned, deprecation declaration to this class. ..."},{"tagname":"method","name":"addListeners","autodetected":{"inheritdoc":true,"static":true,"inheritable":true,"linenr":true,"params":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/dd/DragDropManager.js","linenr":183}],"doc":"<p>Drag and drop initialization.  Sets up the global event handlers</p>\n","private":true,"inheritdoc":null,"static":null,"inheritable":null,"linenr":null,"params":[],"chainable":false,"fires":[],"method_calls":["init"],"id":"method-addListeners","owner":"Ext.dd.DragDropManager","short_doc":"Drag and drop initialization. ..."},{"tagname":"method","name":"byZIndex","autodetected":{"inheritdoc":true,"static":true,"inheritable":true,"linenr":true,"params":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/dd/DragDropManager.js","linenr":1051}],"doc":"<p>Utility method to pass to <a href=\"#!/api/Ext.Array-method-sort\" rel=\"Ext.Array-method-sort\" class=\"docClass\">Ext.Array.sort</a> when sorting potential drop targets\nby z-index.</p>\n","private":true,"inheritdoc":null,"static":null,"inheritable":null,"linenr":null,"params":[{"name":"d1","type":"Object","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"},{"name":"d2","type":"Object","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"}],"chainable":false,"fires":null,"method_calls":null,"id":"method-byZIndex","owner":"Ext.dd.DragDropManager","short_doc":"Utility method to pass to Ext.Array.sort when sorting potential drop targets\nby z-index. ..."},{"tagname":"method","name":"callOverridden","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/class/Base.js","linenr":2074}],"doc":"<p>Call the original method that was previously overridden with <a href=\"#!/api/Ext.Base-static-method-override\" rel=\"Ext.Base-static-method-override\" class=\"docClass\">override</a></p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('My.Cat', {\n    constructor: function() {\n        alert(\"I'm a cat!\");\n    }\n});\n\nMy.Cat.override({\n    constructor: function() {\n        alert(\"I'm going to be a cat!\");\n\n        this.callOverridden();\n\n        alert(\"Meeeeoooowwww\");\n    }\n});\n\nvar kitty = new My.Cat(); // alerts \"I'm going to be a cat!\"\n                          // alerts \"I'm a cat!\"\n                          // alerts \"Meeeeoooowwww\"\n</code></pre>\n","params":[{"tagname":"params","type":"Array/Arguments","name":"args","doc":"<p>The arguments, either an array or the <code>arguments</code> object\nfrom the current method, for example: <code>this.callOverridden(arguments)</code></p>\n","html_type":"<a href=\"#!/api/Array\" rel=\"Array\" class=\"docClass\">Array</a>/Arguments"}],"return":{"type":"Object","name":"return","doc":"<p>Returns the result of calling the overridden method</p>\n","properties":null,"html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"},"deprecated":{"text":"<p>Use <a href=\"#!/api/Ext.Base-method-callParent\" rel=\"Ext.Base-method-callParent\" class=\"docClass\">callParent</a> instead.</p>\n","version":"4.1.0"},"protected":true,"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":null,"fires":null,"method_calls":null,"id":"method-callOverridden","owner":"Ext.Base","short_doc":"Call the original method that was previously overridden with override\n\nExt.define('My.Cat', {\n    constructor: functi..."},{"tagname":"method","name":"callParent","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/class/Base.js","linenr":1361}],"doc":"<p>Call the \"parent\" method of the current method. That is the method previously\noverridden by derivation or by an override (see <a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>).</p>\n\n<pre><code> <a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('My.Base', {\n     constructor: function(x) {\n         this.x = x;\n     },\n\n     statics: {\n         method: function(x) {\n             return x;\n         }\n     }\n });\n\n <a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('My.Derived', {\n     extend: 'My.Base',\n\n     constructor: function() {\n         this.callParent([21]);\n     }\n });\n\n var obj = new My.Derived();\n\n alert(obj.x);  // alerts 21\n</code></pre>\n\n<p>This can be used with an override as follows:</p>\n\n<pre><code> <a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('My.DerivedOverride', {\n     override: 'My.Derived',\n\n     constructor: function(x) {\n         this.callParent([x*2]); // calls original My.Derived constructor\n     }\n });\n\n var obj = new My.Derived();\n\n alert(obj.x);  // now alerts 42\n</code></pre>\n\n<p>This also works with static and private methods.</p>\n\n<pre><code> <a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('My.Derived2', {\n     extend: 'My.Base',\n\n     // privates: {\n     statics: {\n         method: function(x) {\n             return this.callParent([x*2]); // calls My.Base.method\n         }\n     }\n });\n\n alert(My.Base.method(10));     // alerts 10\n alert(My.Derived2.method(10)); // alerts 20\n</code></pre>\n\n<p>Lastly, it also works with overridden static methods.</p>\n\n<pre><code> <a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('My.Derived2Override', {\n     override: 'My.Derived2',\n\n     // privates: {\n     statics: {\n         method: function(x) {\n             return this.callParent([x*2]); // calls My.Derived2.method\n         }\n     }\n });\n\n alert(My.Derived2.method(10); // now alerts 40\n</code></pre>\n\n<p>To override a method and replace it and also call the superclass method, use\n<a href=\"#!/api/Ext.Base-method-callSuper\" rel=\"Ext.Base-method-callSuper\" class=\"docClass\">callSuper</a>. This is often done to patch a method to fix a bug.</p>\n","protected":true,"params":[{"tagname":"params","type":"Array/Arguments","name":"args","doc":"<p>The arguments, either an array or the <code>arguments</code> object\nfrom the current method, for example: <code>this.callParent(arguments)</code></p>\n","html_type":"<a href=\"#!/api/Array\" rel=\"Array\" class=\"docClass\">Array</a>/Arguments"}],"return":{"type":"Object","name":"return","doc":"<p>Returns the result of calling the parent method</p>\n","properties":null,"html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"},"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"method-callParent","owner":"Ext.Base","short_doc":"Call the \"parent\" method of the current method. ..."},{"tagname":"method","name":"callSuper","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/class/Base.js","linenr":1482}],"doc":"<p>This method is used by an <strong>override</strong> to call the superclass method but\nbypass any overridden method. This is often done to \"patch\" a method that\ncontains a bug but for whatever reason cannot be fixed directly.</p>\n\n<p>Consider:</p>\n\n<pre><code> <a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Ext.some.Class', {\n     method: function() {\n         console.log('Good');\n     }\n });\n\n <a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Ext.some.DerivedClass', {\n     extend: 'Ext.some.Class',\n\n     method: function() {\n         console.log('Bad');\n\n         // ... logic but with a bug ...\n\n         this.callParent();\n     }\n });\n</code></pre>\n\n<p>To patch the bug in <code>Ext.some.DerivedClass.method</code>, the typical solution is to create an\noverride:</p>\n\n<pre><code> <a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('App.patches.DerivedClass', {\n     override: 'Ext.some.DerivedClass',\n\n     method: function() {\n         console.log('Fixed');\n\n         // ... logic but with bug fixed ...\n\n         this.callSuper();\n     }\n });\n</code></pre>\n\n<p>The patch method cannot use <a href=\"#!/api/Ext.Base-method-callParent\" rel=\"Ext.Base-method-callParent\" class=\"docClass\">callParent</a> to call the superclass\n<code>method</code> since that would call the overridden method containing the bug. In\nother words, the above patch would only produce \"Fixed\" then \"Good\" in the\nconsole log, whereas, using <code>callParent</code> would produce \"Fixed\" then \"Bad\"\nthen \"Good\".</p>\n","protected":true,"params":[{"tagname":"params","type":"Array/Arguments","name":"args","doc":"<p>The arguments, either an array or the <code>arguments</code> object\nfrom the current method, for example: <code>this.callSuper(arguments)</code></p>\n","html_type":"<a href=\"#!/api/Array\" rel=\"Array\" class=\"docClass\">Array</a>/Arguments"}],"return":{"type":"Object","name":"return","doc":"<p>Returns the result of calling the superclass method</p>\n","properties":null,"html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"},"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"method-callSuper","owner":"Ext.Base","short_doc":"This method is used by an override to call the superclass method but\nbypass any overridden method. ..."},{"tagname":"method","name":"destroy","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"params":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/class/Base.js","linenr":2030}],"doc":"<p>This method is called to cleanup an object and its resources. After calling\nthis method, the object should not be used any further in any way, including\naccess to its methods and properties.</p>\n\n<p>To prevent potential memory leaks, all object references will be nulled\nat the end of destruction sequence, unless <a href=\"#!/api/Ext.Base-property-clearPropertiesOnDestroy\" rel=\"Ext.Base-property-clearPropertiesOnDestroy\" class=\"docClass\">clearPropertiesOnDestroy</a>\nis set to <code>false</code>.</p>\n","inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"params":[],"chainable":false,"fires":[],"method_calls":["$reap","unlink"],"id":"method-destroy","owner":"Ext.Base","overrides":[{"name":"destroy","owner":"Ext.mixin.Observable","link":"<a href=\"#!/api/Ext.mixin.Observable-method-destroy\" rel=\"Ext.mixin.Observable-method-destroy\" class=\"docClass\">Ext.mixin.Observable.destroy</a>"},{"name":"destroy","owner":"Ext.util.ElementContainer","link":"<a href=\"#!/api/Ext.util.ElementContainer-method-destroy\" rel=\"Ext.util.ElementContainer-method-destroy\" class=\"docClass\">Ext.util.ElementContainer.destroy</a>"},{"name":"destroy","owner":"Ext.state.Stateful","link":"<a href=\"#!/api/Ext.state.Stateful-method-destroy\" rel=\"Ext.state.Stateful-method-destroy\" class=\"docClass\">Ext.state.Stateful.destroy</a>"},{"name":"destroy","owner":"Ext.Component","link":"<a href=\"#!/api/Ext.Component-method-destroy\" rel=\"Ext.Component-method-destroy\" class=\"docClass\">Ext.Component.destroy</a>"},{"name":"destroy","owner":"Ext.data.AbstractStore","link":"<a href=\"#!/api/Ext.data.AbstractStore-method-destroy\" rel=\"Ext.data.AbstractStore-method-destroy\" class=\"docClass\">Ext.data.AbstractStore.destroy</a>"},{"name":"destroy","owner":"Ext.util.AbstractMixedCollection","link":"<a href=\"#!/api/Ext.util.AbstractMixedCollection-method-destroy\" rel=\"Ext.util.AbstractMixedCollection-method-destroy\" class=\"docClass\">Ext.util.AbstractMixedCollection.destroy</a>"},{"name":"destroy","owner":"Ext.app.BaseController","link":"<a href=\"#!/api/Ext.app.BaseController-method-destroy\" rel=\"Ext.app.BaseController-method-destroy\" class=\"docClass\">Ext.app.BaseController.destroy</a>"},{"name":"destroy","owner":"Ext.plugin.Abstract","link":"<a href=\"#!/api/Ext.plugin.Abstract-method-destroy\" rel=\"Ext.plugin.Abstract-method-destroy\" class=\"docClass\">Ext.plugin.Abstract.destroy</a>"},{"name":"destroy","owner":"Ext.Widget","link":"<a href=\"#!/api/Ext.Widget-method-destroy\" rel=\"Ext.Widget-method-destroy\" class=\"docClass\">Ext.Widget.destroy</a>"}],"short_doc":"This method is called to cleanup an object and its resources. ..."},{"tagname":"method","name":"destroyMembers","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/class/Base.js","linenr":1706}],"doc":"<p>Destroys member properties by name.</p>\n\n<p>If a property name is the name of a <em>config</em>, the getter is <em>not</em> invoked, so\nif the config has not been initialized, nothing will be done.</p>\n\n<p>The property will be destroyed, and the corrected name (if the property is a <em>config</em>\nand config names are prefixed) will set to <code>null</code> in this object's dictionary.</p>\n","params":[{"tagname":"params","type":"String...","name":"args","doc":"<p>One or more names of the properties to destroy and remove from\nthe object.</p>\n","html_type":"<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>..."}],"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":[],"method_calls":["hasOwnProperty"],"id":"method-destroyMembers","owner":"Ext.Base","short_doc":"Destroys member properties by name. ..."},{"tagname":"method","name":"elementFromPoint","autodetected":{"inheritdoc":true,"static":true,"inheritable":true,"linenr":true,"params":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/dd/DragDropManager.js","linenr":1006}],"doc":"<p>Wrap <a href=\"#!/api/Ext.dom.Element-static-method-fromPagePoint\" rel=\"Ext.dom.Element-static-method-fromPagePoint\" class=\"docClass\">Ext.Element.fromPagePoint</a>.</p>\n\n<p>This is because in RTL mode we need to reverse any RTLification of the X coordinate\nbecause document.elementFromPoint uses LTR.</p>\n","private":true,"inheritdoc":null,"static":null,"inheritable":null,"linenr":null,"params":[{"name":"x","type":"Object","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"},{"name":"y","type":"Object","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"}],"chainable":false,"fires":null,"method_calls":null,"id":"method-elementFromPoint","owner":"Ext.dd.DragDropManager","short_doc":"Wrap Ext.Element.fromPagePoint. ..."},{"tagname":"method","name":"fireEvents","autodetected":{"inheritdoc":true,"static":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/dd/DragDropManager.js","linenr":758}],"doc":"<p>Iterates over all of the DragDrop elements to find ones we are\nhovering over or dropping on</p>\n","params":[{"tagname":"params","type":"Event","name":"e","doc":"<p>the event</p>\n","html_type":"Event"},{"tagname":"params","type":"Boolean","name":"isDrop","doc":"<p>is this a drop op or a mouseover op?</p>\n","html_type":"<a href=\"#!/api/Boolean\" rel=\"Boolean\" class=\"docClass\">Boolean</a>"}],"private":true,"inheritdoc":null,"static":null,"inheritable":null,"linenr":null,"chainable":false,"fires":[],"method_calls":["elementFromPoint","getZIndex","isOverTarget","isTypeOfDD"],"id":"method-fireEvents","owner":"Ext.dd.DragDropManager","short_doc":"Iterates over all of the DragDrop elements to find ones we are\nhovering over or dropping on ..."},{"tagname":"method","name":"getBestMatch","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/dd/DragDropManager.js","linenr":1060}],"doc":"<p>Helper function for getting the best match from the list of drag\nand drop objects returned by the drag and drop events when we are\nin INTERSECT mode.  It returns either the first object that the\ncursor is over, or the object that has the greatest overlap with\nthe dragged element.</p>\n","params":[{"tagname":"params","type":"Ext.dd.DragDrop[]","name":"dds","doc":"<p>The array of drag and drop objects\ntargeted</p>\n","html_type":"<a href=\"#!/api/Ext.dd.DragDrop\" rel=\"Ext.dd.DragDrop\" class=\"docClass\">Ext.dd.DragDrop</a>[]"}],"return":{"type":"Ext.dd.DragDrop","name":"return","doc":"<p>The best single match</p>\n","properties":null,"html_type":"<a href=\"#!/api/Ext.dd.DragDrop\" rel=\"Ext.dd.DragDrop\" class=\"docClass\">Ext.dd.DragDrop</a>"},"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"method-getBestMatch","owner":"Ext.dd.DragDropManager","short_doc":"Helper function for getting the best match from the list of drag\nand drop objects returned by the drag and drop event..."},{"tagname":"method","name":"getConfig","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/class/Base.js","linenr":1657}],"doc":"<p>Returns a specified config property value. If the name parameter is not passed,\nall current configuration options will be returned as key value pairs.</p>\n","params":[{"tagname":"params","type":"String","name":"name","optional":true,"doc":"<p>The name of the config property to get.</p>\n","html_type":"<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>"},{"tagname":"params","type":"Boolean","name":"peek","default":"false","optional":true,"doc":"<p><code>true</code> to peek at the raw value without calling the getter.</p>\n","html_type":"<a href=\"#!/api/Boolean\" rel=\"Boolean\" class=\"docClass\">Boolean</a>"},{"tagname":"params","type":"Boolean","name":"ifInitialized","default":"false","optional":true,"doc":"<p><code>true</code> to only return the initialized property\nvalue, not the raw config value, and <em>not</em> to trigger initialization. Returns\n<code>undefined</code> if the property has not yet been initialized.</p>\n","html_type":"<a href=\"#!/api/Boolean\" rel=\"Boolean\" class=\"docClass\">Boolean</a>"}],"return":{"type":"Object","name":"return","doc":"<p>The config property value.</p>\n","properties":null,"html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"},"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":[],"method_calls":["getCurrentConfig","hasOwnProperty"],"id":"method-getConfig","owner":"Ext.Base","short_doc":"Returns a specified config property value. ..."},{"tagname":"method","name":"getCss","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/dd/DragDropManager.js","linenr":1346}],"doc":"<p>Returns the style property for the DOM element (i.e.,\ndocument.getElById(id).style)</p>\n","params":[{"tagname":"params","type":"String","name":"id","doc":"<p>the id of the element to get</p>\n","html_type":"<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>"}],"return":{"type":"Object","name":"return","doc":"<p>The style property of the element</p>\n","properties":null,"html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"},"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"method-getCss","owner":"Ext.dd.DragDropManager","short_doc":"Returns the style property for the DOM element (i.e.,\ndocument.getElById(id).style) ..."},{"tagname":"method","name":"getCurrentConfig","autodetected":{"inheritdoc":true,"static":true,"inheritable":true,"linenr":true,"params":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/class/Base.js","linenr":1860}],"doc":"\n","private":true,"inheritdoc":null,"static":null,"inheritable":null,"linenr":null,"params":[],"chainable":false,"fires":null,"method_calls":null,"id":"method-getCurrentConfig","owner":"Ext.Base","short_doc":" ..."},{"tagname":"method","name":"getDDById","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/dd/DragDropManager.js","linenr":458}],"doc":"<p>Returns the DragDrop instance for a given id</p>\n","params":[{"tagname":"params","type":"String","name":"id","doc":"<p>the id of the DragDrop object</p>\n","html_type":"<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>"},{"tagname":"params","type":"Boolean","name":"force","doc":"\n","html_type":"<a href=\"#!/api/Boolean\" rel=\"Boolean\" class=\"docClass\">Boolean</a>"}],"return":{"type":"Ext.dd.DragDrop","name":"return","doc":"<p>the drag drop object, null if it is not found</p>\n","properties":null,"html_type":"<a href=\"#!/api/Ext.dd.DragDrop\" rel=\"Ext.dd.DragDrop\" class=\"docClass\">Ext.dd.DragDrop</a>"},"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"method-getDDById","owner":"Ext.dd.DragDropManager","short_doc":"Returns the DragDrop instance for a given id ..."},{"tagname":"method","name":"getElWrapper","autodetected":{"inheritdoc":true,"static":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/dd/DragDropManager.js","linenr":1318}],"doc":"<p>Get the wrapper for the DOM element specified</p>\n","params":[{"tagname":"params","type":"String","name":"id","doc":"<p>the id of the element to get</p>\n","html_type":"<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>"}],"return":{"type":"Ext.dd.DragDropManager.ElementWrapper","name":"return","doc":"<p>the wrapped element</p>\n","properties":null,"html_type":"<a href=\"#!/api/Ext.dd.DragDropManager.ElementWrapper\" rel=\"Ext.dd.DragDropManager.ElementWrapper\" class=\"docClass\">Ext.dd.DragDropManager.ElementWrapper</a>"},"private":true,"deprecated":{"text":"<p>This method is deprecated.</p>\n","version":"6.5.0"},"inheritdoc":null,"static":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"method-getElWrapper","owner":"Ext.dd.DragDropManager","short_doc":"Get the wrapper for the DOM element specified ..."},{"tagname":"method","name":"getElement","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/dd/DragDropManager.js","linenr":1336}],"doc":"<p>Returns the actual DOM element</p>\n","params":[{"tagname":"params","type":"String","name":"id","doc":"<p>the id of the elment to get</p>\n","html_type":"<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>"}],"return":{"type":"Object","name":"return","doc":"<p>The element</p>\n","properties":null,"html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"},"deprecated":{"text":"<p>Use Ext.lib.Ext.getDom() instead.</p>\n","version":"6.5.0"},"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"method-getElement","owner":"Ext.dd.DragDropManager","short_doc":"Returns the actual DOM element ..."},{"tagname":"method","name":"getInitialConfig","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/class/Base.js","linenr":1877}],"doc":"<p>Returns the initial configuration passed to the constructor when\ninstantiating this class.</p>\n\n<p>Given this example <a href=\"#!/api/Ext.button.Button\" rel=\"Ext.button.Button\" class=\"docClass\">Ext.button.Button</a> definition and instance:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('MyApp.view.Button', {\n    extend: '<a href=\"#!/api/Ext.button.Button\" rel=\"Ext.button.Button\" class=\"docClass\">Ext.button.Button</a>',\n    xtype: 'mybutton',\n\n    scale: 'large',\n    enableToggle: true\n});\n\nvar btn = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>({\n    xtype: 'mybutton',\n    renderTo: <a href=\"#!/api/Ext-method-getBody\" rel=\"Ext-method-getBody\" class=\"docClass\">Ext.getBody</a>(),\n    text: 'Test Button'\n});\n</code></pre>\n\n<p>Calling <code>btn.getInitialConfig()</code> would return an object including the config\noptions passed to the <code>create</code> method:</p>\n\n<pre><code>xtype: 'mybutton',\nrenderTo: // The document body itself\ntext: 'Test Button'\n</code></pre>\n\n<p>Calling <code>btn.getInitialConfig('text')</code>returns <strong>'Test Button'</strong>.</p>\n","params":[{"tagname":"params","type":"String","name":"name","optional":true,"doc":"<p>Name of the config option to return.</p>\n","html_type":"<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>"}],"return":{"type":"Object/Mixed","name":"return","doc":"<p>The full config object or a single config value\nwhen <code>name</code> parameter specified.</p>\n","properties":null,"html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>/Mixed"},"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"method-getInitialConfig","owner":"Ext.Base","short_doc":"Returns the initial configuration passed to the constructor when\ninstantiating this class. ..."},{"tagname":"method","name":"getLocation","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/dd/DragDropManager.js","linenr":1160}],"doc":"<p>Returns a Region object containing the drag and drop element's position\nand size, including the padding configured for it</p>\n","params":[{"tagname":"params","type":"Ext.dd.DragDrop","name":"oDD","doc":"<p>the drag and drop object to get the location for.</p>\n","html_type":"<a href=\"#!/api/Ext.dd.DragDrop\" rel=\"Ext.dd.DragDrop\" class=\"docClass\">Ext.dd.DragDrop</a>"}],"return":{"type":"Ext.util.Region","name":"return","doc":"<p>a Region object representing the total area\nthe element occupies, including any padding\nthe instance is configured for.</p>\n","properties":null,"html_type":"<a href=\"#!/api/Ext.util.Region\" rel=\"Ext.util.Region\" class=\"docClass\">Ext.util.Region</a>"},"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":[],"method_calls":["isTypeOfDD"],"id":"method-getLocation","owner":"Ext.dd.DragDropManager","short_doc":"Returns a Region object containing the drag and drop element's position\nand size, including the padding configured fo..."},{"tagname":"method","name":"getRelated","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/dd/DragDropManager.js","linenr":383}],"doc":"<p>Returns the drag and drop instances that are in all groups the\npassed in instance belongs to.</p>\n","params":[{"tagname":"params","type":"Ext.dd.DragDrop","name":"p_oDD","doc":"<p>the obj to get related data for</p>\n","html_type":"<a href=\"#!/api/Ext.dd.DragDrop\" rel=\"Ext.dd.DragDrop\" class=\"docClass\">Ext.dd.DragDrop</a>"},{"tagname":"params","type":"Boolean","name":"bTargetsOnly","doc":"<p>if true, only return targetable objs</p>\n","html_type":"<a href=\"#!/api/Boolean\" rel=\"Boolean\" class=\"docClass\">Boolean</a>"}],"return":{"type":"Ext.dd.DragDrop[]","name":"return","doc":"<p>the related instances</p>\n","properties":null,"html_type":"<a href=\"#!/api/Ext.dd.DragDrop\" rel=\"Ext.dd.DragDrop\" class=\"docClass\">Ext.dd.DragDrop</a>[]"},"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":[],"method_calls":["isTypeOfDD"],"id":"method-getRelated","owner":"Ext.dd.DragDropManager","short_doc":"Returns the drag and drop instances that are in all groups the\npassed in instance belongs to. ..."},{"tagname":"method","name":"getZIndex","autodetected":{"inheritdoc":true,"static":true,"inheritable":true,"linenr":true,"params":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/dd/DragDropManager.js","linenr":1021}],"doc":"<p>Collects the z-index of the passed element, looking up the parentNode axis to find\nan absolutely positioned ancestor which is able to yield a z-index. If found to be not\nabsolutely positioned, returns -1.</p>\n\n<p>This is used when sorting potential drop targets into z-index order so that only the topmost\nreceives <code>over</code> and <code>drop</code> events.</p>\n","private":true,"return":{"type":"Number","name":"return","doc":"<p>The z-index of the element, or of its topmost absolutely positioned\nancestor. Returns -1 if the element is not absolutely positioned.</p>\n","properties":null,"html_type":"<a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a>"},"inheritdoc":null,"static":null,"inheritable":null,"linenr":null,"params":[{"name":"element","type":"Object","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"}],"chainable":false,"fires":null,"method_calls":null,"id":"method-getZIndex","owner":"Ext.dd.DragDropManager","short_doc":"Collects the z-index of the passed element, looking up the parentNode axis to find\nan absolutely positioned ancestor ..."},{"tagname":"method","name":"handleMouseDown","autodetected":{"inheritdoc":true,"static":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/dd/DragDropManager.js","linenr":478}],"doc":"<p>Fired after a registered DragDrop object gets the mousedown event.\nSets up the events required to track the object being dragged</p>\n","params":[{"tagname":"params","type":"Event","name":"e","doc":"<p>the event</p>\n","html_type":"Event"},{"tagname":"params","type":"Ext.dd.DragDrop","name":"oDD","doc":"<p>the DragDrop object being dragged</p>\n","html_type":"<a href=\"#!/api/Ext.dd.DragDrop\" rel=\"Ext.dd.DragDrop\" class=\"docClass\">Ext.dd.DragDrop</a>"}],"private":true,"inheritdoc":null,"static":null,"inheritable":null,"linenr":null,"chainable":false,"fires":[],"method_calls":["handleMouseUp"],"id":"method-handleMouseDown","owner":"Ext.dd.DragDropManager","short_doc":"Fired after a registered DragDrop object gets the mousedown event. ..."},{"tagname":"method","name":"handleMouseMove","autodetected":{"inheritdoc":true,"static":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/dd/DragDropManager.js","linenr":704}],"doc":"<p>Internal function to handle the mousemove event.  Will be invoked\nfrom the context of the html element.</p>\n\n<p>TODO: figure out what we can do about mouse events lost when the\nuser drags objects beyond the window boundary.  Currently we can\ndetect this in internet explorer by verifying that the mouse is\ndown during the mousemove event.  Firefox doesn't give us the\nbutton state on the mousemove event.</p>\n","params":[{"tagname":"params","type":"Event","name":"e","doc":"<p>the event</p>\n","html_type":"Event"}],"private":true,"inheritdoc":null,"static":null,"inheritable":null,"linenr":null,"chainable":false,"fires":[],"method_calls":["fireEvents","startDrag","stopEvent"],"id":"method-handleMouseMove","owner":"Ext.dd.DragDropManager","short_doc":"Internal function to handle the mousemove event. ..."},{"tagname":"method","name":"handleMouseUp","autodetected":{"inheritdoc":true,"static":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/dd/DragDropManager.js","linenr":612}],"doc":"<p>Internal function to handle the mouseup event.  Will be invoked\nfrom the context of the document.</p>\n","params":[{"tagname":"params","type":"Event","name":"e","doc":"<p>the event</p>\n","html_type":"Event"}],"private":true,"inheritdoc":null,"static":null,"inheritable":null,"linenr":null,"chainable":false,"fires":[],"method_calls":["fireEvents","stopDrag","stopEvent"],"id":"method-handleMouseUp","owner":"Ext.dd.DragDropManager","short_doc":"Internal function to handle the mouseup event. ..."},{"tagname":"method","name":"hasConfig","autodetected":{"inheritdoc":true,"static":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/class/Base.js","linenr":1869}],"doc":"\n","params":[{"tagname":"params","type":"String","name":"name","doc":"\n","html_type":"<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>"}],"private":true,"inheritdoc":null,"static":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"method-hasConfig","owner":"Ext.Base","short_doc":" ..."},{"tagname":"method","name":"init","autodetected":{"inheritdoc":true,"static":true,"inheritable":true,"linenr":true,"params":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/dd/DragDropManager.js","linenr":106}],"doc":"<p>Called the first time an element is registered.</p>\n","private":true,"inheritdoc":null,"static":null,"inheritable":null,"linenr":null,"params":[],"chainable":false,"fires":null,"method_calls":null,"id":"method-init","owner":"Ext.dd.DragDropManager","short_doc":"Called the first time an element is registered. ..."},{"tagname":"method","name":"initConfig","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/class/Base.js","linenr":1618}],"doc":"<p>Initialize configuration for this class. a typical example:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('My.awesome.Class', {\n    // The default config\n    config: {\n        name: 'Awesome',\n        isAwesome: true\n    },\n\n    constructor: function(config) {\n        this.initConfig(config);\n    }\n});\n\nvar awesome = new My.awesome.Class({\n    name: 'Super Awesome'\n});\n\nalert(awesome.getName()); // 'Super Awesome'\n</code></pre>\n","protected":true,"params":[{"tagname":"params","type":"Object","name":"instanceConfig","doc":"\n","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"}],"return":{"type":"Ext.Base","name":"return","doc":"<p>this</p>\n","properties":null,"html_type":"<a href=\"#!/api/Ext.Base\" rel=\"Ext.Base\" class=\"docClass\">Ext.Base</a>"},"chainable":true,"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"fires":null,"method_calls":null,"id":"method-initConfig","owner":"Ext.Base","short_doc":"Initialize configuration for this class. ..."},{"tagname":"method","name":"isDragDrop","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/dd/DragDropManager.js","linenr":372}],"doc":"<p>Utility function to determine if a given element has been\nregistered as a drag drop item.</p>\n","params":[{"tagname":"params","type":"String","name":"id","doc":"<p>the element id to check</p>\n","html_type":"<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>"}],"return":{"type":"Boolean","name":"return","doc":"<p>true if this element is a DragDrop item,\nfalse otherwise</p>\n","properties":null,"html_type":"<a href=\"#!/api/Boolean\" rel=\"Boolean\" class=\"docClass\">Boolean</a>"},"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":[],"method_calls":["getDDById"],"id":"method-isDragDrop","owner":"Ext.dd.DragDropManager","short_doc":"Utility function to determine if a given element has been\nregistered as a drag drop item. ..."},{"tagname":"method","name":"isHandle","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/dd/DragDropManager.js","linenr":445}],"doc":"<p>Utility function to determine if a given element has been\nregistered as a drag drop handle for the given Drag Drop object.</p>\n","params":[{"tagname":"params","type":"String","name":"sDDId","doc":"<p>the element id to check</p>\n","html_type":"<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>"},{"tagname":"params","type":"String","name":"sHandleId","doc":"\n","html_type":"<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>"}],"return":{"type":"Boolean","name":"return","doc":"<p>true if this element is a DragDrop handle, false\notherwise</p>\n","properties":null,"html_type":"<a href=\"#!/api/Boolean\" rel=\"Boolean\" class=\"docClass\">Boolean</a>"},"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"method-isHandle","owner":"Ext.dd.DragDropManager","short_doc":"Utility function to determine if a given element has been\nregistered as a drag drop handle for the given Drag Drop ob..."},{"tagname":"method","name":"isLegalTarget","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/dd/DragDropManager.js","linenr":411}],"doc":"<p>Returns true if the specified dd target is a legal target for\nthe specifice drag obj</p>\n","params":[{"tagname":"params","type":"Ext.dd.DragDrop","name":"oDD","doc":"<p>the drag obj</p>\n","html_type":"<a href=\"#!/api/Ext.dd.DragDrop\" rel=\"Ext.dd.DragDrop\" class=\"docClass\">Ext.dd.DragDrop</a>"},{"tagname":"params","type":"Ext.dd.DragDrop","name":"oTargetDD","doc":"<p>the target</p>\n","html_type":"<a href=\"#!/api/Ext.dd.DragDrop\" rel=\"Ext.dd.DragDrop\" class=\"docClass\">Ext.dd.DragDrop</a>"}],"return":{"type":"Boolean","name":"return","doc":"<p>true if the target is a legal target for the\ndd obj</p>\n","properties":null,"html_type":"<a href=\"#!/api/Boolean\" rel=\"Boolean\" class=\"docClass\">Boolean</a>"},"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":[],"method_calls":["getRelated"],"id":"method-isLegalTarget","owner":"Ext.dd.DragDropManager","short_doc":"Returns true if the specified dd target is a legal target for\nthe specifice drag obj ..."},{"tagname":"method","name":"isLocked","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"params":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/dd/DragDropManager.js","linenr":221}],"doc":"<p>Is drag and drop locked?</p>\n","return":{"type":"Boolean","name":"return","doc":"<p>True if drag and drop is locked, false otherwise.</p>\n","properties":null,"html_type":"<a href=\"#!/api/Boolean\" rel=\"Boolean\" class=\"docClass\">Boolean</a>"},"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"params":[],"chainable":false,"fires":null,"method_calls":null,"id":"method-isLocked","owner":"Ext.dd.DragDropManager","short_doc":"Is drag and drop locked? ..."},{"tagname":"method","name":"isOverTarget","autodetected":{"inheritdoc":true,"static":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/dd/DragDropManager.js","linenr":1207}],"doc":"<p>Checks the cursor location to see if it over the target</p>\n","params":[{"tagname":"params","type":"Ext.util.Point","name":"pt","doc":"<p>The point to evaluate</p>\n","html_type":"<a href=\"#!/api/Ext.util.Point\" rel=\"Ext.util.Point\" class=\"docClass\">Ext.util.Point</a>"},{"tagname":"params","type":"Ext.dd.DragDrop","name":"oTarget","doc":"<p>the DragDrop object we are inspecting</p>\n","html_type":"<a href=\"#!/api/Ext.dd.DragDrop\" rel=\"Ext.dd.DragDrop\" class=\"docClass\">Ext.dd.DragDrop</a>"},{"tagname":"params","name":"intersect","doc":"\n","type":"Object","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"}],"return":{"type":"Boolean","name":"return","doc":"<p>true if the mouse is over the target</p>\n","properties":null,"html_type":"<a href=\"#!/api/Boolean\" rel=\"Boolean\" class=\"docClass\">Boolean</a>"},"private":true,"inheritdoc":null,"static":null,"inheritable":null,"linenr":null,"chainable":false,"fires":[],"method_calls":["getLocation"],"id":"method-isOverTarget","owner":"Ext.dd.DragDropManager","short_doc":"Checks the cursor location to see if it over the target ..."},{"tagname":"method","name":"isTypeOfDD","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/dd/DragDropManager.js","linenr":432}],"doc":"<p>My goal is to be able to transparently determine if an object is\ntypeof DragDrop, and the exact subclass of DragDrop.  typeof\nreturns \"object\", oDD.constructor.toString() always returns\n\"DragDrop\" and not the name of the subclass.  So for now it just\nevaluates a well-known variable in DragDrop.</p>\n","params":[{"tagname":"params","type":"Object","name":"oDD","doc":"<p>The object to evaluate</p>\n","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"}],"return":{"type":"Boolean","name":"return","doc":"<p>true if typeof oDD = DragDrop</p>\n","properties":null,"html_type":"<a href=\"#!/api/Boolean\" rel=\"Boolean\" class=\"docClass\">Boolean</a>"},"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"method-isTypeOfDD","owner":"Ext.dd.DragDropManager","short_doc":"My goal is to be able to transparently determine if an object is\ntypeof DragDrop, and the exact subclass of DragDrop. ..."},{"tagname":"method","name":"link","autodetected":{"inheritdoc":true,"static":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/class/Base.js","linenr":1923}],"doc":"<p>Adds a \"destroyable\" object to an internal list of objects that will be destroyed\nwhen this instance is destroyed (via <code>method!destroy</code>).</p>\n","params":[{"tagname":"params","type":"String","name":"name","doc":"\n","html_type":"<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>"},{"tagname":"params","type":"Object","name":"value","doc":"\n","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"}],"return":{"type":"Object","name":"return","doc":"<p>The <code>value</code> passed.</p>\n\n","properties":null,"html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"},"private":true,"inheritdoc":null,"static":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"method-link","owner":"Ext.Base","short_doc":"Adds a \"destroyable\" object to an internal list of objects that will be destroyed\nwhen this instance is destroyed (vi..."},{"tagname":"method","name":"lock","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"params":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/dd/DragDropManager.js","linenr":207}],"doc":"<p>Lock all drag and drop functionality</p>\n","inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"params":[],"chainable":false,"fires":null,"method_calls":null,"id":"method-lock","owner":"Ext.dd.DragDropManager","short_doc":"Lock all drag and drop functionality ..."},{"tagname":"method","name":"refreshCache","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/dd/DragDropManager.js","linenr":1103}],"doc":"<p>Refreshes the cache of the top-left and bottom-right points of the\ndrag and drop objects in the specified group(s).  This is in the\nformat that is stored in the drag and drop instance, so typical\nusage is:</p>\n\n<pre><code><a href=\"#!/api/Ext.dd.DragDropManager-method-refreshCache\" rel=\"Ext.dd.DragDropManager-method-refreshCache\" class=\"docClass\">Ext.dd.DragDropManager.refreshCache</a>(ddinstance.groups);\n</code></pre>\n\n<p>Alternatively:</p>\n\n<pre><code><a href=\"#!/api/Ext.dd.DragDropManager-method-refreshCache\" rel=\"Ext.dd.DragDropManager-method-refreshCache\" class=\"docClass\">Ext.dd.DragDropManager.refreshCache</a>({group1:true, group2:true});\n</code></pre>\n\n<p>TODO: this really should be an indexed array.  Alternatively this\nmethod could accept both.</p>\n","params":[{"tagname":"params","type":"Object","name":"groups","doc":"<p>an associative array of groups to refresh</p>\n","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"}],"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":[],"method_calls":["getLocation","isTypeOfDD"],"id":"method-refreshCache","owner":"Ext.dd.DragDropManager","short_doc":"Refreshes the cache of the top-left and bottom-right points of the\ndrag and drop objects in the specified group(s). ..."},{"tagname":"method","name":"regDragDrop","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/dd/DragDropManager.js","linenr":284}],"doc":"<p>Each DragDrop instance must be registered with the DragDropManager.\nThis is executed in DragDrop.init()</p>\n","params":[{"tagname":"params","type":"Ext.dd.DragDrop","name":"oDD","doc":"<p>the DragDrop object to register</p>\n","html_type":"<a href=\"#!/api/Ext.dd.DragDrop\" rel=\"Ext.dd.DragDrop\" class=\"docClass\">Ext.dd.DragDrop</a>"},{"tagname":"params","type":"String","name":"sGroup","doc":"<p>the name of the group this element belongs to</p>\n","html_type":"<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>"}],"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":[],"method_calls":["init"],"id":"method-regDragDrop","owner":"Ext.dd.DragDropManager","short_doc":"Each DragDrop instance must be registered with the DragDropManager. ..."},{"tagname":"method","name":"regHandle","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/dd/DragDropManager.js","linenr":357}],"doc":"<p>Each DragDrop handle element must be registered.  This is done\nautomatically when executing DragDrop.setHandleElId()</p>\n","params":[{"tagname":"params","type":"String","name":"sDDId","doc":"<p>the DragDrop id this element is a handle for</p>\n","html_type":"<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>"},{"tagname":"params","type":"String","name":"sHandleId","doc":"<p>the id of the element that is the drag\nhandle</p>\n","html_type":"<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>"}],"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"method-regHandle","owner":"Ext.dd.DragDropManager","short_doc":"Each DragDrop handle element must be registered. ..."},{"tagname":"method","name":"removeDDFromGroup","autodetected":{"inheritdoc":true,"static":true,"inheritable":true,"linenr":true,"params":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/dd/DragDropManager.js","linenr":302}],"doc":"<p>Removes the supplied dd instance from the supplied group. Executed\nby DragDrop.removeFromGroup, so don't call this function directly.</p>\n","private":true,"inheritdoc":null,"static":null,"inheritable":null,"linenr":null,"params":[{"name":"oDD","type":"Object","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"},{"name":"sGroup","type":"Object","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"}],"chainable":false,"fires":null,"method_calls":null,"id":"method-removeDDFromGroup","owner":"Ext.dd.DragDropManager","short_doc":"Removes the supplied dd instance from the supplied group. ..."},{"tagname":"method","name":"setConfig","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/class/Base.js","linenr":1769}],"doc":"<p>Sets a single/multiple configuration options.</p>\n","params":[{"tagname":"params","type":"String/Object","name":"name","doc":"<p>The name of the property to set, or a set of key value\npairs to set.</p>\n","html_type":"<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>/<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"},{"tagname":"params","type":"Object","name":"value","optional":true,"doc":"<p>The value to set for the name parameter.</p>\n","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"},{"tagname":"params","type":"Object","name":"options","optional":true,"doc":"<p>(private)</p>\n","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"}],"return":{"type":"Ext.Base","name":"return","doc":"<p>this</p>\n\n","properties":null,"html_type":"<a href=\"#!/api/Ext.Base\" rel=\"Ext.Base\" class=\"docClass\">Ext.Base</a>"},"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":true,"fires":null,"method_calls":null,"id":"method-setConfig","owner":"Ext.Base","short_doc":"Sets a single/multiple configuration options. ..."},{"tagname":"method","name":"startDrag","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/dd/DragDropManager.js","linenr":574}],"doc":"<p>Fired when either the drag pixel threshold or the mousedown hold\ntime threshold has been met.</p>\n","params":[{"tagname":"params","type":"Number","name":"x","doc":"<p>the X position of the original mousedown</p>\n","html_type":"<a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a>"},{"tagname":"params","type":"Number","name":"y","doc":"<p>the Y position of the original mousedown</p>\n","html_type":"<a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a>"}],"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"method-startDrag","owner":"Ext.dd.DragDropManager","short_doc":"Fired when either the drag pixel threshold or the mousedown hold\ntime threshold has been met. ..."},{"tagname":"method","name":"statics","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"params":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/class/Base.js","linenr":1290}],"doc":"<p>Get the reference to the class from which this object was instantiated. Note that unlike\n<a href=\"#!/api/Ext.Base-property-self\" rel=\"Ext.Base-property-self\" class=\"docClass\">self</a>, <code>this.statics()</code> is scope-independent and it always returns\nthe class from which it was called, regardless of what <code>this</code> points to during run-time</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('My.Cat', {\n    statics: {\n        totalCreated: 0,\n        speciesName: 'Cat' // My.Cat.speciesName = 'Cat'\n    },\n\n    constructor: function() {\n        var statics = this.statics();\n\n        // always equals to 'Cat' no matter what 'this' refers to\n        // equivalent to: My.Cat.speciesName\n        alert(statics.speciesName);\n\n\n        alert(this.self.speciesName);   // dependent on 'this'\n\n        statics.totalCreated++;\n    },\n\n    clone: function() {\n        var cloned = new this.self();   // dependent on 'this'\n\n        // equivalent to: My.Cat.speciesName\n        cloned.groupName = this.statics().speciesName;\n\n        return cloned;\n    }\n});\n\n\n<a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('My.SnowLeopard', {\n    extend: 'My.Cat',\n\n    statics: {\n        speciesName: 'Snow Leopard' // My.SnowLeopard.speciesName = 'Snow Leopard'\n    },\n\n    constructor: function() {\n        this.callParent();\n    }\n});\n\nvar cat = new My.Cat();                 // alerts 'Cat', then alerts 'Cat'\n\nvar snowLeopard = new My.SnowLeopard(); // alerts 'Cat', then alerts 'Snow Leopard'\n\nvar clone = snowLeopard.clone();\nalert(<a href=\"#!/api/Ext-method-getClassName\" rel=\"Ext-method-getClassName\" class=\"docClass\">Ext.getClassName</a>(clone));         // alerts 'My.SnowLeopard'\nalert(clone.groupName);                 // alerts 'Cat'\n\nalert(My.Cat.totalCreated);             // alerts 3\n</code></pre>\n","protected":true,"return":{"type":"Ext.Class","name":"return","doc":"\n","properties":null,"html_type":"<a href=\"#!/api/Ext.Class\" rel=\"Ext.Class\" class=\"docClass\">Ext.Class</a>"},"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"params":[],"chainable":false,"fires":null,"method_calls":null,"id":"method-statics","owner":"Ext.Base","short_doc":"Get the reference to the class from which this object was instantiated. ..."},{"tagname":"method","name":"stopDrag","autodetected":{"inheritdoc":true,"static":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/dd/DragDropManager.js","linenr":664}],"doc":"<p>Internal function to clean up event handlers after the drag\noperation is complete</p>\n","params":[{"tagname":"params","type":"Event","name":"e","doc":"<p>the event</p>\n","html_type":"Event"}],"private":true,"inheritdoc":null,"static":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"method-stopDrag","owner":"Ext.dd.DragDropManager","short_doc":"Internal function to clean up event handlers after the drag\noperation is complete ..."},{"tagname":"method","name":"stopEvent","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/dd/DragDropManager.js","linenr":649}],"doc":"<p>Utility to stop event propagation and event default, if these\nfeatures are turned on.</p>\n","params":[{"tagname":"params","type":"Event","name":"e","doc":"<p>the event as returned by this.getEvent()</p>\n","html_type":"Event"}],"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"method-stopEvent","owner":"Ext.dd.DragDropManager","short_doc":"Utility to stop event propagation and event default, if these\nfeatures are turned on. ..."},{"tagname":"method","name":"unlink","autodetected":{"inheritdoc":true,"static":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/class/Base.js","linenr":1941}],"doc":"<p>Destroys a given set of <code><a href=\"#!/api/Ext.Base-method-link\" rel=\"Ext.Base-method-link\" class=\"docClass\">linked</a></code> objects. This is only needed if\nthe linked object is being destroyed before this instance.</p>\n","params":[{"tagname":"params","type":"String[]","name":"names","doc":"<p>The names of the linked objects to destroy.</p>\n","html_type":"<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>[]"}],"return":{"type":"Ext.Base","name":"return","doc":"<p>this</p>\n","properties":null,"html_type":"<a href=\"#!/api/Ext.Base\" rel=\"Ext.Base\" class=\"docClass\">Ext.Base</a>"},"private":true,"inheritdoc":null,"static":null,"inheritable":null,"linenr":null,"chainable":true,"fires":null,"method_calls":null,"id":"method-unlink","owner":"Ext.Base","short_doc":"Destroys a given set of linked objects. ..."},{"tagname":"method","name":"unlock","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"params":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/dd/DragDropManager.js","linenr":214}],"doc":"<p>Unlock all drag and drop functionality</p>\n","inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"params":[],"chainable":false,"fires":null,"method_calls":null,"id":"method-unlock","owner":"Ext.dd.DragDropManager","short_doc":"Unlock all drag and drop functionality ..."},{"tagname":"method","name":"unregAll","autodetected":{"inheritdoc":true,"static":true,"inheritable":true,"linenr":true,"params":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/dd/DragDropManager.js","linenr":1284}],"doc":"<p>Cleans up the drag and drop events and objects.</p>\n","private":true,"inheritdoc":null,"static":null,"inheritable":null,"linenr":null,"params":[],"chainable":false,"fires":[],"method_calls":["_execOnAll","stopDrag"],"id":"method-unregAll","owner":"Ext.dd.DragDropManager","short_doc":"Cleans up the drag and drop events and objects. ..."},{"tagname":"method","name":"verifyEl","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/dd/DragDropManager.js","linenr":1149}],"doc":"<p>This checks to make sure an element exists and is in the DOM.  The\nmain purpose is to handle cases where innerHTML is used to remove\ndrag and drop objects from the DOM.</p>\n","params":[{"tagname":"params","type":"HTMLElement","name":"el","doc":"<p>the element to check</p>\n","html_type":"HTMLElement"}],"return":{"type":"Boolean","name":"return","doc":"<p>true if the element looks usable</p>\n","properties":null,"html_type":"<a href=\"#!/api/Boolean\" rel=\"Boolean\" class=\"docClass\">Boolean</a>"},"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"method-verifyEl","owner":"Ext.dd.DragDropManager","short_doc":"This checks to make sure an element exists and is in the DOM. ..."},{"tagname":"method","name":"watchConfig","autodetected":{"inheritdoc":true,"static":true,"inheritable":true,"linenr":true,"params":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/class/Base.js","linenr":1841}],"doc":"<p>Watches config properties.</p>\n\n<pre><code> instance.watchConfig({\n     title: 'onTitleChange',\n     scope: me\n });\n</code></pre>\n","private":true,"since":"6.7.0","inheritdoc":null,"static":null,"inheritable":null,"linenr":null,"params":[{"name":"name","type":"Object","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"},{"name":"fn","type":"Object","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"},{"name":"scope","type":"Object","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"}],"chainable":false,"fires":[],"method_calls":["getConfigWatcher"],"id":"method-watchConfig","owner":"Ext.Base","short_doc":"Watches config properties. ..."},{"tagname":"method","name":"addConfig","autodetected":{"inheritdoc":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/class/Base.js","linenr":1081}],"doc":"<p>Adds new config properties to this class. This is called for classes when they\nare declared, then for any mixins that class may define and finally for any\noverrides defined that target the class.</p>\n","params":[{"tagname":"params","type":"Object","name":"config","doc":"\n","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"},{"tagname":"params","type":"Ext.Class","name":"mixinClass","optional":true,"doc":"<p>The mixin class if the configs are from a mixin.</p>\n","html_type":"<a href=\"#!/api/Ext.Class\" rel=\"Ext.Class\" class=\"docClass\">Ext.Class</a>"}],"private":true,"static":true,"inheritable":true,"inheritdoc":null,"linenr":null,"chainable":false,"fires":null,"method_calls":["getConfigurator"],"id":"static-method-addConfig","owner":"Ext.Base","short_doc":"Adds new config properties to this class. ..."},{"tagname":"method","name":"addInheritableStatics","autodetected":{"inheritdoc":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/class/Base.js","linenr":515}],"doc":"\n","private":true,"static":true,"inheritable":true,"params":[{"tagname":"params","type":"Object","name":"members","doc":"\n","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"}],"inheritdoc":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"static-method-addInheritableStatics","owner":"Ext.Base","short_doc":" ..."},{"tagname":"method","name":"addMember","autodetected":{"inheritdoc":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/class/Base.js","linenr":724}],"doc":"\n","private":true,"static":true,"inheritable":true,"params":[{"tagname":"params","name":"name","doc":"\n","type":"Object","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"},{"tagname":"params","name":"member","doc":"\n","type":"Object","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"},{"tagname":"params","name":"privacy","doc":"\n","type":"Object","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"}],"inheritdoc":null,"linenr":null,"chainable":true,"fires":null,"method_calls":["addMembers"],"id":"static-method-addMember","owner":"Ext.Base","short_doc":" ..."},{"tagname":"method","name":"addMembers","autodetected":{"inheritdoc":true,"private":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/class/Base.js","linenr":560}],"doc":"<p>Add methods / properties to the prototype of this class.</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('My.awesome.Cat', {\n    constructor: function() {\n        ...\n    }\n});\n\n My.awesome.Cat.addMembers({\n     meow: function() {\n        alert('Meowww...');\n     }\n });\n\n var kitty = new My.awesome.Cat();\n kitty.meow();\n</code></pre>\n","params":[{"tagname":"params","type":"Object","name":"members","doc":"<p>The members to add to this class.</p>\n","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"},{"tagname":"params","type":"Boolean","name":"isStatic","default":"false","optional":true,"doc":"<p>Pass <code>true</code> if the members are static.</p>\n","html_type":"<a href=\"#!/api/Boolean\" rel=\"Boolean\" class=\"docClass\">Boolean</a>"},{"tagname":"params","type":"Boolean","name":"privacy","default":"false","optional":true,"doc":"<p>Pass <code>true</code> if the members are private. This\nonly has meaning in debug mode and only for methods.</p>\n","html_type":"<a href=\"#!/api/Boolean\" rel=\"Boolean\" class=\"docClass\">Boolean</a>"}],"static":true,"inheritable":true,"inheritdoc":null,"private":null,"linenr":null,"chainable":true,"fires":null,"method_calls":["addConfig","addMembers"],"id":"static-method-addMembers","owner":"Ext.Base","short_doc":"Add methods / properties to the prototype of this class. ..."},{"tagname":"method","name":"addStatics","autodetected":{"inheritdoc":true,"private":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/class/Base.js","linenr":491}],"doc":"<p>Add / override static properties of this class.</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('My.cool.Class', {\n    ...\n});\n\nMy.cool.Class.addStatics({\n    someProperty: 'someValue',      // My.cool.Class.someProperty = 'someValue'\n    method1: function() { ... },    // My.cool.Class.method1 = function() { ... };\n    method2: function() { ... }     // My.cool.Class.method2 = function() { ... };\n});\n</code></pre>\n","params":[{"tagname":"params","type":"Object","name":"members","doc":"\n","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"}],"return":{"type":"Ext.Base","name":"return","doc":"<p>this</p>\n","properties":null,"html_type":"<a href=\"#!/api/Ext.Base\" rel=\"Ext.Base\" class=\"docClass\">Ext.Base</a>"},"static":true,"inheritable":true,"inheritdoc":null,"private":null,"linenr":null,"chainable":true,"fires":null,"method_calls":["addMembers"],"id":"static-method-addStatics","owner":"Ext.Base","short_doc":"Add / override static properties of this class. ..."},{"tagname":"method","name":"borrow","autodetected":{"inheritdoc":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/class/Base.js","linenr":746}],"doc":"<p>Borrow another class' members to the prototype of this class.</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Bank', {\n    money: '$$$',\n    printMoney: function() {\n        alert('$$$$$$$');\n    }\n});\n\n<a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Thief', {\n    ...\n});\n\nThief.borrow(Bank, ['money', 'printMoney']);\n\nvar steve = new Thief();\n\nalert(steve.money); // alerts '$$$'\nsteve.printMoney(); // alerts '$$$$$$$'\n</code></pre>\n","params":[{"tagname":"params","type":"Ext.Base","name":"fromClass","doc":"<p>The class to borrow members from</p>\n","html_type":"<a href=\"#!/api/Ext.Base\" rel=\"Ext.Base\" class=\"docClass\">Ext.Base</a>"},{"tagname":"params","type":"Array/String","name":"members","doc":"<p>The names of the members to borrow</p>\n","html_type":"<a href=\"#!/api/Array\" rel=\"Array\" class=\"docClass\">Array</a>/<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>"}],"return":{"type":"Ext.Base","name":"return","doc":"<p>this</p>\n","properties":null,"html_type":"<a href=\"#!/api/Ext.Base\" rel=\"Ext.Base\" class=\"docClass\">Ext.Base</a>"},"static":true,"inheritable":true,"private":true,"inheritdoc":null,"linenr":null,"chainable":false,"fires":null,"method_calls":["addMembers"],"id":"static-method-borrow","owner":"Ext.Base","short_doc":"Borrow another class' members to the prototype of this class. ..."},{"tagname":"method","name":"callParent","autodetected":{"inheritdoc":true,"private":true,"linenr":true,"params":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/class/Base.js","linenr":946}],"doc":"\n","protected":true,"static":true,"inheritable":true,"inheritdoc":null,"private":null,"linenr":null,"params":[{"name":"args","type":"Object","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"}],"chainable":false,"fires":null,"method_calls":null,"id":"static-method-callParent","owner":"Ext.Base","short_doc":" ..."},{"tagname":"method","name":"callSuper","autodetected":{"inheritdoc":true,"private":true,"linenr":true,"params":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/class/Base.js","linenr":960}],"doc":"\n","protected":true,"static":true,"inheritable":true,"inheritdoc":null,"private":null,"linenr":null,"params":[{"name":"args","type":"Object","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"}],"chainable":false,"fires":null,"method_calls":null,"id":"static-method-callSuper","owner":"Ext.Base","short_doc":" ..."},{"tagname":"method","name":"create","autodetected":{"inheritdoc":true,"private":true,"linenr":true,"params":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/class/Base.js","linenr":126}],"doc":"<p>Create a new instance of this Class.</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('My.cool.Class', {\n    ...\n});\n\nMy.cool.Class.create({\n    someConfig: true\n});\n</code></pre>\n\n<p>All parameters are passed to the constructor of the class.</p>\n","return":{"type":"Object","name":"return","doc":"<p>the created instance.</p>\n","properties":null,"html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"},"static":true,"inheritable":true,"inheritdoc":null,"private":null,"linenr":null,"params":[],"chainable":false,"fires":null,"method_calls":null,"id":"static-method-create","owner":"Ext.Base","short_doc":"Create a new instance of this Class. ..."},{"tagname":"method","name":"createAlias","autodetected":{"inheritdoc":true,"private":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/class/Base.js","linenr":1145}],"doc":"<p>Create aliases for existing prototype methods. Example:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('My.cool.Class', {\n    method1: function() { ... },\n    method2: function() { ... }\n});\n\nvar test = new My.cool.Class();\n\nMy.cool.Class.createAlias({\n    method3: 'method1',\n    method4: 'method2'\n});\n\ntest.method3(); // test.method1()\n\nMy.cool.Class.createAlias('method5', 'method3');\n\ntest.method5(); // test.method3() -&gt; test.method1()\n</code></pre>\n","params":[{"tagname":"params","type":"String/Object","name":"alias","doc":"<p>The new method name, or an object to set multiple aliases.\nSee <a href=\"#!/api/Ext.Function-method-flexSetter\" rel=\"Ext.Function-method-flexSetter\" class=\"docClass\">flexSetter</a></p>\n","html_type":"<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>/<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"},{"tagname":"params","type":"String/Object","name":"origin","doc":"<p>The original method name</p>\n","html_type":"<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>/<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"}],"static":true,"inheritable":true,"inheritdoc":null,"private":null,"linenr":null,"chainable":null,"fires":null,"method_calls":null,"id":"static-method-createAlias","owner":"Ext.Base","short_doc":"Create aliases for existing prototype methods. ..."},{"tagname":"method","name":"extend","autodetected":{"inheritdoc":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/class/Base.js","linenr":399}],"doc":"\n","private":true,"static":true,"inheritable":true,"params":[{"tagname":"params","name":"parentClass","doc":"\n","type":"Object","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"}],"inheritdoc":null,"linenr":null,"chainable":false,"fires":null,"method_calls":["getConfigurator","hasOwnProperty"],"id":"static-method-extend","owner":"Ext.Base","short_doc":" ..."},{"tagname":"method","name":"getConfigurator","autodetected":{"inheritdoc":true,"linenr":true,"params":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/class/Base.js","linenr":1112}],"doc":"<p>Returns the <code><a href=\"#!/api/Ext.Configurator\" rel=\"Ext.Configurator\" class=\"docClass\">Ext.Configurator</a></code> for this class.</p>\n","return":{"type":"Ext.Configurator","name":"return","doc":"\n","properties":null,"html_type":"<a href=\"#!/api/Ext.Configurator\" rel=\"Ext.Configurator\" class=\"docClass\">Ext.Configurator</a>"},"private":true,"static":true,"inheritable":true,"inheritdoc":null,"linenr":null,"params":[],"chainable":false,"fires":null,"method_calls":null,"id":"static-method-getConfigurator","owner":"Ext.Base","short_doc":"Returns the Ext.Configurator for this class. ..."},{"tagname":"method","name":"getName","autodetected":{"inheritdoc":true,"private":true,"linenr":true,"params":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/class/Base.js","linenr":1126}],"doc":"<p>Get the current class' name in string format.</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('My.cool.Class', {\n    constructor: function() {\n        alert(this.self.getName()); // alerts 'My.cool.Class'\n    }\n});\n\nMy.cool.Class.getName(); // 'My.cool.Class'\n</code></pre>\n","return":{"type":"String","name":"return","doc":"<p>className</p>\n","properties":null,"html_type":"<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>"},"static":true,"inheritable":true,"inheritdoc":null,"private":null,"linenr":null,"params":[],"chainable":false,"fires":null,"method_calls":null,"id":"static-method-getName","owner":"Ext.Base","short_doc":"Get the current class' name in string format. ..."},{"tagname":"method","name":"mixin","autodetected":{"inheritdoc":true,"linenr":true,"params":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/class/Base.js","linenr":975}],"doc":"<p>Used internally by the mixins pre-processor</p>\n","private":true,"static":true,"inheritable":true,"inheritdoc":null,"linenr":null,"params":[{"name":"name","type":"Object","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"},{"name":"mixinClass","type":"Object","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"}],"chainable":false,"fires":null,"method_calls":["addConfig","addInheritableStatics","hasOwnProperty","mixin"],"id":"static-method-mixin","owner":"Ext.Base","short_doc":"Used internally by the mixins pre-processor ..."},{"tagname":"method","name":"onExtended","autodetected":{"inheritdoc":true,"linenr":true,"params":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/class/Base.js","linenr":477}],"doc":"\n","private":true,"static":true,"inheritable":true,"inheritdoc":null,"linenr":null,"params":[{"name":"fn","type":"Object","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"},{"name":"scope","type":"Object","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"}],"chainable":true,"fires":null,"method_calls":null,"id":"static-method-onExtended","owner":"Ext.Base","short_doc":" ..."},{"tagname":"method","name":"override","autodetected":{"inheritdoc":true,"private":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/class/Base.js","linenr":796}],"doc":"<p>Override members of this class. Overridden methods can be invoked via\nmethod!callParent.</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('My.Cat', {\n    constructor: function() {\n        alert(\"I'm a cat!\");\n    }\n});\n\nMy.Cat.override({\n    constructor: function() {\n        alert(\"I'm going to be a cat!\");\n\n        this.callParent(arguments);\n\n        alert(\"Meeeeoooowwww\");\n    }\n});\n\nvar kitty = new My.Cat(); // alerts \"I'm going to be a cat!\"\n                          // alerts \"I'm a cat!\"\n                          // alerts \"Meeeeoooowwww\"\n</code></pre>\n\n<p>Direct use of this method should be rare. Use <a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>\ninstead:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('My.CatOverride', {\n    override: 'My.Cat',\n    constructor: function() {\n        alert(\"I'm going to be a cat!\");\n\n        this.callParent(arguments);\n\n        alert(\"Meeeeoooowwww\");\n    }\n});\n</code></pre>\n\n<p>The above accomplishes the same result but can be managed by the <a href=\"#!/api/Ext.Loader\" rel=\"Ext.Loader\" class=\"docClass\">Ext.Loader</a>\nwhich can properly order the override and its target class and the build process\ncan determine whether the override is needed based on the required state of the\ntarget class (My.Cat).</p>\n","params":[{"tagname":"params","type":"Object","name":"members","doc":"<p>The properties to add to this class. This should be\nspecified as an object literal containing one or more properties.</p>\n","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"}],"return":{"type":"Ext.Base","name":"return","doc":"<p>this class</p>\n","properties":null,"html_type":"<a href=\"#!/api/Ext.Base\" rel=\"Ext.Base\" class=\"docClass\">Ext.Base</a>"},"static":true,"inheritable":true,"inheritdoc":null,"private":null,"linenr":null,"chainable":false,"fires":null,"method_calls":["addCachedConfig","addConfig","addInheritableStatics","addMembers","addPlatformConfig","mixin"],"id":"static-method-override","owner":"Ext.Base","short_doc":"Override members of this class. ..."},{"tagname":"method","name":"triggerExtended","autodetected":{"inheritdoc":true,"linenr":true,"params":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/class/Base.js","linenr":452}],"doc":"\n","private":true,"static":true,"inheritable":true,"inheritdoc":null,"linenr":null,"params":[],"chainable":false,"fires":null,"method_calls":null,"id":"static-method-triggerExtended","owner":"Ext.Base","short_doc":" ..."}],"code_type":"ext_define","singleton":true,"id":"class-Ext.dd.DragDropManager","short_doc":"DragDropManager is a singleton that tracks the element interaction for\nall DragDrop items in the window. ..."}