{"tagname":"class","name":"Ext.String","autodetected":{},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/lang/String.js","linenr":1}],"doc":"<p>A collection of useful static methods to deal with strings.</p>\n","singleton":true,"members":[{"tagname":"method","name":"addCharacterEntities","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/lang/String.js","linenr":225}],"doc":"<p>Adds a set of character entity definitions to the set used by\n<a href=\"#!/api/Ext.String-method-htmlEncode\" rel=\"Ext.String-method-htmlEncode\" class=\"docClass\">htmlEncode</a> and <a href=\"#!/api/Ext.String-method-htmlDecode\" rel=\"Ext.String-method-htmlDecode\" class=\"docClass\">htmlDecode</a>.</p>\n\n<p>This object should be keyed by the entity name sequence,\nwith the value being the textual representation of the entity.</p>\n\n<pre><code> <a href=\"#!/api/Ext.String-method-addCharacterEntities\" rel=\"Ext.String-method-addCharacterEntities\" class=\"docClass\">Ext.String.addCharacterEntities</a>({\n     '&amp;amp;Uuml;':'Ü',\n     '&amp;amp;ccedil;':'ç',\n     '&amp;amp;ntilde;':'ñ',\n     '&amp;amp;egrave;':'è'\n });\n var s = <a href=\"#!/api/Ext.String-method-htmlEncode\" rel=\"Ext.String-method-htmlEncode\" class=\"docClass\">Ext.String.htmlEncode</a>(\"A string with entities: èÜçñ\");\n</code></pre>\n\n<p><strong>Note:</strong> the values of the character entities defined on this object are expected\nto be single character values.  As such, the actual values represented by the\ncharacters are sensitive to the character encoding of the JavaScript source\nfile when defined in string literal form. Script tags referencing server\nresources with character entities must ensure that the 'charset' attribute\nof the script node is consistent with the actual character encoding of the\nserver resource.</p>\n\n<p>The set of character entities may be reset back to the default state by using\nthe <a href=\"#!/api/Ext.String-method-resetCharacterEntities\" rel=\"Ext.String-method-resetCharacterEntities\" class=\"docClass\">resetCharacterEntities</a> method</p>\n","params":[{"tagname":"params","type":"Object","name":"newEntities","doc":"<p>The set of character entities to add to the current\ndefinitions.</p>\n","html_type":"<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>"}],"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"method-addCharacterEntities","owner":"Ext.String","short_doc":"Adds a set of character entity definitions to the set used by\nhtmlEncode and htmlDecode. ..."},{"tagname":"method","name":"capitalize","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/lang/String.js","linenr":324}],"doc":"<p>Capitalize the first letter of the given string.</p>\n","params":[{"tagname":"params","type":"String","name":"string","doc":"\n","html_type":"<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>"}],"return":{"type":"String","name":"return","doc":"\n","properties":null,"html_type":"<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>"},"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"method-capitalize","owner":"Ext.String","short_doc":"Capitalize the first letter of the given string. ..."},{"tagname":"method","name":"createRegex","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/lang/String.js","linenr":387}],"doc":"<p>Creates a <code>RegExp</code> given a string <code>value</code> and optional flags. For example, the\nfollowing two regular expressions are equivalent.</p>\n\n<pre><code> var regex1 = <a href=\"#!/api/Ext.String-method-createRegex\" rel=\"Ext.String-method-createRegex\" class=\"docClass\">Ext.String.createRegex</a>('hello');\n\n var regex2 = /^hello$/i;\n</code></pre>\n\n<p>The following two regular expressions are also equivalent:</p>\n\n<pre><code> var regex1 = <a href=\"#!/api/Ext.String-method-createRegex\" rel=\"Ext.String-method-createRegex\" class=\"docClass\">Ext.String.createRegex</a>('world', false, false, false);\n\n var regex2 = /world/;\n</code></pre>\n","params":[{"tagname":"params","type":"String/RegExp","name":"value","doc":"<p>The String to convert to a <code>RegExp</code>.</p>\n","html_type":"<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>/<a href=\"#!/api/RegExp\" rel=\"RegExp\" class=\"docClass\">RegExp</a>"},{"tagname":"params","type":"Boolean","name":"startsWith","default":"true","optional":true,"doc":"<p>Pass <code>false</code> to allow a match to start\nanywhere in the string. By default the <code>value</code> will match only at the start\nof the string.</p>\n","html_type":"<a href=\"#!/api/Boolean\" rel=\"Boolean\" class=\"docClass\">Boolean</a>"},{"tagname":"params","type":"Boolean","name":"endsWith","default":"true","optional":true,"doc":"<p>Pass <code>false</code> to allow the match to end before\nthe end of the string. By default the <code>value</code> will match only at the end of the\nstring.</p>\n","html_type":"<a href=\"#!/api/Boolean\" rel=\"Boolean\" class=\"docClass\">Boolean</a>"},{"tagname":"params","type":"Boolean","name":"ignoreCase","default":"true","optional":true,"doc":"<p>Pass <code>false</code> to make the <code>RegExp</code> case\nsensitive (removes the 'i' flag).</p>\n","html_type":"<a href=\"#!/api/Boolean\" rel=\"Boolean\" class=\"docClass\">Boolean</a>"}],"since":"5.0.0","return":{"type":"RegExp","name":"return","doc":"\n","properties":null,"html_type":"<a href=\"#!/api/RegExp\" rel=\"RegExp\" class=\"docClass\">RegExp</a>"},"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"method-createRegex","owner":"Ext.String","short_doc":"Creates a RegExp given a string value and optional flags. ..."},{"tagname":"method","name":"createVarName","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/lang/String.js","linenr":183}],"doc":"<p>Converts a string of characters into a legal, parse-able JavaScript <code>var</code> name\nas long as the passed string contains at least one alphabetic character.\nNon alphanumeric characters, and <em>leading</em> non alphabetic characters will be removed.</p>\n","params":[{"tagname":"params","type":"String","name":"s","doc":"<p>A string to be converted into a <code>var</code> name.</p>\n","html_type":"<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>"}],"return":{"type":"String","name":"return","doc":"<p>A legal JavaScript <code>var</code> name.</p>\n","properties":null,"html_type":"<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>"},"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"method-createVarName","owner":"Ext.String","short_doc":"Converts a string of characters into a legal, parse-able JavaScript var name\nas long as the passed string contains at..."},{"tagname":"method","name":"ellipsis","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/lang/String.js","linenr":350}],"doc":"<p>Truncate a string and add an ellipsis ('...') to the end if it exceeds\nthe specified length.</p>\n","params":[{"tagname":"params","type":"String","name":"value","doc":"<p>The string to truncate.</p>\n\n","html_type":"<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>"},{"tagname":"params","type":"Number","name":"length","doc":"<p>The maximum length to allow before truncating.</p>\n\n","html_type":"<a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a>"},{"tagname":"params","type":"Boolean","name":"word","default":"false","optional":true,"doc":"<p><code>true</code> to try to find a common word break.</p>\n\n","html_type":"<a href=\"#!/api/Boolean\" rel=\"Boolean\" class=\"docClass\">Boolean</a>"}],"return":{"type":"String","name":"return","doc":"<p>The converted text.</p>\n\n","properties":null,"html_type":"<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>"},"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"method-ellipsis","owner":"Ext.String","short_doc":"Truncate a string and add an ellipsis ('...') to the end if it exceeds\nthe specified length. ..."},{"tagname":"method","name":"endsWith","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/lang/String.js","linenr":162}],"doc":"<p>Checks if a string ends with a substring</p>\n","params":[{"tagname":"params","type":"String","name":"s","doc":"<p>The original string</p>\n","html_type":"<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>"},{"tagname":"params","type":"String","name":"end","doc":"<p>The substring to check</p>\n","html_type":"<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>"},{"tagname":"params","type":"Boolean","name":"ignoreCase","default":"false","optional":true,"doc":"<p>True to ignore the case in the comparison</p>\n","html_type":"<a href=\"#!/api/Boolean\" rel=\"Boolean\" class=\"docClass\">Boolean</a>"}],"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"method-endsWith","owner":"Ext.String","short_doc":"Checks if a string ends with a substring ..."},{"tagname":"method","name":"escape","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/lang/String.js","linenr":433}],"doc":"<p>Escapes the passed string for ' and .</p>\n","params":[{"tagname":"params","type":"String","name":"string","doc":"<p>The string to escape.</p>\n\n","html_type":"<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>"}],"return":{"type":"String","name":"return","doc":"<p>The escaped string.</p>\n\n","properties":null,"html_type":"<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>"},"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"method-escape","owner":"Ext.String","short_doc":"Escapes the passed string for ' and . ..."},{"tagname":"method","name":"escapeRegex","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/lang/String.js","linenr":378}],"doc":"<p>Escapes the passed string for use in a regular expression.</p>\n","params":[{"tagname":"params","type":"String","name":"string","doc":"<p>The string to escape.</p>\n\n","html_type":"<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>"}],"return":{"type":"String","name":"return","doc":"<p>The escaped string.</p>\n\n","properties":null,"html_type":"<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>"},"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"method-escapeRegex","owner":"Ext.String","short_doc":"Escapes the passed string for use in a regular expression. ..."},{"tagname":"method","name":"format","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/Template.js","linenr":473}],"doc":"<p>Allows you to define a tokenized string and pass an arbitrary number of arguments to replace\nthe tokens. Each token must be unique, and must increment in the format {0}, {1}, etc.\nExample usage:</p>\n\n<pre><code>var cls = 'my-class',\n    text = 'Some text';\nvar s = <a href=\"#!/api/Ext.String-method-format\" rel=\"Ext.String-method-format\" class=\"docClass\">Ext.String.format</a>('&lt;div class=\"{0}\"&gt;{1}&lt;/div&gt;', cls, text);\n// s now contains the string: '&lt;div class=\"my-class\"&gt;Some text&lt;/div&gt;'\n</code></pre>\n","params":[{"tagname":"params","type":"String","name":"format","doc":"<p>The tokenized string to be formatted.</p>\n\n","html_type":"<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>"},{"tagname":"params","type":"Mixed...","name":"values","doc":"<p>The values to replace tokens <code>{0}</code>, <code>{1}</code>, etc in order.</p>\n\n","html_type":"Mixed..."}],"return":{"type":"String","name":"return","doc":"<p>The formatted string.</p>\n\n","properties":null,"html_type":"<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>"},"owner":"Ext.String","inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":null,"fires":null,"method_calls":null,"id":"method-format","short_doc":"Allows you to define a tokenized string and pass an arbitrary number of arguments to replace\nthe tokens. ..."},{"tagname":"method","name":"fromCodePoint","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/lang/String.js","linenr":45}],"doc":"<p>Creates a string created by using the specified sequence of code points.</p>\n","params":[{"tagname":"params","type":"Number...","name":"codePoint","doc":"<p>Codepoints from which to build the string.</p>\n","html_type":"<a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a>..."}],"return":{"type":"String","name":"return","doc":"<p>A string built from the sequence of code points passed.</p>\n","properties":null,"html_type":"<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>"},"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":null,"fires":null,"method_calls":null,"id":"method-fromCodePoint","owner":"Ext.String","short_doc":"Creates a string created by using the specified sequence of code points. ..."},{"tagname":"method","name":"hasHtmlCharacters","autodetected":{"inheritdoc":true,"static":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/lang/String.js","linenr":215}],"doc":"<p>Checks if a string has values needing to be html encoded.</p>\n","private":true,"params":[{"tagname":"params","type":"String","name":"s","doc":"<p>The string to test</p>\n","html_type":"<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>"}],"return":{"type":"Boolean","name":"return","doc":"<p><code>true</code> if the string contains HTML characters</p>\n","properties":null,"html_type":"<a href=\"#!/api/Boolean\" rel=\"Boolean\" class=\"docClass\">Boolean</a>"},"inheritdoc":null,"static":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"method-hasHtmlCharacters","owner":"Ext.String","short_doc":"Checks if a string has values needing to be html encoded. ..."},{"tagname":"method","name":"htmlDecode","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/lang/String.js","linenr":205}],"doc":"<p>Convert certain characters (&amp;, &lt;, >, ', and \") from their HTML character equivalents.</p>\n","params":[{"tagname":"params","type":"String","name":"value","doc":"<p>The string to decode.</p>\n\n\n\n","html_type":"<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>"}],"return":{"type":"String","name":"return","doc":"<p>The decoded text.</p>\n\n\n\n","properties":null,"html_type":"<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>"},"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"method-htmlDecode","owner":"Ext.String","short_doc":"Convert certain characters (&amp;, &lt;, >, ', and \") from their HTML character equivalents. ..."},{"tagname":"method","name":"htmlEncode","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/lang/String.js","linenr":194}],"doc":"<p>Convert certain characters (&amp;, &lt;, >, ', and \") to their HTML character equivalents\nfor literal display in web pages.</p>\n","params":[{"tagname":"params","type":"String","name":"value","doc":"<p>The string to encode.</p>\n\n\n\n","html_type":"<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>"}],"return":{"type":"String","name":"return","doc":"<p>The encoded text.</p>\n\n\n\n","properties":null,"html_type":"<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>"},"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"method-htmlEncode","owner":"Ext.String","short_doc":"Convert certain characters (&amp;, &lt;, >, ', and \") to their HTML character equivalents\nfor literal display in web ..."},{"tagname":"method","name":"insert","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/lang/String.js","linenr":88}],"doc":"<p>Inserts a substring into a string.</p>\n","params":[{"tagname":"params","type":"String","name":"s","doc":"<p>The original string.</p>\n","html_type":"<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>"},{"tagname":"params","type":"String","name":"value","doc":"<p>The substring to insert.</p>\n","html_type":"<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>"},{"tagname":"params","type":"Number","name":"index","doc":"<p>The index to insert the substring. Negative indexes will insert\nfrom the end of the string. Example:</p>\n\n<pre><code><a href=\"#!/api/Ext.String-method-insert\" rel=\"Ext.String-method-insert\" class=\"docClass\">Ext.String.insert</a>(\"abcdefg\", \"h\", -1); // abcdefhg\n</code></pre>\n","html_type":"<a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a>"}],"return":{"type":"String","name":"return","doc":"<p>The value with the inserted substring</p>\n","properties":null,"html_type":"<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>"},"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"method-insert","owner":"Ext.String","short_doc":"Inserts a substring into a string. ..."},{"tagname":"method","name":"leftPad","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/lang/String.js","linenr":465}],"doc":"<p>Pads the left side of a string with a specified character.  This is especially useful\nfor normalizing number and date strings.  Example usage:</p>\n\n<pre><code>var s = <a href=\"#!/api/Ext.String-method-leftPad\" rel=\"Ext.String-method-leftPad\" class=\"docClass\">Ext.String.leftPad</a>('123', 5, '0');\n// s now contains the string: '00123'\n</code></pre>\n","params":[{"tagname":"params","type":"String","name":"string","doc":"<p>The original string.</p>\n\n","html_type":"<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>"},{"tagname":"params","type":"Number","name":"size","doc":"<p>The total length of the output string.</p>\n\n","html_type":"<a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a>"},{"tagname":"params","type":"String","name":"character","default":"' '","optional":true,"doc":"<p>The character with which to pad the original\nstring.</p>\n\n","html_type":"<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>"}],"return":{"type":"String","name":"return","doc":"<p>The padded string.</p>\n\n","properties":null,"html_type":"<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>"},"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"method-leftPad","owner":"Ext.String","short_doc":"Pads the left side of a string with a specified character. ..."},{"tagname":"method","name":"repeat","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/lang/String.js","linenr":490}],"doc":"<p>Returns a string with a specified number of repetitions a given string pattern.\nThe pattern be separated by a different string.</p>\n\n<pre><code> var s = <a href=\"#!/api/Ext.String-method-repeat\" rel=\"Ext.String-method-repeat\" class=\"docClass\">Ext.String.repeat</a>('---', 4); // = '------------'\n var t = <a href=\"#!/api/Ext.String-method-repeat\" rel=\"Ext.String-method-repeat\" class=\"docClass\">Ext.String.repeat</a>('--', 3, '/'); // = '--/--/--'\n</code></pre>\n","params":[{"tagname":"params","type":"String","name":"pattern","doc":"<p>The pattern to repeat.</p>\n","html_type":"<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>"},{"tagname":"params","type":"Number","name":"count","doc":"<p>The number of times to repeat the pattern (may be 0).</p>\n","html_type":"<a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a>"},{"tagname":"params","type":"String","name":"sep","doc":"<p>An option string to separate each pattern.</p>\n","html_type":"<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>"}],"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"method-repeat","owner":"Ext.String","short_doc":"Returns a string with a specified number of repetitions a given string pattern. ..."},{"tagname":"method","name":"resetCharacterEntities","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"params":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/lang/String.js","linenr":272}],"doc":"<p>Resets the set of character entity definitions used by\n<a href=\"#!/api/Ext.String-method-htmlEncode\" rel=\"Ext.String-method-htmlEncode\" class=\"docClass\">htmlEncode</a> and <a href=\"#!/api/Ext.String-method-htmlDecode\" rel=\"Ext.String-method-htmlDecode\" class=\"docClass\">htmlDecode</a> back to the\ndefault state.</p>\n","inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"params":[],"chainable":false,"fires":[],"method_calls":["addCharacterEntities"],"id":"method-resetCharacterEntities","owner":"Ext.String","short_doc":"Resets the set of character entity definitions used by\nhtmlEncode and htmlDecode back to the\ndefault state. ..."},{"tagname":"method","name":"splitWords","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/lang/String.js","linenr":516}],"doc":"<p>Splits a string of space separated words into an array, trimming as needed. If the\nwords are already an array, it is returned.</p>\n","params":[{"tagname":"params","type":"String/Array","name":"words","doc":"\n","html_type":"<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>/<a href=\"#!/api/Array\" rel=\"Array\" class=\"docClass\">Array</a>"}],"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"method-splitWords","owner":"Ext.String","short_doc":"Splits a string of space separated words into an array, trimming as needed. ..."},{"tagname":"method","name":"startsWith","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/lang/String.js","linenr":141}],"doc":"<p>Checks if a string starts with a substring</p>\n","params":[{"tagname":"params","type":"String","name":"s","doc":"<p>The original string</p>\n","html_type":"<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>"},{"tagname":"params","type":"String","name":"start","doc":"<p>The substring to check</p>\n","html_type":"<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>"},{"tagname":"params","type":"Boolean","name":"ignoreCase","default":"false","optional":true,"doc":"<p>True to ignore the case in the comparison</p>\n","html_type":"<a href=\"#!/api/Boolean\" rel=\"Boolean\" class=\"docClass\">Boolean</a>"}],"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"method-startsWith","owner":"Ext.String","short_doc":"Checks if a string starts with a substring ..."},{"tagname":"method","name":"toggle","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/lang/String.js","linenr":442}],"doc":"<p>Utility function that allows you to easily switch a string between two alternating\nvalues. The passed value is compared to the current string, and if they are equal,\nthe other value that was passed in is returned. If they are already different,\nthe first value passed in is returned.  Note that this method returns the new value\nbut does not change the current string.</p>\n\n<pre><code>// alternate sort directions\nsort = <a href=\"#!/api/Ext.String-method-toggle\" rel=\"Ext.String-method-toggle\" class=\"docClass\">Ext.String.toggle</a>(sort, 'ASC', 'DESC');\n\n// instead of conditional logic:\nsort = (sort === 'ASC' ? 'DESC' : 'ASC');\n</code></pre>\n","params":[{"tagname":"params","type":"String","name":"string","doc":"<p>The current string.</p>\n\n","html_type":"<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>"},{"tagname":"params","type":"String","name":"value","doc":"<p>The value to compare to the current string.</p>\n\n","html_type":"<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>"},{"tagname":"params","type":"String","name":"other","doc":"<p>The new value to use if the string already equals the first value\npassed in.</p>\n\n","html_type":"<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>"}],"return":{"type":"String","name":"return","doc":"<p>The new value.</p>\n\n","properties":null,"html_type":"<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>"},"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"method-toggle","owner":"Ext.String","short_doc":"Utility function that allows you to easily switch a string between two alternating\nvalues. ..."},{"tagname":"method","name":"trim","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/lang/String.js","linenr":305}],"doc":"<p>Trims whitespace from either end of a string, leaving spaces within the string intact.\nExample:</p>\n\n<pre><code>var s = '  foo bar  ';\nalert('-' + s + '-');                   //alerts \"- foo bar -\"\nalert('-' + <a href=\"#!/api/Ext.String-method-trim\" rel=\"Ext.String-method-trim\" class=\"docClass\">Ext.String.trim</a>(s) + '-');  //alerts \"-foo bar-\"\n</code></pre>\n","params":[{"tagname":"params","type":"String","name":"string","doc":"<p>The string to trim.</p>\n\n","html_type":"<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>"}],"return":{"type":"String","name":"return","doc":"<p>The trimmed string.</p>\n\n","properties":null,"html_type":"<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>"},"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"method-trim","owner":"Ext.String","short_doc":"Trims whitespace from either end of a string, leaving spaces within the string intact. ..."},{"tagname":"method","name":"uncapitalize","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/lang/String.js","linenr":337}],"doc":"<p>Uncapitalize the first letter of a given string.</p>\n","params":[{"tagname":"params","type":"String","name":"string","doc":"\n","html_type":"<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>"}],"return":{"type":"String","name":"return","doc":"\n","properties":null,"html_type":"<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>"},"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"method-uncapitalize","owner":"Ext.String","short_doc":"Uncapitalize the first letter of a given string. ..."},{"tagname":"method","name":"urlAppend","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-core/lang/String.js","linenr":290}],"doc":"<p>Appends content to the query string of a URL, handling logic for whether to place\na question mark or ampersand.</p>\n","params":[{"tagname":"params","type":"String","name":"url","doc":"<p>The URL to append to.</p>\n\n","html_type":"<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>"},{"tagname":"params","type":"String","name":"string","doc":"<p>The content to append to the URL.</p>\n\n","html_type":"<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>"}],"return":{"type":"String","name":"return","doc":"<p>The resulting URL</p>\n\n","properties":null,"html_type":"<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>"},"inheritdoc":null,"static":null,"private":null,"inheritable":null,"linenr":null,"chainable":false,"fires":null,"method_calls":null,"id":"method-urlAppend","owner":"Ext.String","short_doc":"Appends content to the query string of a URL, handling logic for whether to place\na question mark or ampersand. ..."}],"alternateClassNames":[],"aliases":{},"id":"class-Ext.String"}