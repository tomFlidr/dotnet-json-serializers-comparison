{"tagname":"class","name":"Ext.ux.layout.ResponsiveColumn","autodetect":null,"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-ux/layout/ResponsiveColumn.js","linenr":1}],"doc":"<p>A simple grid-like layout for proportionally dividing container space and allocating it\nto each item. All items in this layout are given one or more percentage sizes and CSS\n<code>float:left</code> is used to provide the wrapping.</p>\n\n<p>To select which of the percentage sizes an item uses, this layout adds a viewport\n<a href=\"#!/api/Ext.ux.layout.ResponsiveColumn-cfg-states\" rel=\"Ext.ux.layout.ResponsiveColumn-cfg-states\" class=\"docClass\">size-dependent</a> class name to the container. The style sheet must\nprovide the rules to select the desired size using the responsivecolumn-item\nmixin.</p>\n\n<p>For example, a panel in a responsive column layout might add the following styles:</p>\n\n<pre><code> .my-panel {\n     // consume 50% of the available space inside the container by default\n     @include responsivecolumn-item(50%);\n\n     .x-responsivecolumn-small &amp; {\n         // consume 100% of available space in \"small\" mode\n         // (viewport width &lt; 1000 by default)\n         @include responsivecolumn-item(100%);\n     }\n }\n</code></pre>\n\n<p>Alternatively, instead of targeting specific panels in CSS, you can create reusable\nclasses:</p>\n\n<pre><code> .big-50 {\n     // consume 50% of the available space inside the container by default\n     @include responsivecolumn-item(50%);\n }\n\n .x-responsivecolumn-small {\n     &gt; .small-100 {\n         @include responsivecolumn-item(100%);\n     }\n }\n</code></pre>\n\n<p>These can be added to components in the layout using the <code>responsiveCls</code> config:</p>\n\n<pre><code> items: [{\n     xtype: 'my-panel',\n\n     // Use 50% of space when viewport is \"big\" and 100% when viewport\n     // is \"small\":\n     responsiveCls: 'big-50 small-100'\n }]\n</code></pre>\n\n<p>The <code>responsiveCls</code> config is provided by this layout to avoid overwriting classes\nspecified using <code>cls</code> or other standard configs.</p>\n\n<p>Internally, this layout simply uses <code>float:left</code> and CSS <code>calc()</code> (except on IE8) to\n\"flex\" each item. The calculation is always based on a percentage with a spacing taken\ninto account to separate the items from each other.</p>\n","aliases":{"widget":null,"request":null},"alternateClassNames":[],"extends":"Ext.layout.container.Auto","mixins":[],"requires":[],"uses":[],"singleton":null,"private":null,"enum":null,"members":[{"tagname":"cfg","name":"states","autodetected":{"inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"default":true,"accessor":true,"evented":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-ux/layout/ResponsiveColumn.js","linenr":59}],"doc":"<p>A set of layout state names corresponding to viewport size thresholds. One of the\nstates will be used to assign the responsive column CSS class to the container to\ntrigger appropriate item sizing.</p>\n\n<p>For example:</p>\n\n<pre><code> layout: {\n     type: 'responsivecolumn',\n     states: {\n         small: 800,\n         medium: 1200,\n         large: 0\n     }\n }\n</code></pre>\n\n<p>Given the above set of responsive states, one of the following CSS classes will be\nadded to the container:</p>\n\n<ul>\n<li><code>x-responsivecolumn-small</code> - If the viewport is &lt;= 800px</li>\n<li><code>x-responsivecolumn-medium</code> - If the viewport is > 800px and &lt;= 1200px</li>\n<li><code>x-responsivecolumn-large</code> - If the viewport is > 1200px</li>\n</ul>\n\n\n<p>For sake of efficiency these classes are based on the size of the browser viewport\n(the browser window) and not on the container size. As the size of the viewport\nchanges, this layout will maintain the appropriate CSS class on the container which\nwill then activate the appropriate CSS rules to size the child items.</p>\n","params":null,"return":null,"type":"Object","throws":null,"default":"{small: 1000, large: 0}","properties":null,"private":null,"protected":null,"chainable":null,"since":null,"inheritdoc":null,"static":null,"deprecated":null,"inheritable":null,"linenr":null,"fires":null,"method_calls":null,"readonly":null,"required":null,"template":null,"id":"cfg-states","owner":"Ext.ux.layout.ResponsiveColumn","overrides":null,"short_doc":"A set of layout state names corresponding to viewport size thresholds. ...","html_type":"Object"},{"tagname":"property","name":"_responsiveCls","autodetected":{"tagname":"property","inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"type":true,"default":true,"readonly":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-ux/layout/ResponsiveColumn.js","linenr":94}],"doc":"\n","params":null,"return":null,"type":"String","throws":null,"default":"Ext.baseCSSPrefix + 'responsivecolumn'","properties":null,"private":true,"protected":null,"chainable":null,"since":null,"inheritdoc":null,"static":null,"deprecated":null,"inheritable":null,"linenr":94,"fires":null,"method_calls":null,"readonly":null,"required":null,"template":null,"id":"property-_responsiveCls","owner":"Ext.ux.layout.ResponsiveColumn","overrides":null,"short_doc":" ...","html_type":"String"},{"tagname":"method","name":"beginLayout","autodetected":{"tagname":"method","inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"params":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-ux/layout/ResponsiveColumn.js","linenr":101}],"doc":"\n","params":[{"tagname":null,"type":"Object","name":"ownerContext","doc":null,"html_type":"Object","default":null,"optional":null,"properties":null}],"return":null,"type":null,"throws":null,"default":null,"properties":null,"private":true,"protected":null,"chainable":false,"since":null,"inheritdoc":null,"static":null,"deprecated":null,"inheritable":null,"linenr":101,"fires":[],"method_calls":["callParent"],"readonly":null,"required":null,"template":null,"id":"method-beginLayout","owner":"Ext.ux.layout.ResponsiveColumn","overrides":null,"short_doc":" ...","html_type":null},{"tagname":"method","name":"initLayout","autodetected":{"tagname":"method","inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"params":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-ux/layout/ResponsiveColumn.js","linenr":96}],"doc":"\n","params":[],"return":null,"type":null,"throws":null,"default":null,"properties":null,"private":true,"protected":null,"chainable":false,"since":null,"inheritdoc":null,"static":null,"deprecated":null,"inheritable":null,"linenr":96,"fires":[],"method_calls":["callParent"],"readonly":null,"required":null,"template":null,"id":"method-initLayout","owner":"Ext.ux.layout.ResponsiveColumn","overrides":null,"short_doc":" ...","html_type":null},{"tagname":"method","name":"onAdd","autodetected":{"tagname":"method","inheritdoc":true,"static":true,"private":true,"inheritable":true,"linenr":true,"params":true,"chainable":true,"fires":true,"method_calls":true},"files":[{"filename":"C:/Users/Administrator/Desktop/Ext.JS TS Types Generator v1.3.0/tmp/src-ux/layout/ResponsiveColumn.js","linenr":127}],"doc":"\n","params":[{"tagname":null,"type":"Object","name":"item","doc":null,"html_type":"Object","default":null,"optional":null,"properties":null}],"return":null,"type":null,"throws":null,"default":null,"properties":null,"private":true,"protected":null,"chainable":false,"since":null,"inheritdoc":null,"static":null,"deprecated":null,"inheritable":null,"linenr":127,"fires":[],"method_calls":["callParent"],"readonly":null,"required":null,"template":null,"id":"method-onAdd","owner":"Ext.ux.layout.ResponsiveColumn","overrides":null,"short_doc":" ...","html_type":null}],"code_type":"ext_define","id":"class-Ext.ux.layout.ResponsiveColumn","component":false,"short_doc":"A simple grid-like layout for proportionally dividing container space and allocating it\nto each item. ...","deprecated":null}